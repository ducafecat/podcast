[{"title":"Dart语言学习 - 34 注解 Metadata","date":"2019-01-21T10:15:56.000Z","path":"2019/01/21/dart/dart-34-metadata/","text":"本节目标 内置 metadata metadata 如何使用 环境 Dart 2.1.0 作用官方称之为 元数据 , 其实在 java 里就是注解 简化代码编写，方便阅读，和重用 内置 deprecated用来注解 不建议使用、老旧的 成员对象 1234567891011121314151617main(List&lt;String&gt; args) &#123; var t = new Television(); t.activate(); t.turnOn();&#125;class Television &#123; @deprecated void activate() &#123; turnOn(); &#125; void turnOn() &#123; print('on!'); &#125;&#125; 内置 override表明你的函数是想覆写超类的一个函数 超类就是被你集成的父类 下面的代码中父类是 Object 1234567891011main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.message();&#125;class A &#123; @override noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125; 内置 proxy注解来避免警告信息 在 Dart2 中已经被标记为过时老旧 1234567891011main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.say();&#125;@proxyclass A &#123; noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125; 自定义注解使用反射可以在运行时获取元数据信息 比如服务端的控制器开发 下面的代码 展示了如何在反射中读取 metadata 信息 123456789101112131415161718192021222324252627282930import 'dart:mirrors';main(List&lt;String&gt; args) &#123; currentMirrorSystem().libraries.forEach((uri, lib) &#123; // print('lib: $&#123;uri&#125;'); lib.declarations.forEach((s, decl) &#123; // print('decl: $&#123;s&#125;'); decl.metadata.where((m) =&gt; m.reflectee is Todo).forEach((m) &#123; var anno = m.reflectee as Todo; if (decl is MethodMirror) &#123; print('Todo($&#123;anno.who&#125;, $&#123;anno.what&#125;)'); ((decl as MethodMirror).owner as LibraryMirror).invoke(s, []); &#125; ; &#125;); &#125;); &#125;);&#125;@Todo('seth', 'make this do something')void doSomething() &#123; print('do something');&#125;class Todo &#123; final String who; final String what; const Todo(this.who, this.what);&#125; 代码 34-媒体信息 参考 metadata © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 33 类型信息 typedef","date":"2019-01-21T09:21:06.000Z","path":"2019/01/21/dart/dart-33-typedef/","text":"本节目标 typedef 使用 环境 Dart 2.1.0 作用typedef 用来保存函数的信息，未来可能会保存类信息。 示例代码 采用 typedef 123456789101112131415typedef int Compare(Object a, Object b);class SortedCollection &#123; Compare compare; SortedCollection(this.compare);&#125;int sort(Object a, Object b) =&gt; 0;main() &#123; SortedCollection coll = new SortedCollection(sort); assert(coll.compare is Function); assert(coll.compare is Compare);&#125; 未采用 123456789101112131415161718class SortedCollection &#123; Function compare; SortedCollection(int f(Object a, Object b)) &#123; compare = f; &#125;&#125;// Initial, broken implementation.int sort(Object a, Object b) =&gt; 0;main() &#123; SortedCollection coll = new SortedCollection(sort); // 我们只知道 compare 是一个 Function 类型， // 但是不知道具体是何种 Function 类型？ assert(coll.compare is Function);&#125; 区别就是 typedef 编辑器会提示函数信息 代码 33-类型信息 参考 typedefs © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 32 线程隔离 isolate","date":"2019-01-21T07:52:55.000Z","path":"2019/01/21/dart/dart-32-isolates/","text":"本节目标 了解线程隔离 环境 Dart 2.1.0 isolate在Dart中实现并发可以用Isolate，它是类似于线程(thread)但不共享内存的独立运行的worker，是一个独立的Dart程序执行环境。其实默认环境就是一个main isolate。 在Dart语言中，所有的Dart代码都运行在某个isolate中，代码只能使用所属isolate的类和值。不同的isolate可以通过port发送message进行交流。 示意图 ReceivePort 创建入口点 Isolate.spawn 连接进程 SendPort.send 发送消息 echo 例子123456789101112131415161718192021222324252627282930313233343536373839import 'dart:async';import 'dart:isolate';main() async &#123; var receivePort = new ReceivePort(); await Isolate.spawn(echo, receivePort.sendPort); // first 是 echo 线程的消息入口 var sendPort = await receivePort.first; var msg = await sendReceive(sendPort, \"foo\"); print('received $msg'); msg = await sendReceive(sendPort, \"bar\"); print('received $msg');&#125;// 隔离的入口点echo(SendPort sendPort) async &#123; // 打开接收端口接收传入的消息。 var port = new ReceivePort(); // 通知任何其他隔离此隔离侦听的端 sendPort.send(port.sendPort); // 循环接收消息 await for (var msg in port) &#123; var data = msg[0]; SendPort replyTo = msg[1]; replyTo.send(data); if (data == \"bar\") port.close(); &#125;&#125;// 发送并接收消息Future sendReceive(SendPort port, msg) &#123; ReceivePort response = new ReceivePort(); port.send([msg, response.sendPort]); return response.first;&#125; 代码 32-隔离 参考 isolates © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"flutter-01-introduce","date":"2019-01-17T02:25:02.000Z","path":"2019/01/17/flutter/flutter-01-introduce/","text":"本节目标 介绍 Flutter 课程计划 如果获取课程资料、代码、视频 环境 Flutter 0.7 适合阅读人群Flutter 介绍课程设计12345678910111213141516171819202122232425262728293031* 前言* 环境配置 * IOS * Android* 快速感受 * Hello Word! * 组件 Widgets * 路由 Route * 第三方包 pub * 资源 assets * 调试 debug* 基础组件 * 组件总览 * 文本、字体、样式 * 按钮 * 图片 * Icon * 输入框 * 单选、复选框 * 表单* 布局组件* 容器组件* 滚动组件* 功能组件* 事件通知* 动画* 自定义组件* 文件操作* 网络操作* 插件开发* 国际化 参考 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Dart语言学习 - 31 可调用类 callable","date":"2019-01-16T03:37:26.000Z","path":"2019/01/16/dart/dart-31-callable/","text":"本节目标 定义并执行可定义类 环境 Dart 2.1.0 callable123456789101112main(List&lt;String&gt; args) &#123; var phone = IOSPhone(); phone('911'); // IOSPhone()('911');&#125;class IOSPhone &#123; call(String num) &#123; print('phone number is $num'); &#125;&#125; 代码 可调用类 参考 callable-classes © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 30 - 生成器 Generators","date":"2019-01-15T09:25:58.000Z","path":"2019/01/15/dart/dart-30-generator/","text":"本节目标 同步、异步代码生成器 环境 Dart 2.1.0 同步生成器123456789101112131415main(List&lt;String&gt; args) &#123; var it = naturalsTo(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsTo(int n) sync* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; yield 会等待 moveNext 指令 异步生成器123456789101112131415161718192021222324import 'dart:async';main(List&lt;String&gt; args) &#123; // 流监听 // asynchronousNaturalsTo(5).listen((onData) &#123; // print(onData); // &#125;); // 流监听 StreamSubscription 对象 StreamSubscription subscription = asynchronousNaturalsTo(5).listen(null); subscription.onData((value) &#123; print(value); // subscription.pause(); &#125;);&#125;Stream&lt;int&gt; asynchronousNaturalsTo(int n) async* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; 以流的方式一次性推送 StreamSubscription 对象进行流监听控制 递归生成器12345678910111213main(List&lt;String&gt; args) &#123; var it = naturalsDownFrom(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsDownFrom(int n) sync* &#123; if ( n &gt; 0) &#123; yield n; yield* naturalsDownFrom(n-1); &#125;&#125; yield* 以指针的方式传递递归对象，而不是整个同步对象 代码 生成器 generators 参考 generators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 29 异步 async","date":"2018-12-05T07:51:09.000Z","path":"2018/12/05/dart/dart-29-async/","text":"本节目标 调用异步 等待、递归 异步返回值 环境 Dart 2.1.0 调用异步 回调12345678import 'package:dio/dio.dart';void main() &#123; Dio dio = new Dio(); dio.get(\"https://www.baidu.com\").then((response) &#123; print(response.data); &#125;);&#125; then 的方式异步回调 调用异步 等待1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; async 写在函数定义await 写在异步请求头 异步返回值123456789101112import 'package:dio/dio.dart';void main() async &#123; var content = await getUrl('https://www.baidu.com'); print(content);&#125;Future&lt;String&gt; getUrl(String url) async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(url); return response.data;&#125; 定义 Future&lt;T&gt; 返回对象 代码 异步 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 28 泛型","date":"2018-12-05T03:30:26.000Z","path":"2018/12/05/dart/dart-28-generic/","text":"本节目标 使用泛型 定义泛型 限制泛型 环境 Dart 2.1.0 泛型使用12345678910111213main(List&lt;String&gt; args) &#123; var l = List&lt;String&gt;(); l.add('aaa'); l.add('bbb'); l.add('ccc'); print(l); var m = Map&lt;int, String&gt;(); m[1] = 'aaaa'; m[2] = 'bbbb'; m[3] = 'cccc'; print(m);&#125; 很多的容器对象，在创建对象时都可以定义泛型类型。 泛型函数123456789main(List&lt;String&gt; args) &#123; var key = addCache('a00001', 'val.....'); print(key);&#125;K addCache&lt;K, V&gt;(K key, V val) &#123; print('$&#123;key&#125; $&#123;val&#125;'); return key;&#125; 泛型可以用在一个函数的定义 构造函数泛型123456789main(List&lt;String&gt; args) &#123; var p = Phone&lt;String&gt;('abc00000011111'); print(p.mobileNumber);&#125;class Phone&lt;T&gt; &#123; final T mobileNumber; Phone(this.mobileNumber);&#125; 这是大多数情况下使用泛型的场景，在一个类的构造函数中 泛型限制12345678910111213141516main(List&lt;String&gt; args) &#123; var ad = AndroidPhone(); var p = Phone&lt;AndroidPhone&gt;(ad); p.mobile.startup();&#125;class Phone&lt;T extends AndroidPhone &gt; &#123; final T mobile; Phone(this.mobile);&#125;class AndroidPhone &#123; void startup() &#123; print('Android Phone 开机'); &#125;&#125; 通过 extends 关键字 可以限定你可以泛型使用的类型 代码 泛型 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 27 库","date":"2018-12-05T02:00:54.000Z","path":"2018/12/05/dart/dart-27-library/","text":"本节目标 核心库 外部库 导入模块 环境 Dart 2.1.0 导入核心库1234567import 'dart:io';void main() &#123; var f = new File('README.md'); var content = f.readAsStringSync(); print(content);&#125; 导入第三方库 编写 pubspec.yaml 123name: ducafecatdependencies: dio: 1.0.9 程序调用 1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; 导入文件1234567import './phone.dart';void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125; 前缀123456789101112import './phone.dart';import './phone1.dart' as pp;void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown(); var xm1 = pp.Phone('android'); xm1.startup(); xm1.shutdown();&#125; 筛选包内容12345678// import './phone.dart' hide AndroidPhone;import './phone.dart' show IOSPhone;void main() &#123; var xm = IOSPhone(); xm.startup(); xm.shutdown();&#125; hideo 筛掉某几个包show 只使用某几个包 延迟载入1234567891011import './phone.dart' deferred as pp;void main() async &#123; var run = true; if (run) &#123; await pp.loadLibrary(); var xm = pp.Phone('android'); xm.startup(); xm.shutdown(); &#125;&#125; loadLibrary() 方式在需要的时候载入包可提高程序启动速度用在不常使用的功能用在载入时间过长的包 代码 库 参考 language-tour 包管理平台 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 26 工厂函数","date":"2018-12-04T06:33:01.000Z","path":"2018/12/04/dart/dart-26-factory/","text":"本节目标 工厂函数 工厂构造函数 环境 Dart 2.1.0 工厂函数简化类型实例化 1234567891011121314151617181920212223242526272829303132333435363738void main() &#123; var xm = phoneFactory('ios'); xm.startup(); xm.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;Phone phoneFactory(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('Android Phone 开机'); &#125;&#125;class IOSPhone extends Phone &#123; void startup() &#123; super.startup(); print('IOS Phone 开机'); &#125;&#125; 工厂构造函数12345678910111213141516171819202122232425262728293031323334353637void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125;abstract class Phone &#123; factory Phone(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125; &#125; void startup(); void shutdown();&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('Android Phone 开机'); &#125; void shutdown() &#123; print('Android 关机'); &#125;&#125;class IOSPhone implements Phone &#123; void startup() &#123; print('IOS Phone 开机'); &#125; void shutdown() &#123; print('IOS 关机'); &#125;&#125; 代码 factory 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 25 多继承类 mixin","date":"2018-12-04T03:26:18.000Z","path":"2018/12/04/dart/dart-25-mixin/","text":"本节目标 多继承类的实现方式 函数重名冲突 环境 Dart 2.1.0 类多继承123456789101112131415161718192021222324252627282930313233343536373839404142void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.call(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 采用 with ... , .... , ... 方式 mixin 入多个类功能 函数重名冲突1234567891011121314151617181920212223242526272829303132333435363738394041424344454647void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class QQ &#123; void sms() &#123; print('qq sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin, QQ &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 遇到相同功能的函数，最后载入的会覆盖之前的函数定义 代码 mixin 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 24 extends 继承","date":"2018-11-28T09:45:11.000Z","path":"2018/11/28/dart/dart-24-extends/","text":"本节目标 实现继承 继承抽象类的问题 不可多继承 父类调用 调用父类构造 重写超类函数 环境 Dart 2.0.0 实现继承1234567891011121314151617void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123;&#125; 继承抽象类的问题12345678910111213void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class Phone &#123; void startup(); void shutdown();&#125;class AndroidPhone extends Phone &#123;&#125; 抽象类中只定义抽象函数，实例化访问会报错 父类调用1234567891011121314151617181920void main() &#123; var p = AndroidPhone(); p.startup();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; super 对象可以访问父类 调用父类构造1234567891011121314151617void main() &#123; var p = AndroidPhone(12345678); p.showNumber();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number);&#125; 可调用父类的 构造函数 重写超类函数12345678910111213141516171819202122void main() &#123; dynamic p = AndroidPhone(12345678); p.showNumber111();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number); @override void noSuchMethod(Invocation mirror) &#123; print('被重写 noSuchMethod'); &#125;&#125; 在重写的函数上加修饰符 @override 代码 extends 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 23 interface 接口","date":"2018-11-28T09:23:46.000Z","path":"2018/11/28/dart/dart-23-interface/","text":"本节目标 实现接口 implements 多接口 环境 Dart 2.0.0 Dart 中没有 interface 关键字实现接口12345678910111213141516171819void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class IPhone &#123; void startup(); void shutdown();&#125;class AndroidPhone implements IPhone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; 接口用途的抽象类 请用字母 I 开头 , 如 IPhone 从一个普通类履行接口1234567891011121314151617181920212223void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以从一个普通的类履行接口 履行多接口12345678910111213141516171819202122232425262728void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class Mobile &#123; int signal;&#125;class AndroidPhone implements Phone, Mobile &#123; int signal; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以履行多个接口 代码 interface 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 22 abstract 抽象","date":"2018-11-28T08:17:42.000Z","path":"2018/11/28/dart/dart-22-abstract/","text":"本节目标 抽象 类、函数 接口方式使用 继承方式使用 环境 Dart 2.0.0 abstract 类、函数、成员 普通类前加 abstract 123456abstract class Person &#123; static const String name = 'ducafecat'; void printName()&#123; print(name); &#125;&#125; 不能直接 new 实例化12var p = Person();p.printName(); Dart 2 开始 new 可以不写，提高阅读体验 继承方式使用定义 12class Teacher extends Person &#123;&#125; 实例 12var user = Teacher();user.printName(); 接口方式使用定义 1234567891011abstract class Person &#123; static const String name = ''; void printName();&#125;class Student implements Person &#123; String name = 'this is student'; void printName() &#123; print(name); &#125;&#125; 实例 12var user = Student();user.printName(); 代码 abstract 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 21 静态成员","date":"2018-11-17T08:02:07.000Z","path":"2018/11/17/dart/dart-21-static/","text":"本节目标 静态变量 静态方法 环境 Dart 2.0.0 静态变量static 定义声明 123class People &#123; static String name = 'ducafecat';&#125; 调用 静态变量可以通过外部直接访问,不需要将类实例化 1print(People.name); 函数内部访问实例化后的类也可以访问该静态变量 声明 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(name); &#125;&#125; 调用 12var p = new People();p.show(); 不能用 this因为静态变量实际上存在于类中,而不是实例本身 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(this.name); &#125;&#125; 静态方法静态方法可以通过外部直接访问 声明 123456class People &#123; static String name = 'ducafecat'; static void printName() &#123; print(name); &#125;&#125; 调用 1People.printName(); 总结 实例化后将无法通过外部直接调用 static 成员 静态成员与实例成员是分开的, 静态成员处于类的定义体中, 实例成员处于类的实例中 代码 static.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 20 get set","date":"2018-11-17T07:30:21.000Z","path":"2018/11/17/dart/dart-20-getter-setter/","text":"本节目标 定义、使用、简化 get set 环境 Dart 2.0.0 定义、使用 get setgetter 和 setter 的好处是，你可以开始使用实例变量，后来 你可以把实例变量用函数包裹起来，而调用你代码的地方不需要修改。 定义 1234567891011class People &#123; String _name; set pName(String value) &#123; _name = value; &#125; String get pName &#123; return 'people is $&#123;_name&#125;'; &#125;&#125; 使用 123var p = new People();p.pName = 'ducafecat';print(p.pName); 简化 get set1234567class People &#123; String _name; set pName(String value) =&gt; _name = value; String get pName =&gt; 'people is $&#123;_name&#125;';&#125; 代码 getset.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 19 类","date":"2018-11-17T05:52:30.000Z","path":"2018/11/17/dart/dart-19-class/","text":"本节目标 定义、使用类 构造函数 简化构造 初始化列表 命名构造函数 重定向构造函数 环境 Dart 2.0.0 定义、使用类定义 12class Point &#123;&#125; 使用 1var p = new Point(); 构造函数定义 12345678class Point &#123; num x; num y; Point(num x, num y)&#123; this.x = x; this.y = y; &#125;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 简化构造定义 12345class Point &#123; num x; num y; Point(this.x, this.y);&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 初始化列表定义 123456class Point &#123; num x; num y; var origin; Point(this.x, this.y): origin = &#123;x:x, y:y&#125;;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y, p.origin]); 命名构造函数定义 12345678class Point &#123; num x; num y; Point.fromJson(Map json) &#123; x = json['x']; y = json['y']; &#125;&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 重定向构造函数定义 123456class Point &#123; num x; num y; Point(this.x, this.y); Point.fromJson(Map json) : this(json['x'], json['y']);&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 代码 class.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 18 异常","date":"2018-11-17T02:53:26.000Z","path":"2018/11/17/dart/dart-18-exceptions/","text":"本节目标 错误类型 抛出、捕获 环境 Dart 2.0.0 错误的两种类型Exception 类Exception class 名称 说明 DeferredLoadException 延迟加载错误 FormatException 格式错误 IntegerDivisionByZeroException 整数除零错误 IOException IO 错误 IsolateSpawnException 隔离产生错误 TimeoutException 超时错误 Error 类Error class 名称 说明 AbstractClassInstantiationError 抽象类实例化错误 ArgumentError 参数错误 AssertionError 断言错误 AsyncError 异步错误 CastError Cast 错误 ConcurrentModificationError 并发修改错误 CyclicInitializationError 周期初始错误 FallThroughError Fall Through 错误 JsonUnsupportedObjectError json 不支持错误 NoSuchMethodError 没有这个方法错误 NullThrownError Null 错误错误 OutOfMemoryError 内存溢出错误 RemoteError 远程错误 StackOverflowError 堆栈溢出错误 StateError 状态错误 UnimplementedError 未实现的错误 UnsupportedError 不支持错误 抛出错误12345678// Exception 对象// throw new FormatException('这是一个格式错误提示');// Error 对象// throw new OutOfMemoryError();// 任意对象// throw '这是一个异常'; 捕获错误12345678// try &#123;// // throw new FormatException('这是一个格式错误提示');// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// &#125; catch (e) &#123;// print(e);// &#125; 重新抛出错误12345678// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; Finally 执行12345678910// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; finally &#123;// print('end');// &#125; 代码 exception.dart 参考 language-tour Exception class Error class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 17 流程控制语句","date":"2018-11-12T07:56:51.000Z","path":"2018/11/12/dart/dart-17-controlFlow/","text":"本节目标 条件判断 循环控制 环境 Dart 2.0.0 if else1234bool isPrint = true;if (isPrint) &#123; print('hello');&#125; for123for (var i = 0; i &lt; 5; i++) &#123; print(i);&#125; while12345bool isDone = false;while(!isDone) &#123; print('is not done'); isDone = true;&#125; do while12345bool isRunning = true;do &#123; print('is running'); isRunning = false;&#125; while (isRunning); switch case12345678String name = 'cat';switch (name) &#123; case 'cat': print('cat'); break; default: print('not find');&#125; break12345678num i = 1;while(true) &#123; print('$&#123;i&#125; - run'); i++; if(i == 5) &#123; break; &#125;&#125; continue123456for (var i = 0; i &lt; 5; i++) &#123; if (i &lt; 3) &#123; continue; &#125; print(i);&#125; continue 指定位置1234567891011121314151617String command = \"close\";switch(command) &#123; case \"open\": print(\"open\"); break; case \"close\": print(\"close\"); continue doClose; doClose: case \"doClose\": print(\"DO_CLOSE\"); break; default: print(\"-----\");&#125; 代码 controlFlow.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 16 操作符","date":"2018-11-12T02:41:28.000Z","path":"2018/11/12/dart/dart-16-operators/","text":"本节目标 优先级 算术操作符 相等相关的操作符 类型判定操作符 赋值操作符 逻辑操作符 位和移位操作符 条件表达式 级联操作符 环境 Dart 2.0.0 操作符表 描述 操作符 \b 后缀操作 expr++ expr– () [] . ?. 前缀操作 -expr !expr ~expr ++expr –expr 乘除 * / % ~/ 加减 + - 位移 &lt;&lt; &gt;&gt; 按位与 &amp; 按位异或 ^ 按位或 \\ 类型操作 &gt;= &gt; &lt;= &lt; as is is! 相等 == != 逻辑与 &amp;&amp; 逻辑或 \\ \\ 是为为空 ?? 三目运算 expr1 ? expr2 : expr3 级联 .. 赋值 = *= /= ~/= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= \\ = ??= 优先级顺序 上面左边 优先级高于 右边下面 123if(x == 1 &amp;&amp; y == 2)&#123; ...&#125; 算术操作符 操作符 解释 + 加号 – 减号 -expr 负号 * 乘号 / 除号 ~/ 除号，但是返回值为整数 % 取模 123print(5/2);print(5~/2);print(5 % 2); 相等相关的操作符 操作符 解释 == 相等 != 不等 &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 类型判定操作符 操作符 解释 as 类型转换 is 如果对象是指定的类型返回 True is! 如果对象是指定的类型返回 False 123456int a = 123;String b = 'ducafecat';String c = 'abc';print(a as Object);print(b is String);print(c is! String); 条件表达式 操作符 解释 condition ? expr1 : expr2 如果 condition 是 true，执行 expr1 (并返回执行的结果)； 否则执行 expr2 并返回其结果。 expr1 ?? expr2 如果 expr1 是 non-null，返回其值； 否则执行 expr2 并返回其结果。 1234567bool isFinish = true;String txtVal = isFinish ? 'yes' : 'no';bool isFinish;isFinish = isFinish ?? false;orisFinish ??= false; 位和移位操作符 操作符 解释 &amp; 逻辑与 逻辑或 ^ 逻辑异或 ~expr 取反 &lt;&lt; 左移 &gt;&gt; 右移 级联操作符 操作符 解释 .. 可以在同一个对象上 连续调用多个函数以及访问成员变量。 123456StringBuffer sb = new StringBuffer();sb..write('hello')..write('word')..write('\\n')..writeln('doucafecat'); 其他操作符 操作符 解释 () 使用方法 代表调用一个方法 [] 访问 List 访问 list 中特定位置的元素 . 访问 Member 访问元素，例如 foo.bar 代表访问 foo 的 bar 成员 ?. 条件成员访问 和 . 类似，但是左边的操作对象不能为 null，例如 foo?.bar 如果 foo 为 null 则返回 null，否则返回 bar 成员 12String a;print(a?.length); 代码 operator.dart 参考 operators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 15 函数 Function","date":"2018-11-12T01:36:04.000Z","path":"2018/11/12/dart/dart-15-function/","text":"本节目标 函数定义 可选参数 默认值 命名参数 内部定义 环境 Dart 2.0.0 函数定义123456int add(int x) &#123; return x + 1;&#125;调用add(1); 可选参数123456789101112int add(int x, [int y, int z]) &#123; if (y == null) &#123; y = 1; &#125; if (z == null) &#123; z = 1; &#125; return x + y + z;&#125;调用int(1, 2); 可选参数 默认值123456int add(int x, [int y = 1, int z = 2]) &#123; return x + y;&#125;调用int(1, 2); 命名参数 默认值123456int add(&#123;int x = 1, int y = 1, int z = 1&#125;) &#123; return x + y + z;&#125;调用int(x: 1, y: 2); 函数内定义123456void main()&#123; int add(int x)&#123; return x + x; &#125; print(add(1));&#125; Funcation 返回函数对象1234567Function makeAdd(int x) &#123; return (int y) =&gt; x + y;&#125;调用var add = makeAdd(1);print(add(5)); 代码 function.dart 参考 Functions © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 14 symbol、enum、comments","date":"2018-10-27T03:05:15.000Z","path":"2018/10/27/dart/dart-14-symbol-enum-comments/","text":"本节目标 symbol enum comments 环境 Dart 2.0.0 符号 SymbolDart语言的标识符，在反射中用的很普及，特别是很多发布包都是混淆后的。 123456import 'dart:mirrors';Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); 枚举 Enum适合用在常量定义，类型比较很方便。 123enum Status &#123; none, running, stopped, paused &#125;Status.values.forEach((it) =&gt; print('$it - index: $&#123;it.index&#125;')); 注释 Comments单行注释1// Symbol libraryName = new Symbol('dart.core'); 多行注释12345678/* * Symbol * Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); */ 文档注释12345678/// `main` 函数////// 符号/// 枚举///void main() &#123; ...&#125; 可参考 String 类中的注释使用 代码 symbol-enum-comments.dart 参考 language-tour Symbol © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 13 Runes","date":"2018-10-27T00:51:21.000Z","path":"2018/10/27/dart/dart-13-runes/","text":"本节目标 Runes 基础知识 字符编码 ASCII、Unicode、UTF-8、UTF-16、UTF-32 环境 Dart 2.0.0 RunesRunes 对象是一个 32位 字符对象，用来表示一个字。这样设计也是考虑兼容 UTF-16 四个字节的情况。 length 和 runes.length 比较1234567String a = '👺';print(a.length);print(a.runes.length);&gt;&gt; 输出2 // 标识占 2 个 16 位字符1 // 表示占 1 个 32 位字符 runes 是一个 32 位字符对象 操作 32-bit Unicode 字符123456Runes b = new Runes('\\u&#123;1f596&#125; \\u6211');var c = String.fromCharCodes(b);或者String c = '\\u&#123;1f596&#125; \\u6211' 如果非4个数值，需要用 {…} 返回 16-bit code units 的 codeUnitAt codeUnits1234567var a = '👺';print(a.codeUnitAt(0));print(a.codeUnits);&gt;&gt; 输出55357 // 第 1 位的 10 进制数值[55357, 56442] // 显示 2 位的 10 进制数值 返回 32-bit Unicode 的 runes123456var a = '👺';print(a.runes);&gt;&gt; 输出(128122) // 显示 32 位的 10 进制数值 String 操作整理 名称 说明 codeUnitAt 某个字符的码 10进制 fromCharCodes Runes 转 String 工厂函数 runes 返回字对象 基础知识字符集ASCII ASCII 非 ASCII 中的 GB2312、GBK 汉字内码扩展规范 Unicode、UTF-8、UTF-16、UTF-32 UTF-8 UTF-16 UTF-32 代码 runes.dart 参考 language-tour Runes ASCII Unicode UTF-8 UTF-16 UTF-32 在线字符 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 12 Set","date":"2018-10-25T06:47:10.000Z","path":"2018/10/25/dart/dart-12-set/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 声明Set 是一个元素唯一的有序队列 松散12345678// var a = new Set();// a.add('java');// a.add('php');// a.add('python');// a.add('java');// a.add('sql');// a.add('swift');// a.add('dart'); 强类型12// var b = new Set&lt;String&gt;();// b.addAll(['dart', 'c#', 'j#', 'e#']); 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个 last 最后一个 length 个数 常用方法 名称 说明 addAll 添加 contains 查询单个 containsAll 查询多个 difference 集合不同 intersection 交集 union 联合 lookup 按对象查询到返回对象 remove 删除单个 removeAll 删除多个 clear 清空 firstWhere 按条件正向查询 lastWhere 按条件反向查询 removeWhere 按条件删除 retainAll 只保留几个 retainWhere 按条件只保留几个 1234567891011121314151617181920// b.addAll(['dart', 'c#', 'j#', 'e#']);// print(b.contains('dart'));// print(b.containsAll(['dart', 'swift']));// print('b =&gt; $b');// print(a.difference(b));// print(a.intersection(b));// print(b.lookup('dart'));// print(b.union(a));// b.remove('dart');// b.removeAll(['dart','c#']);// b.clear();// print(b.firstWhere((it) =&gt; it == 'c#'));// print(b.lastWhere((it) =&gt; it == 'c#'));// b.removeWhere((it) =&gt; it == 'c#');// b.retainAll(['e#']);// b.retainWhere((it) =&gt; it == 'e#');// b.retainWhere((it) &#123;// bool ret = it == 'e#';// return ret;// &#125;); 代码 set.dart 参考 language-tour Set © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 11 Map","date":"2018-10-23T07:36:12.000Z","path":"2018/10/23/dart/dart-11-map/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始key value 形式的集合 1var a = &#123;'name': 'ducafecat', 'web': 'www.ducafecat.tech'&#125;; 声明松散1234var a = new Map();a['name'] = 'ducafecat';a['web'] = 'www.ducafecat.tech';a[0] = 'abc'; 强类型123var b = new Map&lt;int, String&gt;();b[0] = 'java';b[1] = 'python'; 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 keys key 集合 values values 集合 length 个数 entries 加工数据入口 123456print(a.isEmpty);print(a.isNotEmpty);print(a.keys);print(a.values);print(a.length);print(a.entries); 常用方法 名称 说明 addAll 添加 addEntries 从入口添加 containsKey 按 key 查询 containsValue 按 value 查询 clear 清空 remove 删除某个 removeWhere 按条件删除 update 更新某个 updateAll 按条件更新 addAll1b.addAll(&#123;'first': 'java', 'second': 'python'&#125;); addEntries1b.addEntries(a.entries); containsKey1print(a.containsKey('name')); containsValue1print(a.containsValue('www.ducafecat.tech')); clear1b.clear(); remove1a.remove('name'); removeWhere1a.removeWhere((key,val) =&gt; key == 'name'); update1a.update('name', (val) =&gt; 'abc'); updateAll1a.updateAll((key, val) =&gt; \"---$val---\"); 操作符 名称 说明 [] 取值 []= 赋值 12print(a['name']);a['name'] = 'abc'; 代码 map.dart 参考 language-tour Map © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 10 列表","date":"2018-10-19T02:49:35.000Z","path":"2018/10/19/dart/dart-10-list/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始List 是一个有序列表 12var l = [1, 2, 3];print(l); 声明自动123456List&lt;int&gt; l = new List();l..add(1)..add(2)..add(3);print(l); 定长123456List&lt;int&gt; l = new List(3);// print(l[0]);l[0] = 1;l[1] = 2;l[2] = 3;print(l); 属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个对象 last 最后一个对象 length 个数 reversed 反转 1234567var l = [1, 2, 3];print(l.first);print(l.last);print(l.length);print(l.isEmpty);print(l.isNotEmpty);print(l.reversed); 方法 名称 说明 add 添加 addAll 添加多个 insert 插入 insertAll 插入多个 indexOf 查询 indexWhere 按条件查询 remove 删除 removeAt 按位置删除 fillRange 按区间填充 getRange 按区间获取 shuffle 随机变换顺序 sort 排序 sublist 创建子 添加12345678List&lt;int&gt; l = new List();l ..add(1) ..addAll([2, 3, 4, 5]) ..insert(0, 6) ..insertAll(6, [6, 6]) ; 查询12print(l.indexOf(5));print(l.indexWhere((it) =&gt; it == 4)); 删除1234l.remove(6);print(l);l.removeAt(5);print(l); Range12l.fillRange(0, 3, 9);print(l.getRange(0, 5)); 洗牌1234l.shuffle();print(l);l.shuffle();print(l); 排序12345678910111213数字l.sort();print(l);日期List&lt;DateTime&gt; dtList = new List();dtList.addAll([ DateTime.now(), DateTime.now().add(new Duration(days: -12)), DateTime.now().add(new Duration(days: -2)) ]);print(dtList);dtList.sort((a, b) =&gt; a.compareTo(b));print(dtList); 复制子列表123print(l);var l2 = l.sublist(1,4);print(l2); 操作符 名称 说明 + 连接 [] 取值 []= 赋值 12345var l1 = [1, 2, 3];var l2 = [4, 5, 6];print(l1 + l2);l1[2] = 9;print(l1[2]); 代码 list.dart 参考 language-tour List © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 09 日期时间","date":"2018-10-18T07:02:05.000Z","path":"2018/10/18/dart/dart-09-datetime/","text":"本节目标 声明 UTC 时间 公元时间 时间戳 解析标准时间 时间运算 环境 Dart 2.0.0 声明1234var now = new DateTime.now();print(now);var d = new DateTime(2018, 10, 10, 9, 30);print(d); 创建时间 UTC UTC 协调世界时 原子时 原子钟 12var d = new DateTime.utc(2018, 10, 10, 9, 30);print(d); 解析时间 IOS 8601 ISO 8601 时区 时区列表 1234var d1 = DateTime.parse('2018-10-10 09:30:30Z');print(d1);var d2 = DateTime.parse('2018-10-10 09:30:30+0800');print(d2); 时间增减量1234var d1 = DateTime.now();print(d1);print(d1.add(new Duration(minutes: 5)));print(d1.add(new Duration(minutes: -5))); 比较时间1234567var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);print(d1.isAfter(d2));print(d1.isBefore(d2));var d1 = DateTime.now();var d2 = d1.add(new Duration(milliseconds: 30));print(d1.isAtSameMomentAs(d2)); 时间差1234var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);var difference = d1.difference(d2);print([difference.inDays, difference.inHours]); 时间戳 公元 123var now = new DateTime.now();print(now.millisecondsSinceEpoch);print(now.microsecondsSinceEpoch); 代码 datetime.dart 参考 language-tour DateTime UTC 协调世界时 原子时 原子钟 ISO 8601 时区 时区列表 公元 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 08 字符串","date":"2018-10-18T05:48:22.000Z","path":"2018/10/18/dart/dart-08-string/","text":"本节目标 声明方式 字符串模板 字符串连接 转义操作 其它常用运算 环境 Dart 2.0.0 单引号或者双引号12String a = 'ducafecat';String b = \"ducafecat\"; 字符串模板123var a = 123;String b = 'ducafecat : $&#123;a&#125;';print(b); 字符串连接123456789101112131415var a = 'hello' + ' ' + 'ducafecat';var a = 'hello'' ''ducafecat';var a = 'hello' ' ' 'ducafecat';var a = 'hello'' ''ducafecat';var a = '''hello wordthis is multi line''';var a = \"\"\"hello wordthis is multi line\"\"\";print(a); 转义符号12var a = 'hello word \\n this is multi line';print(a); 取消转义12var a = r'hello word \\n this is multi line';print(a); 搜索12345var a = 'web site ducafecat.tech';print(a.contains('ducafecat'));print(a.startsWith('web'));print(a.endsWith('tech'));print(a.indexOf('site')); 提取数据1234print(a.substring(0,5));var b = a.split(' ');print(b.length);print(b[0]); 大小写转换12print(a.toLowerCase());print(a.toUpperCase()); 裁剪 判断空字符串12print(' hello word '.trim());print(''.isEmpty); 替换部分字符1print('hello word word!'.replaceAll('word', 'ducafecat')); 字符串创建123456var sb = StringBuffer();sb..write('hello word!')..write('my')..write(' ')..writeAll(['web', 'site', 'https://ducafecat.tech']);print(sb.toString()); 代码 string.dart 参考 language-tour String © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 07 布尔","date":"2018-10-17T09:37:31.000Z","path":"2018/10/17/dart/dart-07-bool/","text":"本节目标 布尔 声明、比较、默认值 断言、asset、isEmpty、isNaN 逻辑操作符 &amp;&amp;、||、! 关系运算符 == != &gt; &gt;= &lt; &lt;= 环境 Dart 2.0.0 声明为了代表布尔值，Dart 有一个名字为 bool 的类型。 只有两个对象是布尔类型的：true 和 false 所创建的对象， 这两个对象也都是编译时常量。 bool 12bool a;print(a); 只有 true 对象才被认为是 true。 所有其他的值都是 flase。 1234String name = 'ducafecat';if(name) &#123; print('this is name');&#125; assert 断言123456789var a = true;assert(a);var name = '';assert(name.isEmpty);assert(name.isNotEmpty);var num = 0 / 0;assert(num.isNaN); 注意： 断言只在检查模式下运行有效，如果在生产模式 运行，则断言不会执行。 逻辑运算符&amp;&amp; 逻辑与123bool a = true;bool b = true;assert(a &amp;&amp; b); || 逻辑或123bool a = true;bool b = false;assert(a || b); ! 逻辑非123bool a = true;bool b = !a;print(b); 关系运算符== 等于1if(a == b) &#123;&#125; != 不等于1if(a != b) &#123;&#125; &gt; 大于1if(a &gt; b) &#123;&#125; &gt;= 大于或等于1if(a &gt;= b) &#123;&#125; &lt; 小于1if(a &lt; b) &#123;&#125; &lt;= 小于或等于1if(a &lt;= b) &#123;&#125; 代码 bool.dart 参考 language-tour bool © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 06 数值","date":"2018-10-16T09:08:33.000Z","path":"2018/10/16/dart/dart-06-number/","text":"本节目标 数值类型 int、double、num 数值表示法 十进制、十六进制 科学计数法 数值转换 位运算 环境 Dart 2.0.0 数值数值类型int整数值，其取值通常位于 -253 和 253 之间。 int class double64-bit (双精度) 浮点数，符合 IEEE 754 标准。 double class numint 和 double 都是 num 的子类。 num class 数值表示法 十进制、十六进制123int a = 1001;int b = 0xABC;print([a, b]); 科学计数法12num a = 21.2e3;print([a]); 数值转换123456789101112131415// string -&gt; int// string -&gt; doubleint a = int.parse('123');double b = double.parse('1.223');// int -&gt; string// double -&gt; stringString a = 123.toString();String b = 1.223.toString();print([a, b]);// double -&gt; intdouble a = 1.8;int b = a.toInt();print(b); 位运算&amp; 与运算同时 1 才行 12341 0 1 0 100 0 1 0 2--------0 0 1 0 2 123var a = 10;var b = 2;print(a &amp; b); | 或运算有一个 1 就行 12341 0 1 0 100 0 1 0 2--------1 0 1 0 10 123var a = 10;var b = 2;print(a | b); 可以用在常量组合 123456const USE_LEFT = 0x1;const USE_TOP = 0x2;const USE_LEFT_TOP = USE_LEFT | USE_TOP;var result = USE_LEFT | USE_TOP;print(result);assert(USE_LEFT_TOP == result); ~ 非运算二进制数逐位进行逻辑非运算 1234560 1 0 0 1 +9 二进制 最高位 0 整数 1 负数0 0 1 1 0 补码1 1 0 0 1 取反1 1 0 1 0 加1--------1 1 0 1 0 -10 12var a = 9;print(~a); ^ 异或不相同的才出 1 12341 0 1 0 100 0 1 0 2--------1 0 0 0 8 123var a = 10;var b = 2;print(a ^ b); 计算机中可以用来取反色 移位运算符&lt;&lt; 左移12340 0 0 1 1 二进制0 0 1 0 左移一位 20 1 0 0 左移一位 41 0 0 0 左移一位 8 向左移动一位 12var a = 1 &lt;&lt; 1;print(a); &gt;&gt; 右移12341 0 0 0 8 二进制0 1 0 0 右移一位 40 0 1 0 右移一位 20 0 0 1 右移一位 1 向右移动一位 12var a = 8 &gt;&gt; 1;print(a); 代码 number.dart 参考 language-tour int class double class num class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 05 常量","date":"2018-10-10T06:49:26.000Z","path":"2018/10/10/dart/dart-05-constant/","text":"本节目标 常量的定义方式 final const 的区别 环境 Dart 2.0.0 定义类型声明可以省略12345final String a = 'ducafecat';final a = 'ducafecat';const String a = 'ducafecat';const a = 'ducafecat'; 初始后不能再赋值12345final a = 'ducafecat';a = 'abc';const a = 'ducafecat';a = 'abc'; 不能和 var 同时使用12final var a = 'ducafecat';const var a = 'ducafecat'; const 赋值 申明可省略12const List ls = const [11, 22, 33];const List ls = [11, 22, 33]; 区别需要确定的值123final dt = DateTime.now();const dt = const DateTime.now(); 不可变性可传递12345final List ls = [11, 22, 33];ls[1] = 44;const List ls = [11, 22, 33];ls[1] = 44; 内存中重复创建1234567final a1 = [11 , 22];final a2 = [11 , 22];print(identical(a1, a2));const a1 = [11 , 22];const a2 = [11 , 22];print(identical(a1, a2)); 代码 constant.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 04 变量的两种类型","date":"2018-10-10T02:18:25.000Z","path":"2018/10/10/dart/dart-04-variables/","text":"本节目标 了解 弱类型 强类型 常见 强类型 有哪些 如何选着何时用那种类型 环境 Dart 2.0.0 弱类型var如果没有初始值，可以变成任何类型 123456var a;a = 'ducafecat';a = 123;a = true;a = &#123;'key': 'val123'&#125;;a = ['abc']; Object动态任意类型，编译阶段检查类型 1234Object a = 'doucafecat';a = 123;a = [2222];a.p(); dynamic动态任意类型，编译阶段不检查检查类型 1234dynamic a = 'doucafecat';a = 123;a = [1111];a.p(); 比较 var 与 dynamic、Object唯一区别 var 如果有初始值，类型被锁定 1234var a = 'ducafecat';dynamic a = 'doucafecat';Object a = 'doucafecat';a = 123; 强类型申明类型声明后，类型被锁定 123String a;a = 'ducafecat';a = 123; 常见类型 名称 说明 num 数字 int 整型 double 浮点 bool 布尔 String 字符串 StringBuffer 字符串 buffer DateTime 时间日期 Duration 时间区间 List 列表 Sets 无重复队列 Maps kv 容器 enum 枚举 123456String a = 'doucafecat';int i = 123;double d = 0.12;bool b = true;DateTime dt = new DateTime.now();List l = [ a, i, d, b, dt]; 默认值一切都是 Object , 变量声明后默认都是 null 1234var a;String a;print(a);assert(a == null); assert 检查点函数，如果不符合条件直接抛出错误并终止程序进程 如何使用 在写 API 接口的时候，请用 强类型，一旦不符合约定，接收数据时能方便排查故障 你在写个小工具时，可以用 弱类型，这样代码写起来很快，类型自动适应 代码 variables.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 03 MacOS 下安装 SDK","date":"2018-09-30T07:41:49.000Z","path":"2018/09/30/dart/dart-03-install-macos/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 MacOS Dart SDK 2.0.0 下载 SDKSDK 列表 archive 下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 解压到磁盘 磁盘位置 ~/Documents/sdk/dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量12345678# 打开配置文件vim ~/.bash_profile# 尾部加入配置export PATH=~/Documents/sdk/dart-sdk/bin:$PATH# 重载配置文件source ~/.bash_profile 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"macos_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 02 Windows 下安装 SDK","date":"2018-09-30T06:41:49.000Z","path":"2018/09/30/dart/dart-02-install-windows/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 Windows 10 Dart SDK 2.0.0 下载 SDKSDK 列表 archive 源下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 解压到磁盘 磁盘位置 C:\\sdk\\dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量 环境变量 PATH 新增 C:\\sdk\\dart-sdk\\bin 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"windows_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 01 前言","date":"2018-09-30T02:00:48.000Z","path":"2018/09/30/dart/dart-01-introduce/","text":"本节目标 为什么学习 Dart 课程计划 如果获取课程资料、代码、视频 2018 Google 开发者大会大会官网 首页简介 bilibili 视频 介绍视频 Flutter官网 Flutter Dart官网 homepage 多平台开发 Platforms 课程计划12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879## 前言## 安装&amp;配置 - Windows## 安装&amp;配置 - MacOS## 变量 - 两种方式## 变量 - 常量## 类型 - 数字## 类型 - Bool## 类型 - 字符串## 类型 - 日期## 类型 - List## 类型 - Map## 类型 - Set## 类型 - Runes## 类型 - Symbol## 类型 - Enum## 注释 - Comments## 函数## 操作符## 流程控制## 异常## 类 - Class## 类 - getter、setter## 类 - 静态变量、方法## 类 - Abstract 抽象类、方法## 类 - Interface 接口## 类 - extends 继承## 类 - mixin 混合## 类 - 工厂构造函数## 类库 - Libraries## 泛型 - Generics## 异步 - Asynchrony## 生成器 - Generators## 可调用 - Callable## 隔离 - Isolate## 类型定义 - Typedef## 注解 - Metadata## 代码规范 - 代码风格## 代码规范 - 文档注释## 代码规范 - 最佳实践## 代码规范 - 设计指南 课程资料主站 https://ducafecat.tech资料 视频 youtube 优酷 文档 \b代码 参考 Dart 官网 Flutter 官网 2018 Google 开发者大会 bilibili © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]}]