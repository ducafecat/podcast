[{"title":"Dart语言学习 14 symbol、enum、comments","date":"2018-10-27T03:05:15.000Z","path":"2018/10/27/dart/dart-14-symbol-enum-comments/","text":"本节目标 symbol enum comments 环境 Dart 2.0.0 符号 SymbolDart语言的标识符，在反射中用的很普及，特别是很多发布包都是混淆后的。 123456import 'dart:mirrors';Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); 枚举 Enum适合用在常量定义，类型比较很方便。 123enum Status &#123; none, running, stopped, paused &#125;Status.values.forEach((it) =&gt; print('$it - index: $&#123;it.index&#125;')); 注释 Comments单行注释1// Symbol libraryName = new Symbol('dart.core'); 多行注释12345678/* * Symbol * Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); */ 文档注释12345678/// `main` 函数////// 符号/// 枚举///void main() &#123; ...&#125; 可参考 String 类中的注释使用 代码 symbol-enum-comments.dart 参考 language-tour Symbol © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 13 Runes","date":"2018-10-27T00:51:21.000Z","path":"2018/10/27/dart/dart-13-runes/","text":"本节目标 字符编码 ASCII、Unicode、UTF-8、UTF-16、UTF-32 字与字符 如何操作 环境 Dart 2.0.0 字符集ASCII ASCII 非 ASCII 中的 GB2312、GBK 汉字内码扩展规范 Unicode、UTF-8、UTF-16、UTF-32 UTF-8 UTF-16 UTF-32 Runes 对象Runes 对象是一个 32位 字符对象，用来表示一个字。这样设计也是考虑兼容 UTF-16 四个字节的情况。 Runes 转 String12Runes b = new Runes('\\u&#123;1f596&#125; \\u6211');var c = String.fromCharCodes(b); String 转 Runes123456var a = '👺';print(a.codeUnitAt(0));// 显示某个字符的 10进制print(a.length); // 表示这个字符 占2位print(a.runes.length); // 表示有几个字符print(a.codeUnits);// 打印 占2位 字符码print(a.runes);// 打印 字符码 10进制 String 操作整理 名称 说明 codeUnitAt 某个字符的码 10进制 fromCharCodes Runes 转 String 工厂函数 runes 返回字对象 代码 runes.dart 参考 language-tour Runes ASCII Unicode UTF-8 UTF-16 UTF-32 在线字符 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 12 Set","date":"2018-10-25T06:47:10.000Z","path":"2018/10/25/dart/dart-12-set/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 声明Set 是一个元素唯一的有序队列 松散12345678// var a = new Set();// a.add('java');// a.add('php');// a.add('python');// a.add('java');// a.add('sql');// a.add('swift');// a.add('dart'); 强类型12// var b = new Set&lt;String&gt;();// b.addAll(['dart', 'c#', 'j#', 'e#']); 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个 last 最后一个 length 个数 常用方法 名称 说明 addAll 添加 contains 查询单个 containsAll 查询多个 difference 集合不同 intersection 交集 union 联合 lookup 按对象查询到返回对象 remove 删除单个 removeAll 删除多个 clear 清空 firstWhere 按条件正向查询 lastWhere 按条件反向查询 removeWhere 按条件删除 retainAll 只保留几个 retainWhere 按条件只保留几个 1234567891011121314151617181920// b.addAll(['dart', 'c#', 'j#', 'e#']);// print(b.contains('dart'));// print(b.containsAll(['dart', 'swift']));// print('b =&gt; $b');// print(a.difference(b));// print(a.intersection(b));// print(b.lookup('dart'));// print(b.union(a));// b.remove('dart');// b.removeAll(['dart','c#']);// b.clear();// print(b.firstWhere((it) =&gt; it == 'c#'));// print(b.lastWhere((it) =&gt; it == 'c#'));// b.removeWhere((it) =&gt; it == 'c#');// b.retainAll(['e#']);// b.retainWhere((it) =&gt; it == 'e#');// b.retainWhere((it) &#123;// bool ret = it == 'e#';// return ret;// &#125;); 代码 set.dart 参考 language-tour Set © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 11 Map","date":"2018-10-23T07:36:12.000Z","path":"2018/10/23/dart/dart-11-map/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始key value 形式的集合 1var a = &#123;'name': 'ducafecat', 'web': 'www.ducafecat.tech'&#125;; 声明松散1234var a = new Map();a['name'] = 'ducafecat';a['web'] = 'www.ducafecat.tech';a[0] = 'abc'; 强类型123var b = new Map&lt;int, String&gt;();b[0] = 'java';b[1] = 'python'; 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 keys key 集合 values values 集合 length 个数 entries 加工数据入口 123456print(a.isEmpty);print(a.isNotEmpty);print(a.keys);print(a.values);print(a.length);print(a.entries); 常用方法 名称 说明 addAll 添加 addEntries 从入口添加 containsKey 按 key 查询 containsValue 按 value 查询 clear 清空 remove 删除某个 removeWhere 按条件删除 update 更新某个 updateAll 按条件更新 addAll1b.addAll(&#123;'first': 'java', 'second': 'python'&#125;); addEntries1b.addEntries(a.entries); containsKey1print(a.containsKey('name')); containsValue1print(a.containsValue('www.ducafecat.tech')); clear1b.clear(); remove1a.remove('name'); removeWhere1a.removeWhere((key,val) =&gt; key == 'name'); update1a.update('name', (val) =&gt; 'abc'); updateAll1a.updateAll((key, val) =&gt; \"---$val---\"); 操作符 名称 说明 [] 取值 []= 赋值 12print(a['name']);a['name'] = 'abc'; 代码 map.dart 参考 language-tour Map © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 10 列表","date":"2018-10-19T02:49:35.000Z","path":"2018/10/19/dart/dart-10-list/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始List 是一个有序列表 12var l = [1, 2, 3];print(l); 声明定长123456List&lt;int&gt; l = new List();l..add(1)..add(2)..add(3);print(l); 自动123456List&lt;int&gt; l = new List(3);// print(l[0]);l[0] = 1;l[1] = 2;l[2] = 3;print(l); 属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个对象 last 最后一个对象 length 个数 reversed 反转 1234567var l = [1, 2, 3];print(l.first);print(l.last);print(l.length);print(l.isEmpty);print(l.isNotEmpty);print(l.reversed); 方法 名称 说明 add 添加 addAll 添加多个 insert 插入 insertAll 插入多个 indexOf 查询 indexWhere 按条件查询 remove 删除 removeAt 按位置删除 fillRange 按区间填充 getRange 按区间获取 shuffle 随机变换顺序 sort 排序 sublist 创建子 添加12345678List&lt;int&gt; l = new List();l ..add(1) ..addAll([2, 3, 4, 5]) ..insert(0, 6) ..insertAll(6, [6, 6]) ; 查询12print(l.indexOf(5));print(l.indexWhere((it) =&gt; it == 4)); 删除1234l.remove(6);print(l);l.removeAt(5);print(l); Range12l.fillRange(0, 3, 9);print(l.getRange(0, 5)); 洗牌1234l.shuffle();print(l);l.shuffle();print(l); 排序12345678910111213数字l.sort();print(l);日期List&lt;DateTime&gt; dtList = new List();dtList.addAll([ DateTime.now(), DateTime.now().add(new Duration(days: -12)), DateTime.now().add(new Duration(days: -2)) ]);print(dtList);dtList.sort((a, b) =&gt; a.compareTo(b));print(dtList); 复制子列表123print(l);var l2 = l.sublist(1,4);print(l2); 操作符 名称 说明 + 连接 [] 取值 []= 赋值 12345var l1 = [1, 2, 3];var l2 = [4, 5, 6];print(l1 + l2);l1[2] = 9;print(l1[2]); 代码 list.dart 参考 language-tour List © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 09 日期时间","date":"2018-10-18T07:02:05.000Z","path":"2018/10/18/dart/dart-09-datetime/","text":"本节目标 声明 UTC 时间 公元时间 时间戳 解析标准时间 时间运算 环境 Dart 2.0.0 声明1234var now = new DateTime.now();print(now);var d = new DateTime(2018, 10, 10, 9, 30);print(d); 创建时间 UTC UTC 协调世界时 原子时 原子钟 12var d = new DateTime.utc(2018, 10, 10, 9, 30);print(d); 解析时间 IOS 8601 ISO 8601 时区 时区列表 1234var d1 = DateTime.parse('2018-10-10 09:30:30Z');print(d1);var d2 = DateTime.parse('2018-10-10 09:30:30+0800');print(d2); 时间增减量1234var d1 = DateTime.now();print(d1);print(d1.add(new Duration(minutes: 5)));print(d1.add(new Duration(minutes: -5))); 比较时间1234567var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);print(d1.isAfter(d2));print(d1.isBefore(d2));var d1 = DateTime.now();var d2 = d1.add(new Duration(milliseconds: 30));print(d1.isAtSameMomentAs(d2)); 时间差1234var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);var difference = d1.difference(d2);print([difference.inDays, difference.inHours]); 时间戳 公元 123var now = new DateTime.now();print(now.millisecondsSinceEpoch);print(now.microsecondsSinceEpoch); 代码 datetime.dart 参考 language-tour DateTime UTC 协调世界时 原子时 原子钟 ISO 8601 时区 时区列表 公元 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 08 字符串","date":"2018-10-18T05:48:22.000Z","path":"2018/10/18/dart/dart-08-string/","text":"本节目标 声明方式 字符串模板 字符串连接 转义操作 其它常用运算 环境 Dart 2.0.0 单引号或者双引号12String a = 'ducafecat';String b = \"ducafecat\"; 字符串模板123var a = 123;String b = 'ducafecat : $&#123;a&#125;';print(b); 字符串连接123456789101112131415var a = 'hello' + ' ' + 'ducafecat';var a = 'hello'' ''ducafecat';var a = 'hello' ' ' 'ducafecat';var a = 'hello'' ''ducafecat';var a = '''hello wordthis is multi line''';var a = \"\"\"hello wordthis is multi line\"\"\";print(a); 转义符号12var a = 'hello word \\n this is multi line';print(a); 取消转义12var a = r'hello word \\n this is multi line';print(a); 搜索12345var a = 'web site ducafecat.tech';print(a.contains('ducafecat'));print(a.startsWith('web'));print(a.endsWith('tech'));print(a.indexOf('site')); 提取数据1234print(a.substring(0,5));var b = a.split(' ');print(b.length);print(b[0]); 大小写转换12print(a.toLowerCase());print(a.toUpperCase()); 裁剪 判断空字符串12print(' hello word '.trim());print(''.isEmpty); 替换部分字符1print('hello word word!'.replaceAll('word', 'ducafecat')); 字符串创建123456var sb = StringBuffer();sb..write('hello word!')..write('my')..write(' ')..writeAll(['web', 'site', 'https://ducafecat.tech']);print(sb.toString()); 代码 string.dart 参考 language-tour String © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 07 布尔","date":"2018-10-17T09:37:31.000Z","path":"2018/10/17/dart/dart-07-bool/","text":"本节目标 布尔 声明、比较、默认值 断言、asset、isEmpty、isNaN 逻辑操作符 &amp;&amp;、||、! 关系运算符 == != &gt; &gt;= &lt; &lt;= 环境 Dart 2.0.0 声明为了代表布尔值，Dart 有一个名字为 bool 的类型。 只有两个对象是布尔类型的：true 和 false 所创建的对象， 这两个对象也都是编译时常量。 bool 12bool a;print(a); 只有 true 对象才被认为是 true。 所有其他的值都是 flase。 1234String name = 'ducafecat';if(name) &#123; print('this is name');&#125; assert 断言123456789var a = true;assert(a);var name = '';assert(name.isEmpty);assert(name.isNotEmpty);var num = 0 / 0;assert(num.isNaN); 逻辑运算符&amp;&amp; 逻辑与123bool a = true;bool b = true;assert(a &amp;&amp; b); || 逻辑或123bool a = true;bool b = false;assert(a || b); ! 逻辑非123bool a = true;bool b = !a;print(b); 关系运算符== 等于1if(a == b) &#123;&#125; != 不等于1if(a != b) &#123;&#125; &gt; 大于1if(a &gt; b) &#123;&#125; &gt;= 大于或等于1if(a &gt;= b) &#123;&#125; &lt; 小于1if(a &lt; b) &#123;&#125; &lt;= 小于或等于1if(a &lt;= b) &#123;&#125; 代码 bool.dart 参考 language-tour bool © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 06 数值","date":"2018-10-16T09:08:33.000Z","path":"2018/10/16/dart/dart-06-number/","text":"本节目标 数值类型 int、double、num 数值表示法 十进制、十六进制 科学计数法 数值转换 位运算 环境 Dart 2.0.0 数值数值类型int整数值，其取值通常位于 -253 和 253 之间。 int class double64-bit (双精度) 浮点数，符合 IEEE 754 标准。 double class numint 和 double 都是 num 的子类。 num class 数值表示法 十进制、十六进制123int a = 1001;int b = 0xABC;print([a, b]); 科学计数法12num a = 21.2e3;print([a]); 数值转换123456789101112131415// string -&gt; int// string -&gt; doubleint a = int.parse('123');double b = double.parse('1.223');// int -&gt; string// double -&gt; stringString a = 123.toString();String b = 1.223.toString();print([a, b]);// double -&gt; intdouble a = 1.8;int b = a.toInt();print(b); 位运算&amp; 与运算当 a b c 都为 z 的时候通过 123456var a = 123;var b = 123;var c = 123;var z = 123;var result = a &amp; b &amp; c;print(result); | 或运算可以用在常量组合 123456const USE_LEFT = 0x1;const USE_TOP = 0x2;const USE_LEFT_TOP = USE_LEFT | USE_TOP;var result = USE_LEFT | USE_TOP;print(result);assert(USE_LEFT_TOP == result); ~ 非运算二进制数逐位进行逻辑非运算 12var a = -1;print(~a); ^ 异或可以用来取反色 123var a = 123;var b = 100;print(a ^ b); 移位运算符&lt;&lt; 左移向左移动一位 乘2 12var a = 123 &lt;&lt; 1;print(a); &gt;&gt; 右移向右移动一位 除2 12var a = 123 &gt;&gt; 1;print(a); 代码 number.dart 参考 language-tour int class double class num class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 05 常量","date":"2018-10-10T06:49:26.000Z","path":"2018/10/10/dart/dart-05-constant/","text":"本节目标 常量的定义方式 final const 的区别 环境 Dart 2.0.0 定义类型声明可以省略12345final String a = 'ducafecat';final a = 'ducafecat';const String a = 'ducafecat';const a = 'ducafecat'; 初始后不能再赋值12345final a = 'ducafecat';a = 'abc';const a = 'ducafecat';a = 'abc'; 不能和 var 同时使用12final var a = 'ducafecat';const var a = 'ducafecat'; const 赋值 申明可省略12const List ls = const [11, 22, 33];const List ls = [11, 22, 33]; 区别需要确定的值123final dt = DateTime.now();const dt = const DateTime.now(); 不可变性可传递12345final List ls = [11, 22, 33];ls[1] = 44;const List ls = [11, 22, 33];ls[1] = 44; 内存中重复创建1234567final a1 = [11 , 22];final a2 = [11 , 22];print(identical(a1, a2));const a1 = [11 , 22];const a2 = [11 , 22];print(identical(a1, a2)); 代码 constant.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 04 变量的两种类型","date":"2018-10-10T02:18:25.000Z","path":"2018/10/10/dart/dart-04-variables/","text":"本节目标 了解 弱类型 强类型 常见 强类型 有哪些 如何选着何时用那种类型 环境 Dart 2.0.0 弱类型var如果没有初始值，可以变成任何类型 123456var a;a = 'ducafecat';a = 123;a = true;a = &#123;'key': 'val123'&#125;;a = ['abc']; dynamic、Object功能相同，可以变成任何类型 1234dynamic a = 'doucafecat';Object a = 'doucafecat';a = 123;a = [1111]; 比较 var、dynamic、Object唯一区别 var 如果有初始值，类型被锁定 1234var a = 'ducafecat';dynamic a = 'doucafecat';Object a = 'doucafecat';a = 123; 强类型申明类型声明后，类型被锁定 123String a;a = 'ducafecat';a = 123; 常见类型 名称 说明 num 数字 int 整型 double 浮点 bool 布尔 String 字符串 StringBuffer 字符串 buffer DateTime 时间日期 Duration 时间区间 List 列表 Sets 无重复队列 Maps kv 容器 enum 枚举 123456String a = 'doucafecat';int i = 123;double d = 0.12;bool b = true;DateTime dt = new DateTime.now();List l = [ a, i, d, b, dt]; 默认值一切都是 Object , 变量声明后默认都是 null 1234var a;String a;print(a);assert(a == null); assert 检查点函数，如果不符合条件直接抛出错误并终止程序进程 如何使用 在写 API 接口的时候，请用 强类型，一旦不符合约定，接收数据时能方便排查故障 你在写个小工具时，可以用 弱类型，这样代码写起来很快，类型自动适应 代码 variables.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 03 MacOS 下安装 SDK","date":"2018-09-30T07:41:49.000Z","path":"2018/09/30/dart/dart-03-install-macos/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 MacOS Dart SDK 2.0.0 下载 SDKSDK 列表 archive 下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 解压到磁盘 磁盘位置 ~/Documents/sdk/dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量12345678# 打开配置文件vim ~/.bash_profile# 尾部加入配置export PATH=~/Documents/sdk/dart-sdk/bin:$PATH# 重载配置文件source ~/.bash_profile 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"macos_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 02 Windows 下安装 SDK","date":"2018-09-30T06:41:49.000Z","path":"2018/09/30/dart/dart-02-install-windows/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 Windows 10 Dart SDK 2.0.0 下载 SDKSDK 列表 archive 源下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 解压到磁盘 磁盘位置 C:\\sdk\\dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量 环境变量 PATH 新增 C:\\sdk\\dart-sdk\\bin 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"windows_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 01 前言","date":"2018-09-30T02:00:48.000Z","path":"2018/09/30/dart/dart-01-introduce/","text":"本节目标 为什么学习 Dart 课程计划 如果获取课程资料、代码、视频 2018 Google 开发者大会大会官网 首页简介 bilibili 视频 介绍视频 Flutter官网 Flutter Dart官网 homepage 多平台开发 Platforms 课程计划1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677## 前言## 安装&amp;配置 - Windows## 安装&amp;配置 - MacOS## 变量 - 两种方式## 变量 - 常量## 类型 - 数字## 类型 - Bool## 类型 - 字符串## 类型 - 日期## 类型 - List## 类型 - Map## 类型 - Set## 类型 - Runes## 类型 - Symbol## 类型 - Enum## 注释 - Comments## 函数## 操作符## 流程控制## 异常## 类 - Class## 类 - getter、setter## 类 - 静态变量、方法## 类 - 继承## 类 - 重写## 类 - 抽象## 类 - 工厂构造函数## 类库 - Libraries## 泛型 - Generics## 异步 - Asynchrony## 生成器 - Generators## 可调用 - Callable## 隔离 - Isolate## 类型定义 - Typedef## 元数据 - Metadata## 代码规范 - 代码风格## 代码规范 - 文档注释## 代码规范 - 最佳实践## 代码规范 - 设计指南 课程资料主站 https://ducafecat.tech资料 视频 youtube 优酷 文档 \b代码 参考 Dart 官网 Flutter 官网 2018 Google 开发者大会 bilibili © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]}]