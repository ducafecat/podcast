[{"title":"Flutter 零基础入门中文教学 - 10 stateless stateful 有状态、无状态组件","date":"2019-08-17T16:00:00.000Z","path":"2019/08/18/flutter/flutter-10-stateless-stateful-widget/","text":"本节目标 stateless、stateless 差别 动手封装两个 widget 来体验 点击切换 点击切换 安装插件Awesome Flutter Snippets 第一步：编写 statefull 主程序12345678910111213141516171819202122import 'package:flutter/material.dart';main(List&lt;String&gt; args) &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Text('data'), ), ); &#125;&#125; 第二步：编写 stateless 图片显示1234567891011121314151617import 'package:flutter/material.dart';class MyPicView extends StatefulWidget &#123; final String picName; MyPicView(&#123;Key key, this.picName&#125;) : super(key: key); _MyPicViewState createState() =&gt; _MyPicViewState();&#125;class _MyPicViewState extends State&lt;MyPicView&gt; &#123; @override Widget build(BuildContext context) &#123; return Container( child: Image.asset('assets/$&#123;widget.picName&#125;'), ); &#125;&#125; 第三步：编写切换图片路径状态1234567891011121314151617181920212223242526272829303132333435363738394041import 'package:flutter/material.dart';import 'my_pic_view.dart';main(List&lt;String&gt; args) &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; String fileName = 'p1.jpg'; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Column( children: &lt;Widget&gt;[ MyPicView( picName: fileName, ), RaisedButton( onPressed: () &#123; String tmpFileName = 'p1.jpg'; if (fileName == 'p1.jpg') &#123; tmpFileName = 'p2.jpg'; &#125; setState(() &#123; fileName = tmpFileName; &#125;); &#125;, child: Text('切换图片'), ) ], )), ); &#125;&#125; 代码参考 插件 Awesome Flutter Snippets Flutter Stateless and Stateful Widget Flutter: Stateful vs Stateless Widget © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 09 一切都是 widget","date":"2019-08-16T16:00:00.000Z","path":"2019/08/17/flutter/flutter-09-widgets/","text":"本节目标 整体架构设计 层次分类 整体架构设计架构图 源码目录…/sdk/flutter/packages/flutter/lib 目录功能 名称 说明 Foundation 基础部分 Animation 动画 Painting 边框绘制、颜色、裁剪图像处理、画笔、插值器等跟绘制、图像、装饰相关的类 Gestures 事件类、长按、触摸、放大等等 Rendering 渲染 Widget 的基础库 Widget 依赖 Rendering 层进行构建，Widget 是 Flutter 的核心 Material Android 平台的风格 Cupertino iOS 平台风格的扁平化 widget 分类主要分为 StatelessWidget 和 StatefulWidget 官方分类 image-20190826154543964 基础组件 Widget（Basics）： Container、Row、Column、Image、Text、Icon、RaisedButton、Scaffold、Appbar、FlutterLogo、Placeholder Material Components： App 结构和导航类 Scaffold、Appbar、BottomNavigationBar、TabBar、TabBarView、MaterialApp、WidgetsApp、Drawer、SliverAppBar 按钮类 RaisedButton、FloatingActionButton、FlatButton、IconButton、DropdownButton、PopupMenuButton、ButtonBar 输入和选择类 TextField、Checkbox、Raido、Switch、Slider、Date&amp;Time Pickers 对话框和控制面板类 SimpleDialog、AlertDialog、BottomSheet、ExpansionPanel、SnackBar）； 信息显示类（Image、Icon、Chip、Tooltip、DataTable、Card、LinearProgressIndicator、CircularProgressIndicator、GridView 布局类 ListTile、Stepper、Divider Cupertino （iOS-style widgets）： CupertinoActionSheet、CupertinoActivityIndicator、CupertinoAlertDialog、CupertinoButton、CupertinoDatePicker、CupertinoDialog、CupertinoDialogAction、CupertinoFullscreenDialogTransition、CupertinoPageScaffold、CupertinoPageTransition、CupertinoPicker、CupertinoPopupSurface、CupertinoSegmentedControl、CupertinoSlider、CupertinoSwitch、CupertinoNavigationBar、CupertinoTabBar、CupertinoTabScaffold、CupertinoTabView、CupertinoTextField、CupertinoTimerPicker Layout： 单个子元素的布局 Widget Container、Padding、Center、Align、FittedBox、AspectRatio、ConstrainedBox、Baseline、FractionallySizedBox、IntrinsicHeight、IntrinsicWidth、LimitedBox、Offstage、OverflowBox、SizedBox、SizedOverflowBox、Transform、CustomSingleChildLayout 多个子元素的布局 Widget Row、Column、Stack、IndexedStack、GridView、Flow、Table、Wrap、ListBody、CustomMultiChildLayout、LayoutBuilder、ListView、Expanded Text 文本显示类： Text、RichText、DefaultTextStyle Assets、图片、Icons 类： Image、Icon、RawImage、AssetBundle Input 输入类： Form、FormField、RawKeyboardListener 动画和 Motion 类： AnimatedContainer、AnimatedCrossFade、Hero、AnimatedBuilder、DecoratedBoxTransition、FadeTransition、PositionedTransition、RotationTransition、ScaleTransition、SizeTransition、SlideTransition、AnimatedDefaultTextStyle、AnimatedListState、AnimatedModalBarrier、AnimatedOpacity、AnimatedPhysicalModel、AnimatedPositioned、AnimatedSize、AnimatedWidget、AnimatedWidgetBaseState 交互模型类： 触摸交互 Draggable、LongPressDraggable、GestureDetector、DragTarget、Dismissible、IgnorePointer、AbsorbPointer、Scrollable 路由导航 Hero、Navigator 样式类： Padding、Theme、MediaQuery 绘制和效果类： Transform、Opacity、DecoratedBox、FractionalTranslation、RotatedBox、ClipOval、ClipPath、ClipRect、CustomPaint、BackdropFilter Async 异步模型类： FutureBuilder、StreamBuilder 滚动类： GridView、ListView、NestedScrollView、SingleChildScrollView、Scrollable、Scrollbar、CustomScrollView、NotificationListener、ScrollConfiguration、RefreshIndicator、PageView 辅助功能类： Semantics、MergeSemantics、ExcludeSemantics widget 地图 img 参考 Widget catalog © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 08 开发规范","date":"2019-08-15T16:00:00.000Z","path":"2019/08/16/flutter/flutter-08-standard/","text":"本节目标 Dart 规范 Flutter 阿里规范 VSCode 格式化 右键菜单 当 Save 时自动格式化 规范精要使用小写加下划线来命名库和源文件1234library peg_parser.source_scanner;import 'file_system.dart';import 'slider_menu.dart'; 优先使用小驼峰法作为常量命名1234567const pi = 3.14;const defaultTimeout = 1000;final urlScheme = RegExp('^([a-z]+):');class Dice &#123; static final numberGenerator = Random();&#125; 所有流控制结构，请使用大括号12345if (isWeekDay) &#123; print('Bike to work!');&#125; else &#123; print('Go dancing or read a book!');&#125; Doc 注释使用///文档注释来记录成员和类型。 12/// The number of characters in this chunk when unsplit.int get length =&gt; ... 导入 lib 下文件库，统一指定包名，避免过多的123```dartpackage:flutter_go/使用相邻字符串连接字符串文字123raiseAlarm( 'ERROR: Parts of the spaceship are on fire. Other ' 'parts are overrun by martians. Unclear which are which.'); 优先使用模板字符串1'Hello, $name! You are $&#123;year - birth&#125; years old.'; 在不需要的时候，避免使用花括号12'Hi, $name!'\"Wear your wildest $decade's outfit.\" 不要使用.length 查看集合是否为空12if (lunchBox.isEmpty) return 'so hungry...';if (words.isNotEmpty) return words.join(' '); 遍历一个序列123for (var person in people) &#123; ...&#125; 不要显式地将变量初始化为空123456789101112int _nextId;class LazyId &#123; int _id; int get id &#123; if (_nextId == null) _nextId = 0; if (_id == null) _id = _nextId++; return _id; &#125;&#125; 在不需要的时候不要用 this1234567891011class Box &#123; var value; void clear() &#123; update(null); &#125; void update(value) &#123; this.value = value; &#125;&#125; 尽可能使用初始化的形式1234class Point &#123; num x, y; Point(this.x, this.y);&#125; 不要使用 new12345678910Widget build(BuildContext context) &#123; return Row( children: [ RaisedButton( child: Text('Increment'), ), Text('Click!'), ], );&#125; 优先使用 async/await 代替原始的 futures123456789101112Future&lt;int&gt; countActivePlayers(String teamName) async &#123; try &#123; var team = await downloadTeam(teamName); if (team == null) return 0; var players = await team.roster; return players.where((player) =&gt; player.isActive).length; &#125; catch (e) &#123; log.error(e); return 0; &#125;&#125; 当异步没有任何用处时，不要使用它123Future afterTwoThings(Future first, Future second) &#123; return Future.wait([first, second]);&#125; 参考 Dart 官方规范 阿里 Flutter Go 代码开发规范 0.1.0 版 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 07 我们的第一个程序 hello word","date":"2019-08-11T16:00:00.000Z","path":"2019/08/12/flutter/flutter-07-first-app-helloword/","text":"本节目标 程序基础结构 pubspec.yaml 配置 布局，样式使用 目录文件结构 名称 说明 lib Flutter 代码 android Android 项目 ios IOS 项目 test 测试目录 .idea IDEA 编辑器配置 pubspec.yaml Flutter 配置文件 pubspec.lock 包版本锁定 build 编译目录 一、编写最基础 helloword 步骤 1231. 第一步 runApp(...)2. 第二步 MaterialApp(...)3. 第三步 指定 widget Text(...) 代码 1234567891011import 'package:flutter/material.dart';main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: Text('hello word!'), ));&#125; 二、采用界面脚手架 标题 侧栏 正文12345678910111213141516171819202122main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: // 第四步 页面脚手架 Scaffold( // 第五步 程序标题 appBar: AppBar( title: Text('我们第一个程序'), ), // 第六步 侧栏 drawer: Drawer( child: Text('侧栏'), ), // 正文 body: Text('hello word!'), ), ));&#125; 三、布局 样式 图片12345678910111213141516171819202122232425262728293031323334353637main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: // 第四步 页面脚手架 Scaffold( // 第五步 程序标题 appBar: AppBar( title: Text('我们第一个程序'), ), // 第六步 侧栏 drawer: Drawer( child: Text('侧栏'), ), // 正文 body: // 居中 Center( child: Column( children: &lt;Widget&gt;[ // 载入图片 Image.asset('assets/p1.jpg'), // 文字 Text( '雷神', // 样式 style: TextStyle(fontSize: 28, color: Colors.red), ), ], ), ), ), ));&#125; 代码https://github.com/ducafecat/flutter-learn/tree/master/helloword 参考 Write your first Flutter app, part 1 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 06 Windows10 下配置 Flutter 开发环境","date":"2019-08-10T16:00:00.000Z","path":"2019/08/11/flutter/flutter-06-setup-windows10/","text":"本节目标 安装 JDK 1.8 安装 Flutter SDK 安装 Android Studio 安装 VSCode 配置 VSCode 插件 配置 Android 插件 配置 Android 模拟器 环境介绍 window10 专业版 jdk1.8 flutter 1.7.8 vscode 1.37.1 android studio 3.5 1. 安装 JDK 1.8 下载地址 https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 选取 windows x64 2. 安装 Flutter SDK 下载地址 https://flutter.dev/docs/development/tools/sdk/releases?tab=windows#windows 解压 我放在了 c:\\sdk\\flutter 配置环境变量 12345678# PathC:\\sdk\\flutter\\bin# FLUTTER_STORAGE_BASE_URLhttps://storage.flutter-io.cn# PUB_HOSTED_URLhttps://pub.flutter-io.cn 执行检查 1Flutter doctor 3. 安装 Android Studio 下载 https://developer.android.com/studio/ 配置 SDK 包 配置 SDK Tools 配置环境变量 123456# PathC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk\\toolsC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk\\platform-tools# ANDROID_HOMEC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk 安装 Android 证书 123flutter doctor --android-licenses一路按 Y 4. 安装 VSCode 下载地址 https://code.visualstudio.com/ 5. 配置 VSCode 插件 Flutter 必装 Awesome Flutter Snippets Paste JSON as Code bloc 6. 配置 Android 插件 flutter 7. 配置 Android 模拟器 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 05 配置 IDE Macos","date":"2019-06-20T16:00:00.000Z","path":"2019/06/21/flutter/flutter-05-setup-ide-macos/","text":"本节目标 配置 VSCode 配置 Intellij IDEA 配置 Android Studio Dart DevTools 调试视图 Hot Reload 热更新 配置 VSCode下载安装https://code.visualstudio.com/ 安装插件 Dart 安装插件 Flutter 安装插件 Awesome Flutter Snippets 创建项目 flutter: new project 创建完成 创建模拟器 被提示需要 android 配置 Install Sources for Android 27 安装模拟器镜像 android-27 Google Play Intel x86 Atom System Image (system-images;android-27;google_apis_playstore;x86) x86 模拟器加速器 Intel x86 Emulator Accelerator (HAXM installer) android 模拟器 ios 模拟器 F5 运行 打开 Dart DevTools 配置 Intellij IDEA安装http://www.jetbrains.com/ 安装插件 Flutter new project 选择 flutter 注意 选择 sdk 位置 选项 点击 more 更多设置 module name 为英文 运行 调试器 inspector outline 配置 Android Studio安装插件 Flutter 创建项目 主面板 导航 运行同 IDEA 效果 hot reload热更新已支持 参考 Flutter SDK MacOS install Set up an editor Hot reload © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 04 配置 Android 开发环境 MacOS","date":"2019-06-19T16:00:00.000Z","path":"2019/06/20/flutter/flutter-04-setup-android-macos/","text":"本节目标 安装 Android Studio 配置 Flutter 连接 Android Studio 配置 Android 模拟器 在 Android 模拟器中运行 Flutter App 1. 安装 Android Studiohttps://developer.android.google.cn/studio 1.2 “unable to access android sdk add-on list” 点击取消 unable to access android sdk add-on list 1.3 自定义安装，全选项目 all 1.4 配置模拟器 进去 AVD Manage 不要选最新的模拟器镜像 配置模拟器参数 大家机器好点的，就多给点内存和空间吧，这样模拟器运行的快些 运行模拟器 2. 配置环境变量12345678&gt; vi ~/.bash_profile# androidexport ANDROID_HOME=~/Library/Android/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/toolssource ~/.bash_profile 3. 运行 Flutter3.1 创建项目 crate &amp; run 1234567891011121314151617181920&gt; flutter create my_app&gt; cd my_app&gt; flutter runUsing hardware rendering with device Android SDK built for x86. If you get graphics artifacts, consider enabling software renderingwith \"--enable-software-rendering\".Launching lib/main.dart on Android SDK built for x86 in debug mode...Initializing gradle... 1.4sResolving dependencies... 2.2sRunning Gradle task 'assembleDebug'...Running Gradle task 'assembleDebug'... Done 2.2sBuilt build/app/outputs/apk/debug/app-debug.apk.Installing build/app/outputs/apk/app.apk... 2.2sD/EGL_emulation( 5614): eglMakeCurrent: 0xe2c05300: ver 3 0 (tinfo 0xe2c03350)Syncing files to device Android SDK built for x86... 2,067ms (!)🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on Android SDK built for x86 is available at: http://127.0.0.1:64823/uqW8O20byg8=/For a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\". 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 03 配置 IOS 开发环境 MacOS","date":"2019-06-18T16:00:00.000Z","path":"2019/06/19/flutter/flutter-03-setup-ios-macos/","text":"本节目标 安装 xcode 配置 flutter 连接 xcode 在 IOS 模拟器中运行 flutter app 1. 安装 XCode安装 Xcode 9.0 以上版本 (访问 Apple网站 下载或者，Mac App Store 方式安装). 2. 第一次启动 XCode 安装所需组件 3. 配置 Xcode command-line tools1234&gt; sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer检验 打印 license&gt; sudo xcodebuild -license 4. 启动模拟器1open -a Simulator 5. 创建 Flutter 项目5.1 create &amp; run1234567&gt; flutter create my_app&gt; cd my_app&gt; flutter run🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on iPhone Xʀ is available at: http://127.0.0.1:62341/ztmtijcoJrI=/For a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\". 模拟器运行 5.2 vm 报告1http://127.0.0.1:62341/ztmtijcoJrI=/#/vm vm 6. 部署到真机6.1 安装软件包1234567&gt; brew update&gt; brew install --HEAD usbmuxd&gt; brew link usbmuxd&gt; brew install --HEAD libimobiledevice&gt; brew install ideviceinstaller ios-deploy cocoapods&gt; pod setup 安装 homebrew pod setup 很慢的问题 手动下载 git clone https://github.com/CocoaPods/Specs 复制 ~/.cocoapods/repos/Specs-master 执行 pod update 复制 master 下的 .git 到 Specs-master 停止 pod update 重命名 Specs-master 为 master 进入项目的 ios 目录下 pod install 成功 6.2 配置AppStore开发者账号1open ios/Runner.xcworkspace Add Account 开发者登录 https://developer.apple.com/cn/programs/ 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 02 安装 SDK MacOS","date":"2019-06-17T16:00:00.000Z","path":"2019/06/18/flutter/flutter-02-install-sdk-macos/","text":"本节目标 采用 git 方式安装 SDK 编译代码 flutter tool 检查环境 flutter doctor 1. 安装 SDK1.1 方式一：下载SDK包 SDK包下载 解压到 ~/Documents/sdk/flutter 1.2 方式二：git 拉取源码123&gt; mkdir ~/Documents/sdk&gt; cd ~/Documents/sdk&gt; git clone -b stable https://github.com/flutter/flutter.git 1.3 持续升级下次更新直接进入目录升级 123&gt; cd ~/Documents/sdk/flutter&gt; git pull&gt; flutter --version 2. 配置环境变量12345678910&gt; vi ~/.bash_profile# flutter , 注意没有单引号export PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin# 以下两行适合国内export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn&gt; source ~/.bash_profile 3. zsh 用户修改配置文件123456&gt; vi ~/.zshrc最后一行加入source ~/.bash_profile重启终端生效 4. 命令行运行 flutter123456789101112131415161718192021222324252627&gt; flutter doctorxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrunBuilding flutter tool... ╔════════════════════════════════════════════════════════════════════════════╗ ║ Welcome to Flutter! - https://flutter.dev ║ ║ ║ ║ The Flutter tool anonymously reports feature usage statistics and crash ║ ║ reports to Google in order to help Google contribute improvements to ║ ║ Flutter over time. ║ ║ ║ ║ Read about data we send with crash reports: ║ ║ https://github.com/flutter/flutter/wiki/Flutter-CLI-crash-reporting ║ ║ ║ ║ See Google's privacy policy: ║ ║ https://www.google.com/intl/en/policies/privacy/ ║ ║ ║ ║ Use \"flutter config --no-analytics\" to disable analytics and crash ║ ║ reporting. ║ ╚════════════════════════════════════════════════════════════════════════════╝Doctor summary (to see all details, run flutter doctor -v):Oops; flutter has exited unexpectedly.Crash report written to /Users/ducafecat/flutter_01.log;please let us know at https://github.com/flutter/flutter/issues. 第一次运行会进行 build CommandLineTools 工具推荐，先安装 xcode （早晚都要安装的） 然后 Terminal 运行 xcode-select –install xcode-select --install 5. 检查环境 flutter doctor123456789101112131415161718192021222324252627282930313233343536373839&gt; flutter doctorDoctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel stable, v1.5.4-hotfix.2, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)[!] Android toolchain - develop for Android devices (Android SDK version 29.0.0) ✗ Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses[✗] iOS toolchain - develop for iOS devices ✗ Xcode installation is incomplete; a full installation is necessary for iOS development. Download at: https://developer.apple.com/xcode/download/ Or install Xcode via the App Store. Once installed, run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run: brew update brew install --HEAD usbmuxd brew link usbmuxd brew install --HEAD libimobiledevice brew install ideviceinstaller ✗ ios-deploy not installed. To install: brew install ios-deploy ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side's plugin code that responds to your plugin usage on the Dart side. Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.dev/platform-plugins To install: brew install cocoapods pod setup[!] Android Studio (version 3.4) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] VS Code (version 1.35.1) ✗ Flutter extension not installed; install from https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter[!] Connected device ! No devices available! Doctor found issues in 6 categories. 6. 查看版本 version12345&gt; flutter --versionFlutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.gitFramework • revision 7a4c33425d (9 weeks ago) • 2019-04-29 11:05:24 -0700Engine • revision 52c7a1e849Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5) 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 01 前言","date":"2019-06-16T16:00:00.000Z","path":"2019/06/17/flutter/flutter-01-introduce/","text":"本节目标 介绍 Flutter 课程计划 如果获取课程资料、代码、视频 适合人群 泛移动开发人员 原生移动开发人员 前端开发人员 跨平台: 移动、Web、桌面、嵌入 跨平台 Flutter 框架结构 Flutter Framework Framework 这一层使用 Dart 语言开发，它实现了一套基础库。 Foundation、Animation、Painting、Gestures 为 Dart 实现的 UI 层，提供动画、手势及绘制。 Rendering 渲染层，依赖 UI 层，在运行时 Rendering 层会构建一个 Widget 树，当有变化时，会更具一定的算法计算出有变化的部分，然后更新 Widget 树。 Widgets 层是 Flutter 提供的的一套基础组件库，在基础组件库之上，Flutter 还提供了 Material 和 Cupertino 两种视觉风格的组件库。 Flutter Engine Skia 是一个开源的二维图形库，提供各种常用的 API，并可在多种软硬件平台上运行。谷歌 Chrome 浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。 Skia 由谷歌出资管理，任何人都可基于 BSD 免费软件许可证使用 Skia。Skia 开发团队致力于开发其核心部分， 并广泛采纳各方对于 Skia 的开源贡献。 因为没有使用原生的 UI 和绘制框架，所以才保证了 Flutter 的高性能体验。 Skia官网 image-20190626154959148 Skia是一个开源的二维图形库，提供各种常用的API，并可在多种软硬件平台上运行。谷歌Chrome浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。 Skia由谷歌出资管理，任何人都可基于BSD免费软件许可证使用Skia。Skia开发团队致力于开发其核心部分， 并广泛采纳各方对于Skia的开源贡献。 Flutter for Webhttps://flutter.dev/web 通过对比，可以发现，web框架层和mobile的几乎一模一样。因此只需要重新实现一下引擎和嵌入层，不用变动Flutter API就可以完全可以将UI代码从Android / IOS Flutter App移植到Web。Dart能够使用Dart2Js编译器把Dart代码编译成Js代码。大多数原生App元素能够通过DOM实现，DOM实现不了的元素可以通过Canvas来实现。 Fuchsia OS 许中兴博士演讲：Fuchsia OS 简介及幻灯片下载 桌面系统 手机OS 平板 华为荣耀Play Flutter 特点 多平台支持 iOS Android Linux 未来 Fuchsia OS 原生用户界面 120fps 超高性能 两套成熟 UI 库 Material Design 和 Cupertino 响应式的框架 Redux、RxDart、BloC 业务和 UI 分离 Flutter 支持 Hot Reload 国内阿里咸鱼、腾讯、京东、国外的谷歌等公司都已经有上线产品在使用 Flutter 开发 showcase Flutter 横向对比 Cordova 基于 WebView 渲染，遇到动画、大列表 性能慢 React Native、Weex 基于虚拟 DOM 生成原生组件，比 Cordova 这类的性能好，但是遇到负责项目会有叠加 view 过多性能瓶颈 Flutter 自己封装的组件和渲染引擎，在设计上肯定会比 RN 这类的性能好，用的自家 Dart 语言深度编译，不需要像 RN 桥接 JavaScript 进行通讯，也会在性能上有优势 Flutter 生态资源 Flutter应用展示 官方包管理平台 awesome 课程计划123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115- 开篇写在最前 - Flutter 介绍 - 学习方法推荐 - 课程计划- 开发环境搭建和工具配置 - Flutter 环境配置 MacOS - IOS 环境配置 MacOS - Android 环境配置 MacOS - Flutter 环境配置 Windows10 - Android 环境配置 Windows10 - 开发工具的选择 VSCode、IDEA、AndroidStudio- 实战应用 - 新闻应用程序结构分析 - 使用布局组件搭建新闻列表界面 - 采用第三方 Http Dio 程序包读取数据 - 解析 Json 到 Modle - 使用自定义组件展示新闻行信息 - 点击新闻条路由导航到详情页 - 采用Web容器展示新闻内容 - 上拉刷新、下拉加载新闻列表 - 定制 Loading 效果 - 采用矢量图标库 - 采用 Sqlite 实现新闻列表首页缓存 - Redux 管理主题样式 - 加入应用启动画面 - 打包 Android APK 文件 - 打包 IOS IPA 文件- 基础知识 - Route 路由导航 - 包管理 - 资源管理 - 调试工具 - 线程模型和异常处理 - 生命周期- 基础组件 - Widget 与 Element - StatelessWidget - StatefulWidget - Text - Image - Button - AppBar - AlertDialog - Icon - TextField - Form - Switch - Checkbox- 布局组件 - 线性 Row - 线性 Column - 弹性 Flex - 弹性 Expanded - 层叠 Stack - 层叠 IndexedStack - 层叠 Positioned - 流式 Flow - 流式 Wrap- 容器组件 - Scaffold - Container - Center - Padding - ConstrainedBox - SizedBox - DecoratedBox - Transform- 导航组件 - TabBar - NavigationBar - PageView- 可滚动组件 - CustomScrollView - ListView - GridView - ScrollView - ExpansionPanel - ScrollController- 表格组件 - Table - DataTables- 功能型组件 - WillPopScope - InheritedWidget - 主题 Theme- 事件处理与通知 - 事件处理 - 手势识别 - 全局事件总线 - 通知消息- 自定义 Widget - 组合其它 Widget - 自绘 CustomPaint、Canvas- 进阶 - 文件操作 - Http 请求 - WebSocket 连接 - Json 解析 - 包与插件 - 国际化 - 数据库缓存 - Redux 参考 flutter.io skia showcase An open list of apps built with Flutter Flutter: a Portable UI Framework for Mobile, Web, Embedded, and Desktop © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Dart语言学习 - 38 代码分格 API 设计 effective-design","date":"2019-01-28T08:44:13.000Z","path":"2019/01/28/dart/dart-38-effective-design/","text":"本节目标 API 设计 环境 Dart 2.1.0 要 使用一致的术语12345pageCount // 一个成员变量updatePageCount() // 和 pageCount 名字一致。toSomething() // 和 Iterable 的 toList() 一致。asSomething() // 和 List 的 asMap() 一致。Point // 广为人知的概念。 避免 缩写1234pageCountbuildRectanglesIOStreamHttpRequest 推荐 把最具描述性的名词放到最后1234pageCount // A count (of pages).ConversionSink // A sink for doing conversions.ChunkedConversionSink // A ConversionSink that's chunked.CssFontFaceRule // A rule for font faces in CSS. 考虑 尽量让代码看起来像普通的句子12345678// \"If errors is empty...\"if (errors.isEmpty) ...// \"Hey, _subscription, cancel!\"_subscription.cancel();// \"Get the monsters where the monster has claws.\"monsters.where((monster) =&gt; monster.hasClaws); 推荐 使用非命令式动词短语命名布尔类型的变量和属性123456isEmptyhasElementscanCloseclosesWindowcanShowPopuphasShownPopup 考虑 省略命名布尔参数的动词123Isolate.spawn(entryPoint, message, paused: false)new List.from(elements, growable: true)new RegExp(pattern, caseSensitive: false) 推荐 使用命令式动词短语来命名带有副作用的函数或者方法1234list.add()queue.removeFirst()window.refresh()connection.downloadData() 考虑 使用名词短语或者非命令式动词短语命名返回数据为主要功能的方法或者函数12list.elementAt(3)string.codeUnitAt(4) 推荐 使用 to___() 来命名把对象的状态转换到一个新的对象的函数123list.toSet()stackTrace.toString()dateTime.toLocal() 使用 as___() 来命名把原来对象转换为另外一种表现形式的函数123list.asMap()bytes.asFloat32List()subscription.asFuture() 避免 在方法或者函数名称中描述参数12list.add(element)map.remove(key) 避免 定义使用简单的方法可以替代的只有一个成员的抽象类和 Java 不同的是， Dart 支持一等方法（first-class functions）、闭包和优雅的语法来使用它们。 如果你需要的只是一个回调函数，使用方法即可。 如果你定义了一个类，里面只有一个名字无意义的函数， 例如 call 或者 invoke， 这种情况最好用方法替代 1typedef bool Predicate(item); 避免 定义只包含静态成员的类12345DateTime mostRecent(List&lt;DateTime&gt; dates) &#123; return dates.reduce((a, b) =&gt; a.isAfter(b) ? a : b);&#125;const _favoriteMammal = 'weasel'; 然后，这条规则并不是强制的。对于一些常量或者枚举型的类型， 使用类来把相关的成员组织到一起可能也是合理的。当然， 使用库也是同样合理的。1234567class Color &#123; static const red = '#f00'; static const green = '#0f0'; static const blue = '#00f'; static const black = '#000'; static const white = '#fff';&#125; 推荐 使用构造函数而不是静态函数来创建对象1234567class Point &#123; num x, y; Point(this.x, this.y); Point.polar(num theta, num radius) : x = radius * math.cos(theta), y = radius * math.sin(theta);&#125; 要 使用 getter 来定义访问属性的操作如果函数的名字带有 get 前缀，或者是一个像 length 或者 size 这样 的名称，这种情况通常最好定义该函数为一个 getter。 当全部满足下面的条件的时候，你应该使用一个 getter： 没有参数。返回一个值没有副作用 调用一个 getter 不应该改变对象外部可见的状态 (内部缓存和延时初始化的状态可以发生变化) 如果对象的状态在多次调用同一个 getter 之间没有发生变化，则 多次调用同一个 getter 应该返回同一个值 123rectangle.widthcollection.isEmptybutton.canShow 要 对于本质上为修改对象属性的函数要使用 setter12rectangle.width = 3;button.visible = false; 不要 为 setter 指定返回类型1set foo(Foo value) &#123;...&#125; 推荐 为私有成员提供类型在公开的 API 上使用类型可以帮助使用你的库的用户。同样， 是私有代码上使用类型，可以帮助你的你的同事或者代码维护者。 另外，在私有成员上使用类型，对于将来自己查看代码 也有帮助。 12345678class CallChainVisitor &#123; final SourceVisitor _visitor; final Expression _target; void _writeCall(Expression call) &#123; ... &#125; ...&#125; 避免 在方法表达式上使用类型1var names = people.map((person) =&gt; person.name); 避免 在没必要的地方使用 dynamic 类型在大部分 Dart 代码中，类型可以忽略，这样该参数类型会自动设置为 dynamic。 所以没必要手动指定类型为 dynamic 的， 只需要省略类型即可。 12345lookUpOrDefault(String name, Map map, defaultValue) &#123; var value = map[name]; if (value != null) return value; return defaultValue;&#125; 避免 使用 Function 类型 正确 1bool isValidString(String value, bool predicate(String string)) &#123; ... &#125; 错误 1bool isValidString(String value, Function predicate) &#123; ... &#125; 要 使用 Object 来替代 dynamic 来表示可以接受任意对象1234567891011// Accepts any object.void log(Object object) &#123; print(object.toString());&#125;// Only accepts bool or String, which can't be expressed in a type annotation.bool convertToBool(arg) &#123; if (arg is bool) return arg; if (arg is String) return arg == 'true'; throw new ArgumentError('Cannot convert $arg to a bool.');&#125; 考虑使用命名参数或者命名构造函数以及命名常量来清晰 的表明您的意图：1234new Task.oneShot();new Task.repeating();new ListBox(scroll: true, showScrollbars: true);new Button(ButtonState.enabled); 对于 setter 则没有这个要求，应为 setter 的名字已经明确的 表明了值所代表的意义12listBox.canScroll = true;button.isEnabled = false; 避免 把用户想要忽略的参数放到位置可选参数的前列123456789101112131415161718String.fromCharCodes(Iterable&lt;int&gt; charCodes, [int start = 0, int end])DateTime(int year, [int month = 1, int day = 1, int hour = 0, int minute = 0, int second = 0, int millisecond = 0, int microsecond = 0])Duration( &#123;int days: 0, int hours: 0, int minutes: 0, int seconds: 0, int milliseconds: 0, int microseconds: 0&#125;) 避免 使用强制无意义的参数1string.substring(start) 要 使用包含开始位置并且不包含结束位置的范围参数如果你定义一个函数或者方法让用户从基于位置排序的集合中 选择一些元素，需要一个开始位置索引和结束位置索引分别制定开始 元素的位置以及结束元素的位置。结束位置通常是指 大于最后一个元素的位置的值。 核心库就是这样定义的，所以最好和核心库保持一致 12[0, 1, 2, 3].sublist(1, 3) // [1, 2].'abcd'.substring(1, 3) // \"bc\". 不要 在自定义 == 操作符中判断 null语言规范表明了这种判断已经自动执行了，你的 == 自定义操作符只有当 右侧对象不为 null 的时候才会执行。 正确 123456class Person &#123; final String name; operator ==(other) =&gt; other is Person &amp;&amp; name == other.name;&#125; 错误 12345678class Person &#123; final String name; operator ==(other) =&gt; other != null &amp;&amp; other is Person &amp;&amp; name == other.name;&#125; 参考 design © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 37 代码分格 最佳实践 effective-usage","date":"2019-01-28T07:30:46.000Z","path":"2019/01/28/dart/dart-37-effective-usage/","text":"本节目标 最佳实践 环境 Dart 2.1.0 使用相邻的字符串字面量定义来链接字符串123raiseAlarm( 'ERROR: Parts of the spaceship are on fire. Other ' 'parts are overrun by martians. Unclear which are which.'); 使用插值的形式来组合字符串和值1'Hello, $name! You are $&#123;year - birth&#125; years old.'; 避免在字符串插值中使用多余的大括号123'Hi, $name!'\"Wear your wildest $decade's outfit.\"'Wear your wildest $&#123;decade&#125;s outfit.' 尽可能的使用集合字面量来定义集合12var points = [];var addresses = &#123;&#125;; 如果有必要还可以提供泛型类型12var points = &lt;Point&gt;[];var addresses = &lt;String, Address&gt;&#123;&#125;; 不要 使用 .length 来判断集合是否为空12if (lunchBox.isEmpty) return 'so hungry...';if (words.isNotEmpty) return words.join(' '); 使用高阶（higher-order）函数来转换集合数据123var aquaticNames = animals .where((animal) =&gt; animal.isAquatic) .map((animal) =&gt; animal.name); 避免 在 Iterable.forEach() 中使用函数声明形式123for (var person in people) &#123; ...&#125; forEach() 方法通常在 JavaScript 中使用，原因是系统内置的 for-in 循环并不能提供期望的结果。 相反，在 Dart 中如果需要遍历一个集合，通常使用循环语句 如果你只想在每个集合元素上调用一个已经定义好的函数，则可以使用 forEach() 函数1people.forEach(print); 要 用方法声明的形式来给方法起个名字 正确 12345void main() &#123; localFunction() &#123; ... &#125;&#125; 错误示范 12345void main() &#123; var localFunction = () &#123; ... &#125;;&#125; 不要 显式的把变量初始化为 null123456789101112int _nextId;class LazyId &#123; int _id; int get id &#123; if (_nextId == null) _nextId = 0; if (_id == null) _id = _nextId++; return _id; &#125;&#125; 在 Dart 中没有初始化的变量和域会自动的 初始化为 null。在语言基本就保证了该行为的可靠性。 在 Dart 中没有 “未初始化的内存”这个概念。所以添加 = null 是多余的。 不要 创建没必要的 getter 和 setter12345678910```# 段落 1- 正确```dartclass Box &#123; var contents;&#125; 错误 1234567class Box &#123; var _contents; get contents =&gt; _contents; set contents(value) &#123; _contents = value; &#125;&#125; 推荐 使用 final 关键字来限定只读属性123class Box &#123; final contents = [];&#125; 考虑 用 =&gt; 来实现只有一个单一返回语句的函数123get width =&gt; right - left;bool ready(num time) =&gt; minTime == null || minTime &lt;= time;containsValue(String value) =&gt; getValues().contains(value); 要 尽可能的在定义变量的时候初始化其值1234567class Folder &#123; final String name; final List&lt;Document&gt; contents = []; Folder(this.name); Folder.temp() : name = 'temporary';&#125; 要 尽可能的使用初始化形式1234class Point &#123; num x, y; Point(this.x, this.y);&#125; 要 把 super() 调用放到构造函数初始化列表之后调用123View(Style style, List children) : _children = children, super(style) &#123; 要 使用 rethrow 来重新抛出捕获的异常123456try &#123; somethingRisky();&#125; catch(e) &#123; if (!canHandle(e)) rethrow; handle(e);&#125; 推荐 使用 async/await 而不是直接使用底层的特性123456789Future&lt;bool&gt; doAsyncComputation() async &#123; try &#123; var result = await longRunningCalculation(); return verifyResult(result.summary); &#125; catch(e) &#123; log.error(e); return false; &#125;&#125; 不要 在没有有用效果的情况下使用 async123Future afterTwoThings(Future first, second) &#123; return Future.wait([first, second]);&#125; 参考 usage © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 36 - 代码分格 文档 effective-documentation","date":"2019-01-28T07:15:00.000Z","path":"2019/01/28/dart/dart-36-effective-documentation/","text":"本节目标 文档分格 环境 Dart 2.1.0 按照句子的格式来格式化评论12// Not if there is nothing before it.if (_chunks.isEmpty) return false; 如果第一个单词不是大小写相关的标识符，则首字母要大写。使用标点符号结尾 （句号、感叹号、问号）。对于所有的注释都是这样要求的：文档注释、 行内注释、甚至 TODO 注释。即使是一句话的一半也需要如此。 使用块注释作为解释说明1234greet(name) &#123; // Assume we have a valid name. print('Hi, $name!');&#125; 使用 /// 文档注释来注释成员和类型12/// The number of characters in this chunk when unsplit.int get length =&gt; ... 把第一个语句定义为一个段落12345/// Defines a flag.////// Throws an [ArgumentError] if there is already an option named [name] or/// there is already an option using abbreviation [abbr]. Returns the new flag.Flag addFlag(String name, String abbr) &#123; ... &#125; 注释文档中的第一个段落应该是简洁的、面向用户的注释。例如下面的示例， 通常不是一个完成的语句。 用第三人称来开始函数或者方法的文档注释12345/// Returns `true` if every element satisfies the [predicate].bool all(bool predicate(T element)) &#123; ... &#125;/// Starts the stopwatch if not already running.void start() &#123; ... &#125; 使用名词短语来开始变量、getter、setter 的注释12345/// The current day of the week, where `0` is Sunday.int weekday;/// The number of checked buttons on the page.int get checkedCount &#123; ... &#125; 注释文档应该表述这个属性是什么。虽然 getter 函数会做些计算， 但是也要求这样，调用者关心的是其结果而 不是如何计算的 使用名词短语来开始库和类型注释1234/// A chunk of non-breaking output text terminated by a hard or soft newline.////// ...class Chunk &#123; ... &#125; 在程序中，类的注释通常是最重要的文档。 类的注释描述了类型的不变性、介绍其使用的术语、 提供类成员使用的上下文信息。为类提供一些注释可以让 其他类成员的注释更易于理解和编写。 在文档注释中添加示例代码1234/// Returns the lesser of two numbers.////// min(5, 3); // 3.num min(num a, num b) &#123; ... &#125; 人类非常擅长从示例中抽象出实质内容，所以即使提供 一行最简单的示例代码都可以让 API 更易于理解。 而 Dart 把参数、返回值等描述放到文档注释中，并使用方括号来引用 以及高亮这些参数和返回值12345/// Defines a flag.////// Throws an [ArgumentError] if there is already an option named [name] or/// there is already an option using abbreviation [abbr]. Returns the new flag.Flag addFlag(String name, String abbr) &#123; ... &#125; 把注释文档放到注解之前123/// _Deprecated: Use [newMethod] instead._@deprecatedoldMethod(); 使用 “this” 而不是 “the” 来引用实例成员1234567class Box &#123; /// The value this wraps. var _value; /// True if this box contains a value. bool get hasValue =&gt; _value != null;&#125; 参考 documentation © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 35 - 代码分格 effective style","date":"2019-01-28T06:43:12.000Z","path":"2019/01/28/dart/dart-35-effective-style/","text":"本节目标 代码分格 环境 Dart 2.1.0 使用 UpperCamelCase 风格来命名类型名称12345class SliderMenu &#123; ... &#125;class HttpRequest &#123; ... &#125;typedef bool Predicate&lt;T&gt;(T value); 使用 lowercase_with_underscores 风格来命名库和文件名名字1234library peg_parser.source_scanner;import 'file_system.dart';import 'slider_menu.dart'; 使用 lowercase_with_underscores 风格命名导入的前缀1234import 'dart:json' as json;import 'dart:math' as math;import 'package:javascript_utils/javascript_utils.dart' as js_utils;import 'package:js/js.dart' as js; 使用 lowerCamelCase 风格来命名其他的标识符1234567var item;HttpRequest httpRequest;align(clearItems) &#123; // ...&#125; 使用 lowerCamelCase 来命名常量1234567const pi = 3.14;const defaultTimeout = 1000;final urlScheme = new RegExp('^([a-z]+):');class Dice &#123; static final numberGenerator = new Random();&#125; 把 “dart:” 导入语句放到其他导入语句之前12345import 'dart:async';import 'dart:html';import 'package:bar/bar.dart';import 'package:foo/foo.dart'; 把 “package:” 导入语句放到相对导入语句之前1234import 'package:bar/bar.dart';import 'package:foo/foo.dart';import 'a.dart'; 把”第三方” “package:” 导入语句放到其他语句之前。12345import 'package:bar/bar.dart';import 'package:foo/foo.dart';import 'package:myapp/io.dart';import 'package:myapp/util.dart'; 把导出（export）语句放到所有导入语句之后的部分1234import 'src/error.dart';import 'src/string_source.dart';export 'src/error.dart'; 按照字母顺序来排序每个部分中的语句12345import 'package:bar/bar.dart';import 'package:foo/bar.dart';import 'a.dart';import 'a/b.dart'; 在所有的控制结构上使用大括号12345if (true) &#123; print('sanity');&#125; else &#123; print('opposite day!');&#125; 当只有 if 语句没有 else 语句并且 所有语句可以放到一行的时候，可以省略大括号1if (arg == null) return defaultValue; 通常用于当条件满足的时候就跳出 if 或者 返回的情况。 但是对于其他表达式，如果可以放到一行中， 也可以这样使用1if (parameter == null) parameter = defaultValue; 在每个语句或者声明后面添加一个空行123456main() &#123; first(statement); second(statement);&#125;anotherDeclaration() &#123; ... &#125; 在关键字 operator 后面添加一个空格1bool operator ==(other) =&gt; ...; 在二元和三元操作符之间添加空格1234average = (a + b) / 2;largest = a &gt; b ? a : b;if (obj is! SomeType) print('not SomeType');optional([parameter = defaultValue]) &#123; ... &#125; 不要 在一元操作符前后添加空格12!conditionindex++ 把开始的大括号 ({) 放到同一行上123456789class Foo &#123; method() &#123; if (true) &#123; // ... &#125; else &#123; // ... &#125; &#125;&#125; 在函数和方法体的 { 之前添加一个空格123getEmptyFn(a) &#123; return () &#123;&#125;;&#125; 把三元操作符放到多个表达式的下一行开始位置123return someCondition ? whenTrue : whenFalse; 把 . 放到下一行开头当表达式换行的时候12someVeryLongVariable.withAVeryLongProperty .aMethodOnThatObject(); 把构造函数初始化列表中的每个参数和值都放到同一行123456MyClass() : firstField = 'some value', secondField = 'another', thirdField = 'last' &#123; // ...&#125; 当无法在一行写完集合的时候，把每个元素都用集合定义的方式来表达12345678910mapInsideList([ &#123; 'a': 'b', 'c': 'd' &#125;, &#123; 'a': 'b', 'c': 'd' &#125;,]); 用两个空格来缩进代码块和集合体123456789if (condition) &#123; print('hi'); [ long, list, literal ];&#125; 缩进 switch case 两个空格， case 体四个空格123456789switch (fruit) &#123; case 'apple': print('delish'); break; case 'durian': print('stinky'); break;&#125; 只少使用两个空格来缩进多行函数级联调用1234buffer ..write('Hello, ') ..write(name) ..write('!'); 使用四个空格来缩进同一行的换行12345someLongObject.aReallyLongMethodName(longArg, anotherLongArg, wrappedToNextLine);bobLikes() =&gt; isDeepFried || (hasPieCrust &amp;&amp; !vegan) || containsBacon; 当表达式包含多行函数或者 集合声明定义的时候除外123456789new Future.delayed(const Duration(seconds: 1), () &#123; print('I am a callback');&#125;);args.addAll([ '--mode', 'release', '--checked']); 参考 style © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 34 注解 Metadata","date":"2019-01-21T16:15:56.000Z","path":"2019/01/22/dart/dart-34-metadata/","text":"本节目标 了解内置注解 deprecated override 自定义注解，并使用反射实现 环境 Dart 2.1.0 作用官方称之为 元数据 , 其实在 java 里就是注解 简化代码编写，方便阅读，和重用 内置 deprecated用来注解 不建议使用、老旧的 成员对象 1234567891011121314151617class Television &#123; @deprecated void activate() &#123; turnOn(); &#125; void turnOn() &#123; print('on!'); &#125;&#125;main(List&lt;String&gt; args) &#123; var t = new Television(); t.activate(); t.turnOn();&#125; 内置 override表明你的函数是想覆写超类的一个函数 超类就是被你集成的父类 下面的代码中父类是 Object 1234567891011class A &#123; @override noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125;main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.message();&#125; 内置 proxy注解来避免警告信息 在 Dart2 中已经被标记为过时老旧 1234567891011@proxyclass A &#123; noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125;main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.say();&#125; 自定义注解使用反射可以在运行时获取元数据信息 比如服务端的控制器开发 下面的代码 展示了如何在反射中读取 metadata 信息 123456789101112131415161718192021222324252627282930import 'dart:mirrors';@Todo('seth', 'make this do something')void doSomething() &#123; print('do something');&#125;class Todo &#123; final String who; final String what; const Todo(this.who, this.what);&#125;main(List&lt;String&gt; args) &#123; currentMirrorSystem().libraries.forEach((uri, lib) &#123; // print('lib: $&#123;uri&#125;'); lib.declarations.forEach((s, decl) &#123; // print('decl: $&#123;s&#125;'); decl.metadata.where((m) =&gt; m.reflectee is Todo).forEach((m) &#123; var anno = m.reflectee as Todo; if (decl is MethodMirror) &#123; print('Todo($&#123;anno.who&#125;, $&#123;anno.what&#125;)'); ((decl as MethodMirror).owner as LibraryMirror).invoke(s, []); &#125; ; &#125;); &#125;); &#125;);&#125; 代码 34-媒体信息 参考 metadata © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 33 类型信息 typedef","date":"2019-01-20T16:21:06.000Z","path":"2019/01/21/dart/dart-33-typedef/","text":"本节目标 typedef 使用 环境 Dart 2.1.0 作用typedef 用来保存函数的信息，未来可能会保存类信息。 示例代码 采用 typedef 123456789101112131415161718192021// 定义函数类型typedef int Compare(Object a, Object b);// 定义排序类class SortedCollection &#123; Compare compare; // 构造时传入函数 SortedCollection(this.compare);&#125;// 定义排序函数int sort(Object a, Object b) =&gt; 0;// 程序入口main() &#123; // 实例化传入 SortedCollection coll = new SortedCollection(sort); // 类型检查 assert(coll.compare is Function); assert(coll.compare is Compare);&#125; 未采用 typedef 123456789101112131415161718192021class SortedCollection &#123; // 函数对象 Function compare; // 定义函数 SortedCollection(int f(Object a, Object b)) &#123; compare = f; &#125;&#125;// 生命函数int sort(Object a, Object b) =&gt; 0;main() &#123; // 实例化 SortedCollection coll = new SortedCollection(sort); // 我们只知道 compare 是一个 Function 类型， // 但是不知道具体是何种 Function 类型？ assert(coll.compare is Function);&#125; 区别就是 typedef 编辑器会提示函数信息 代码 33-类型信息 参考 typedefs © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 32 线程隔离 isolate","date":"2019-01-19T16:52:55.000Z","path":"2019/01/20/dart/dart-32-isolates/","text":"本节目标 了解线程隔离 环境 Dart 2.1.0 isolate在Dart中实现并发可以用Isolate，它是类似于线程(thread)但不共享内存的独立运行的worker，是一个独立的Dart程序执行环境。其实默认环境就是一个main isolate。 在Dart语言中，所有的Dart代码都运行在某个isolate中，代码只能使用所属isolate的类和值。不同的isolate可以通过port发送message进行交流。 示意图 ReceivePort 创建入口点 Isolate.spawn 连接进程 SendPort.send 发送消息 echo 例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import 'dart:async';import 'dart:isolate';// 第1步：定义主线程main() async &#123; // 第3步：编写回调Port var receivePort = new ReceivePort(); await Isolate.spawn(echo, receivePort.sendPort); // 第6步：保存隔离线程回调Port var sendPort = await receivePort.first; // 第7步：发送消息 var msg = await sendReceive(sendPort, \"foo\"); print('received $msg'); msg = await sendReceive(sendPort, \"bar\"); print('received $msg');&#125;// 第2步：定义隔离线程的入口点echo(SendPort sendPort) async &#123; // 第4步：编写回调Port var port = new ReceivePort(); // 第5步：告诉主线程回调入口点 sendPort.send(port.sendPort); // 第8步：循环接收消息 await for (var msg in port) &#123; // 数组 msg[0] 是数据 var data = msg[0]; // 数组 msg[1] 是发送方Port SendPort replyTo = msg[1]; // 回传发送方 数据 replyTo.send(data); // 如果数据时 bar 关闭当前回调 if (data == \"bar\") port.close(); &#125;&#125;/*主线程 发送消息函数数组 msg[0] 是数据数组 msg[1] 是发送方Port返回 隔离线程 Port*/Future sendReceive(SendPort port, msg) &#123; ReceivePort response = new ReceivePort(); port.send([msg, response.sendPort]); return response.first;&#125; 代码 32-隔离 参考 isolates © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 31 可调用类 callable","date":"2019-01-16T03:37:26.000Z","path":"2019/01/16/dart/dart-31-callable/","text":"本节目标 定义并执行可定义类 环境 Dart 2.1.0 callable123456789101112main(List&lt;String&gt; args) &#123; var phone = IOSPhone(); phone('911'); // IOSPhone()('911');&#125;class IOSPhone &#123; call(String num) &#123; print('phone number is $num'); &#125;&#125; 代码 可调用类 参考 callable-classes © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 30 - 生成器 Generators","date":"2019-01-15T09:25:58.000Z","path":"2019/01/15/dart/dart-30-generator/","text":"本节目标 同步、异步代码生成器 环境 Dart 2.1.0 同步生成器123456789101112131415main(List&lt;String&gt; args) &#123; var it = naturalsTo(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsTo(int n) sync* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; yield 会等待 moveNext 指令 异步生成器123456789101112131415161718192021222324import 'dart:async';main(List&lt;String&gt; args) &#123; // 流监听 // asynchronousNaturalsTo(5).listen((onData) &#123; // print(onData); // &#125;); // 流监听 StreamSubscription 对象 StreamSubscription subscription = asynchronousNaturalsTo(5).listen(null); subscription.onData((value) &#123; print(value); // subscription.pause(); &#125;);&#125;Stream&lt;int&gt; asynchronousNaturalsTo(int n) async* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; 以流的方式一次性推送 StreamSubscription 对象进行流监听控制 递归生成器12345678910111213main(List&lt;String&gt; args) &#123; var it = naturalsDownFrom(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsDownFrom(int n) sync* &#123; if ( n &gt; 0) &#123; yield n; yield* naturalsDownFrom(n-1); &#125;&#125; yield* 以指针的方式传递递归对象，而不是整个同步对象 代码 生成器 generators 参考 generators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 29 异步 async","date":"2018-12-05T07:51:09.000Z","path":"2018/12/05/dart/dart-29-async/","text":"本节目标 调用异步 等待、递归 异步返回值 环境 Dart 2.1.0 调用异步 回调12345678import 'package:dio/dio.dart';void main() &#123; Dio dio = new Dio(); dio.get(\"https://www.baidu.com\").then((response) &#123; print(response.data); &#125;);&#125; then 的方式异步回调 调用异步 等待1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; async 写在函数定义await 写在异步请求头 异步返回值123456789101112import 'package:dio/dio.dart';void main() async &#123; var content = await getUrl('https://www.baidu.com'); print(content);&#125;Future&lt;String&gt; getUrl(String url) async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(url); return response.data;&#125; 定义 Future&lt;T&gt; 返回对象 代码 异步 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 28 泛型","date":"2018-12-05T03:30:26.000Z","path":"2018/12/05/dart/dart-28-generic/","text":"本节目标 使用泛型 定义泛型 限制泛型 环境 Dart 2.1.0 泛型使用12345678910111213main(List&lt;String&gt; args) &#123; var l = List&lt;String&gt;(); l.add('aaa'); l.add('bbb'); l.add('ccc'); print(l); var m = Map&lt;int, String&gt;(); m[1] = 'aaaa'; m[2] = 'bbbb'; m[3] = 'cccc'; print(m);&#125; 很多的容器对象，在创建对象时都可以定义泛型类型。 泛型函数123456789main(List&lt;String&gt; args) &#123; var key = addCache('a00001', 'val.....'); print(key);&#125;K addCache&lt;K, V&gt;(K key, V val) &#123; print('$&#123;key&#125; $&#123;val&#125;'); return key;&#125; 泛型可以用在一个函数的定义 构造函数泛型123456789main(List&lt;String&gt; args) &#123; var p = Phone&lt;String&gt;('abc00000011111'); print(p.mobileNumber);&#125;class Phone&lt;T&gt; &#123; final T mobileNumber; Phone(this.mobileNumber);&#125; 这是大多数情况下使用泛型的场景，在一个类的构造函数中 泛型限制12345678910111213141516main(List&lt;String&gt; args) &#123; var ad = AndroidPhone(); var p = Phone&lt;AndroidPhone&gt;(ad); p.mobile.startup();&#125;class Phone&lt;T extends AndroidPhone &gt; &#123; final T mobile; Phone(this.mobile);&#125;class AndroidPhone &#123; void startup() &#123; print('Android Phone 开机'); &#125;&#125; 通过 extends 关键字 可以限定你可以泛型使用的类型 代码 泛型 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 27 库","date":"2018-12-05T02:00:54.000Z","path":"2018/12/05/dart/dart-27-library/","text":"本节目标 核心库 外部库 导入模块 环境 Dart 2.1.0 导入核心库1234567import 'dart:io';void main() &#123; var f = new File('README.md'); var content = f.readAsStringSync(); print(content);&#125; 导入第三方库 编写 pubspec.yaml 123name: ducafecatdependencies: dio: 1.0.9 程序调用 1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; 导入文件1234567import './phone.dart';void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125; 前缀123456789101112import './phone.dart';import './phone1.dart' as pp;void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown(); var xm1 = pp.Phone('android'); xm1.startup(); xm1.shutdown();&#125; 筛选包内容12345678// import './phone.dart' hide AndroidPhone;import './phone.dart' show IOSPhone;void main() &#123; var xm = IOSPhone(); xm.startup(); xm.shutdown();&#125; hideo 筛掉某几个包show 只使用某几个包 延迟载入1234567891011import './phone.dart' deferred as pp;void main() async &#123; var run = true; if (run) &#123; await pp.loadLibrary(); var xm = pp.Phone('android'); xm.startup(); xm.shutdown(); &#125;&#125; loadLibrary() 方式在需要的时候载入包可提高程序启动速度用在不常使用的功能用在载入时间过长的包 代码 库 参考 language-tour 包管理平台 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 26 工厂函数","date":"2018-12-04T06:33:01.000Z","path":"2018/12/04/dart/dart-26-factory/","text":"本节目标 工厂函数 工厂构造函数 环境 Dart 2.1.0 工厂函数简化类型实例化 1234567891011121314151617181920212223242526272829303132333435363738void main() &#123; var xm = phoneFactory('ios'); xm.startup(); xm.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;Phone phoneFactory(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('Android Phone 开机'); &#125;&#125;class IOSPhone extends Phone &#123; void startup() &#123; super.startup(); print('IOS Phone 开机'); &#125;&#125; 工厂构造函数12345678910111213141516171819202122232425262728293031323334353637void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125;abstract class Phone &#123; factory Phone(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125; &#125; void startup(); void shutdown();&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('Android Phone 开机'); &#125; void shutdown() &#123; print('Android 关机'); &#125;&#125;class IOSPhone implements Phone &#123; void startup() &#123; print('IOS Phone 开机'); &#125; void shutdown() &#123; print('IOS 关机'); &#125;&#125; 代码 factory 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 25 多继承类 mixin","date":"2018-12-04T03:26:18.000Z","path":"2018/12/04/dart/dart-25-mixin/","text":"本节目标 多继承类的实现方式 函数重名冲突 环境 Dart 2.1.0 类多继承123456789101112131415161718192021222324252627282930313233343536373839404142void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.call(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 采用 with ... , .... , ... 方式 mixin 入多个类功能 函数重名冲突1234567891011121314151617181920212223242526272829303132333435363738394041424344454647void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class QQ &#123; void sms() &#123; print('qq sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin, QQ &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 遇到相同功能的函数，最后载入的会覆盖之前的函数定义 代码 mixin 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 24 extends 继承","date":"2018-11-28T09:45:11.000Z","path":"2018/11/28/dart/dart-24-extends/","text":"本节目标 实现继承 继承抽象类的问题 不可多继承 父类调用 调用父类构造 重写超类函数 环境 Dart 2.0.0 实现继承1234567891011121314151617void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123;&#125; 继承抽象类的问题12345678910111213void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class Phone &#123; void startup(); void shutdown();&#125;class AndroidPhone extends Phone &#123;&#125; 抽象类中只定义抽象函数，实例化访问会报错 父类调用1234567891011121314151617181920void main() &#123; var p = AndroidPhone(); p.startup();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; super 对象可以访问父类 调用父类构造1234567891011121314151617void main() &#123; var p = AndroidPhone(12345678); p.showNumber();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number);&#125; 可调用父类的 构造函数 重写超类函数12345678910111213141516171819202122void main() &#123; dynamic p = AndroidPhone(12345678); p.showNumber111();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number); @override void noSuchMethod(Invocation mirror) &#123; print('被重写 noSuchMethod'); &#125;&#125; 在重写的函数上加修饰符 @override 代码 extends 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 23 interface 接口","date":"2018-11-28T09:23:46.000Z","path":"2018/11/28/dart/dart-23-interface/","text":"本节目标 实现接口 implements 多接口 环境 Dart 2.0.0 Dart 中没有 interface 关键字实现接口12345678910111213141516171819void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class IPhone &#123; void startup(); void shutdown();&#125;class AndroidPhone implements IPhone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; 接口用途的抽象类 请用字母 I 开头 , 如 IPhone 从一个普通类履行接口1234567891011121314151617181920212223void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以从一个普通的类履行接口 履行多接口12345678910111213141516171819202122232425262728void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class Mobile &#123; int signal;&#125;class AndroidPhone implements Phone, Mobile &#123; int signal; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以履行多个接口 代码 interface 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 22 abstract 抽象","date":"2018-11-28T08:17:42.000Z","path":"2018/11/28/dart/dart-22-abstract/","text":"本节目标 抽象 类、函数 接口方式使用 继承方式使用 环境 Dart 2.0.0 abstract 类、函数、成员 普通类前加 abstract 123456abstract class Person &#123; static const String name = 'ducafecat'; void printName()&#123; print(name); &#125;&#125; 不能直接 new 实例化12var p = Person();p.printName(); Dart 2 开始 new 可以不写，提高阅读体验 继承方式使用定义 12class Teacher extends Person &#123;&#125; 实例 12var user = Teacher();user.printName(); 接口方式使用定义 1234567891011abstract class Person &#123; static const String name = ''; void printName();&#125;class Student implements Person &#123; String name = 'this is student'; void printName() &#123; print(name); &#125;&#125; 实例 12var user = Student();user.printName(); 代码 abstract 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 21 静态成员","date":"2018-11-17T08:02:07.000Z","path":"2018/11/17/dart/dart-21-static/","text":"本节目标 静态变量 静态方法 环境 Dart 2.0.0 静态变量static 定义声明 123class People &#123; static String name = 'ducafecat';&#125; 调用 静态变量可以通过外部直接访问,不需要将类实例化 1print(People.name); 函数内部访问实例化后的类也可以访问该静态变量 声明 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(name); &#125;&#125; 调用 12var p = new People();p.show(); 不能用 this因为静态变量实际上存在于类中,而不是实例本身 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(this.name); &#125;&#125; 静态方法静态方法可以通过外部直接访问 声明 123456class People &#123; static String name = 'ducafecat'; static void printName() &#123; print(name); &#125;&#125; 调用 1People.printName(); 总结 实例化后将无法通过外部直接调用 static 成员 静态成员与实例成员是分开的, 静态成员处于类的定义体中, 实例成员处于类的实例中 代码 static.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 20 get set","date":"2018-11-17T07:30:21.000Z","path":"2018/11/17/dart/dart-20-getter-setter/","text":"本节目标 定义、使用、简化 get set 环境 Dart 2.0.0 定义、使用 get setgetter 和 setter 的好处是，你可以开始使用实例变量，后来 你可以把实例变量用函数包裹起来，而调用你代码的地方不需要修改。 定义 1234567891011class People &#123; String _name; set pName(String value) &#123; _name = value; &#125; String get pName &#123; return 'people is $&#123;_name&#125;'; &#125;&#125; 使用 123var p = new People();p.pName = 'ducafecat';print(p.pName); 简化 get set1234567class People &#123; String _name; set pName(String value) =&gt; _name = value; String get pName =&gt; 'people is $&#123;_name&#125;';&#125; 代码 getset.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 19 类","date":"2018-11-17T05:52:30.000Z","path":"2018/11/17/dart/dart-19-class/","text":"本节目标 定义、使用类 构造函数 简化构造 初始化列表 命名构造函数 重定向构造函数 环境 Dart 2.0.0 定义、使用类定义 12class Point &#123;&#125; 使用 1var p = new Point(); 构造函数定义 12345678class Point &#123; num x; num y; Point(num x, num y)&#123; this.x = x; this.y = y; &#125;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 简化构造定义 12345class Point &#123; num x; num y; Point(this.x, this.y);&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 初始化列表定义 123456class Point &#123; num x; num y; var origin; Point(this.x, this.y): origin = &#123;x:x, y:y&#125;;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y, p.origin]); 命名构造函数定义 12345678class Point &#123; num x; num y; Point.fromJson(Map json) &#123; x = json['x']; y = json['y']; &#125;&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 重定向构造函数定义 123456class Point &#123; num x; num y; Point(this.x, this.y); Point.fromJson(Map json) : this(json['x'], json['y']);&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 代码 class.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 18 异常","date":"2018-11-17T02:53:26.000Z","path":"2018/11/17/dart/dart-18-exceptions/","text":"本节目标 错误类型 抛出、捕获 环境 Dart 2.0.0 错误的两种类型Exception 类Exception class 名称 说明 DeferredLoadException 延迟加载错误 FormatException 格式错误 IntegerDivisionByZeroException 整数除零错误 IOException IO 错误 IsolateSpawnException 隔离产生错误 TimeoutException 超时错误 Error 类Error class 名称 说明 AbstractClassInstantiationError 抽象类实例化错误 ArgumentError 参数错误 AssertionError 断言错误 AsyncError 异步错误 CastError Cast 错误 ConcurrentModificationError 并发修改错误 CyclicInitializationError 周期初始错误 FallThroughError Fall Through 错误 JsonUnsupportedObjectError json 不支持错误 NoSuchMethodError 没有这个方法错误 NullThrownError Null 错误错误 OutOfMemoryError 内存溢出错误 RemoteError 远程错误 StackOverflowError 堆栈溢出错误 StateError 状态错误 UnimplementedError 未实现的错误 UnsupportedError 不支持错误 抛出错误12345678// Exception 对象// throw new FormatException('这是一个格式错误提示');// Error 对象// throw new OutOfMemoryError();// 任意对象// throw '这是一个异常'; 捕获错误12345678// try &#123;// // throw new FormatException('这是一个格式错误提示');// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// &#125; catch (e) &#123;// print(e);// &#125; 重新抛出错误12345678// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; Finally 执行12345678910// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; finally &#123;// print('end');// &#125; 代码 exception.dart 参考 language-tour Exception class Error class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 17 流程控制语句","date":"2018-11-12T07:56:51.000Z","path":"2018/11/12/dart/dart-17-controlFlow/","text":"本节目标 条件判断 循环控制 环境 Dart 2.0.0 if else1234bool isPrint = true;if (isPrint) &#123; print('hello');&#125; for123for (var i = 0; i &lt; 5; i++) &#123; print(i);&#125; while12345bool isDone = false;while(!isDone) &#123; print('is not done'); isDone = true;&#125; do while12345bool isRunning = true;do &#123; print('is running'); isRunning = false;&#125; while (isRunning); switch case12345678String name = 'cat';switch (name) &#123; case 'cat': print('cat'); break; default: print('not find');&#125; break12345678num i = 1;while(true) &#123; print('$&#123;i&#125; - run'); i++; if(i == 5) &#123; break; &#125;&#125; continue123456for (var i = 0; i &lt; 5; i++) &#123; if (i &lt; 3) &#123; continue; &#125; print(i);&#125; continue 指定位置1234567891011121314151617String command = \"close\";switch(command) &#123; case \"open\": print(\"open\"); break; case \"close\": print(\"close\"); continue doClose; doClose: case \"doClose\": print(\"DO_CLOSE\"); break; default: print(\"-----\");&#125; 代码 controlFlow.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 16 操作符","date":"2018-11-12T02:41:28.000Z","path":"2018/11/12/dart/dart-16-operators/","text":"本节目标 优先级 算术操作符 相等相关的操作符 类型判定操作符 赋值操作符 逻辑操作符 位和移位操作符 条件表达式 级联操作符 环境 Dart 2.0.0 操作符表 描述 操作符 \b 后缀操作 expr++ expr– () [] . ?. 前缀操作 -expr !expr ~expr ++expr –expr 乘除 * / % ~/ 加减 + - 位移 &lt;&lt; &gt;&gt; 按位与 &amp; 按位异或 ^ 按位或 \\ 类型操作 &gt;= &gt; &lt;= &lt; as is is! 相等 == != 逻辑与 &amp;&amp; 逻辑或 \\ \\ 是为为空 ?? 三目运算 expr1 ? expr2 : expr3 级联 .. 赋值 = *= /= ~/= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= \\ = ??= 优先级顺序 上面左边 优先级高于 右边下面 123if(x == 1 &amp;&amp; y == 2)&#123; ...&#125; 算术操作符 操作符 解释 + 加号 – 减号 -expr 负号 * 乘号 / 除号 ~/ 除号，但是返回值为整数 % 取模 123print(5/2);print(5~/2);print(5 % 2); 相等相关的操作符 操作符 解释 == 相等 != 不等 &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 类型判定操作符 操作符 解释 as 类型转换 is 如果对象是指定的类型返回 True is! 如果对象是指定的类型返回 False 123456int a = 123;String b = 'ducafecat';String c = 'abc';print(a as Object);print(b is String);print(c is! String); 条件表达式 操作符 解释 condition ? expr1 : expr2 如果 condition 是 true，执行 expr1 (并返回执行的结果)； 否则执行 expr2 并返回其结果。 expr1 ?? expr2 如果 expr1 是 non-null，返回其值； 否则执行 expr2 并返回其结果。 1234567bool isFinish = true;String txtVal = isFinish ? 'yes' : 'no';bool isFinish;isFinish = isFinish ?? false;orisFinish ??= false; 位和移位操作符 操作符 解释 &amp; 逻辑与 逻辑或 ^ 逻辑异或 ~expr 取反 &lt;&lt; 左移 &gt;&gt; 右移 级联操作符 操作符 解释 .. 可以在同一个对象上 连续调用多个函数以及访问成员变量。 123456StringBuffer sb = new StringBuffer();sb..write('hello')..write('word')..write('\\n')..writeln('doucafecat'); 其他操作符 操作符 解释 () 使用方法 代表调用一个方法 [] 访问 List 访问 list 中特定位置的元素 . 访问 Member 访问元素，例如 foo.bar 代表访问 foo 的 bar 成员 ?. 条件成员访问 和 . 类似，但是左边的操作对象不能为 null，例如 foo?.bar 如果 foo 为 null 则返回 null，否则返回 bar 成员 12String a;print(a?.length); 代码 operator.dart 参考 operators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 15 函数 Function","date":"2018-11-12T01:36:04.000Z","path":"2018/11/12/dart/dart-15-function/","text":"本节目标 函数定义 可选参数 默认值 命名参数 内部定义 环境 Dart 2.0.0 函数定义123456int add(int x) &#123; return x + 1;&#125;调用add(1); 可选参数123456789101112int add(int x, [int y, int z]) &#123; if (y == null) &#123; y = 1; &#125; if (z == null) &#123; z = 1; &#125; return x + y + z;&#125;调用int(1, 2); 可选参数 默认值123456int add(int x, [int y = 1, int z = 2]) &#123; return x + y;&#125;调用int(1, 2); 命名参数 默认值123456int add(&#123;int x = 1, int y = 1, int z = 1&#125;) &#123; return x + y + z;&#125;调用int(x: 1, y: 2); 函数内定义123456void main()&#123; int add(int x)&#123; return x + x; &#125; print(add(1));&#125; Funcation 返回函数对象1234567Function makeAdd(int x) &#123; return (int y) =&gt; x + y;&#125;调用var add = makeAdd(1);print(add(5)); 代码 function.dart 参考 Functions © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 14 symbol、enum、comments","date":"2018-10-27T03:05:15.000Z","path":"2018/10/27/dart/dart-14-symbol-enum-comments/","text":"本节目标 symbol enum comments 环境 Dart 2.0.0 符号 SymbolDart语言的标识符，在反射中用的很普及，特别是很多发布包都是混淆后的。 123456import 'dart:mirrors';Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); 枚举 Enum适合用在常量定义，类型比较很方便。 123enum Status &#123; none, running, stopped, paused &#125;Status.values.forEach((it) =&gt; print('$it - index: $&#123;it.index&#125;')); 注释 Comments单行注释1// Symbol libraryName = new Symbol('dart.core'); 多行注释12345678/* * Symbol * Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); */ 文档注释12345678/// `main` 函数////// 符号/// 枚举///void main() &#123; ...&#125; 可参考 String 类中的注释使用 代码 symbol-enum-comments.dart 参考 language-tour Symbol © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 13 Runes","date":"2018-10-27T00:51:21.000Z","path":"2018/10/27/dart/dart-13-runes/","text":"本节目标 Runes 基础知识 字符编码 ASCII、Unicode、UTF-8、UTF-16、UTF-32 环境 Dart 2.0.0 RunesRunes 对象是一个 32位 字符对象，用来表示一个字。这样设计也是考虑兼容 UTF-16 四个字节的情况。 length 和 runes.length 比较1234567String a = '👺';print(a.length);print(a.runes.length);&gt;&gt; 输出2 // 标识占 2 个 16 位字符1 // 表示占 1 个 32 位字符 runes 是一个 32 位字符对象 操作 32-bit Unicode 字符123456Runes b = new Runes('\\u&#123;1f596&#125; \\u6211');var c = String.fromCharCodes(b);或者String c = '\\u&#123;1f596&#125; \\u6211' 如果非4个数值，需要用 {…} 返回 16-bit code units 的 codeUnitAt codeUnits1234567var a = '👺';print(a.codeUnitAt(0));print(a.codeUnits);&gt;&gt; 输出55357 // 第 1 位的 10 进制数值[55357, 56442] // 显示 2 位的 10 进制数值 返回 32-bit Unicode 的 runes123456var a = '👺';print(a.runes);&gt;&gt; 输出(128122) // 显示 32 位的 10 进制数值 String 操作整理 名称 说明 codeUnitAt 某个字符的码 10进制 fromCharCodes Runes 转 String 工厂函数 runes 返回字对象 基础知识字符集ASCII ASCII 非 ASCII 中的 GB2312、GBK 汉字内码扩展规范 Unicode、UTF-8、UTF-16、UTF-32 UTF-8 UTF-16 UTF-32 代码 runes.dart 参考 language-tour Runes ASCII Unicode UTF-8 UTF-16 UTF-32 在线字符 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 12 Set","date":"2018-10-25T06:47:10.000Z","path":"2018/10/25/dart/dart-12-set/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 声明Set 是一个元素唯一的有序队列 松散12345678// var a = new Set();// a.add('java');// a.add('php');// a.add('python');// a.add('java');// a.add('sql');// a.add('swift');// a.add('dart'); 强类型12// var b = new Set&lt;String&gt;();// b.addAll(['dart', 'c#', 'j#', 'e#']); 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个 last 最后一个 length 个数 常用方法 名称 说明 addAll 添加 contains 查询单个 containsAll 查询多个 difference 集合不同 intersection 交集 union 联合 lookup 按对象查询到返回对象 remove 删除单个 removeAll 删除多个 clear 清空 firstWhere 按条件正向查询 lastWhere 按条件反向查询 removeWhere 按条件删除 retainAll 只保留几个 retainWhere 按条件只保留几个 1234567891011121314151617181920// b.addAll(['dart', 'c#', 'j#', 'e#']);// print(b.contains('dart'));// print(b.containsAll(['dart', 'swift']));// print('b =&gt; $b');// print(a.difference(b));// print(a.intersection(b));// print(b.lookup('dart'));// print(b.union(a));// b.remove('dart');// b.removeAll(['dart','c#']);// b.clear();// print(b.firstWhere((it) =&gt; it == 'c#'));// print(b.lastWhere((it) =&gt; it == 'c#'));// b.removeWhere((it) =&gt; it == 'c#');// b.retainAll(['e#']);// b.retainWhere((it) =&gt; it == 'e#');// b.retainWhere((it) &#123;// bool ret = it == 'e#';// return ret;// &#125;); 代码 set.dart 参考 language-tour Set © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 11 Map","date":"2018-10-23T07:36:12.000Z","path":"2018/10/23/dart/dart-11-map/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始key value 形式的集合 1var a = &#123;'name': 'ducafecat', 'web': 'www.ducafecat.tech'&#125;; 声明松散1234var a = new Map();a['name'] = 'ducafecat';a['web'] = 'www.ducafecat.tech';a[0] = 'abc'; 强类型123var b = new Map&lt;int, String&gt;();b[0] = 'java';b[1] = 'python'; 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 keys key 集合 values values 集合 length 个数 entries 加工数据入口 123456print(a.isEmpty);print(a.isNotEmpty);print(a.keys);print(a.values);print(a.length);print(a.entries); 常用方法 名称 说明 addAll 添加 addEntries 从入口添加 containsKey 按 key 查询 containsValue 按 value 查询 clear 清空 remove 删除某个 removeWhere 按条件删除 update 更新某个 updateAll 按条件更新 addAll1b.addAll(&#123;'first': 'java', 'second': 'python'&#125;); addEntries1b.addEntries(a.entries); containsKey1print(a.containsKey('name')); containsValue1print(a.containsValue('www.ducafecat.tech')); clear1b.clear(); remove1a.remove('name'); removeWhere1a.removeWhere((key,val) =&gt; key == 'name'); update1a.update('name', (val) =&gt; 'abc'); updateAll1a.updateAll((key, val) =&gt; \"---$val---\"); 操作符 名称 说明 [] 取值 []= 赋值 12print(a['name']);a['name'] = 'abc'; 代码 map.dart 参考 language-tour Map © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 10 列表","date":"2018-10-19T02:49:35.000Z","path":"2018/10/19/dart/dart-10-list/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始List 是一个有序列表 12var l = [1, 2, 3];print(l); 声明自动123456List&lt;int&gt; l = new List();l..add(1)..add(2)..add(3);print(l); 定长123456List&lt;int&gt; l = new List(3);// print(l[0]);l[0] = 1;l[1] = 2;l[2] = 3;print(l); 属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个对象 last 最后一个对象 length 个数 reversed 反转 1234567var l = [1, 2, 3];print(l.first);print(l.last);print(l.length);print(l.isEmpty);print(l.isNotEmpty);print(l.reversed); 方法 名称 说明 add 添加 addAll 添加多个 insert 插入 insertAll 插入多个 indexOf 查询 indexWhere 按条件查询 remove 删除 removeAt 按位置删除 fillRange 按区间填充 getRange 按区间获取 shuffle 随机变换顺序 sort 排序 sublist 创建子 添加12345678List&lt;int&gt; l = new List();l ..add(1) ..addAll([2, 3, 4, 5]) ..insert(0, 6) ..insertAll(6, [6, 6]) ; 查询12print(l.indexOf(5));print(l.indexWhere((it) =&gt; it == 4)); 删除1234l.remove(6);print(l);l.removeAt(5);print(l); Range12l.fillRange(0, 3, 9);print(l.getRange(0, 5)); 洗牌1234l.shuffle();print(l);l.shuffle();print(l); 排序12345678910111213数字l.sort();print(l);日期List&lt;DateTime&gt; dtList = new List();dtList.addAll([ DateTime.now(), DateTime.now().add(new Duration(days: -12)), DateTime.now().add(new Duration(days: -2)) ]);print(dtList);dtList.sort((a, b) =&gt; a.compareTo(b));print(dtList); 复制子列表123print(l);var l2 = l.sublist(1,4);print(l2); 操作符 名称 说明 + 连接 [] 取值 []= 赋值 12345var l1 = [1, 2, 3];var l2 = [4, 5, 6];print(l1 + l2);l1[2] = 9;print(l1[2]); 代码 list.dart 参考 language-tour List © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 09 日期时间","date":"2018-10-18T07:02:05.000Z","path":"2018/10/18/dart/dart-09-datetime/","text":"本节目标 声明 UTC 时间 公元时间 时间戳 解析标准时间 时间运算 环境 Dart 2.0.0 声明1234var now = new DateTime.now();print(now);var d = new DateTime(2018, 10, 10, 9, 30);print(d); 创建时间 UTC UTC 协调世界时 原子时 原子钟 12var d = new DateTime.utc(2018, 10, 10, 9, 30);print(d); 解析时间 IOS 8601 ISO 8601 时区 时区列表 1234var d1 = DateTime.parse('2018-10-10 09:30:30Z');print(d1);var d2 = DateTime.parse('2018-10-10 09:30:30+0800');print(d2); 时间增减量1234var d1 = DateTime.now();print(d1);print(d1.add(new Duration(minutes: 5)));print(d1.add(new Duration(minutes: -5))); 比较时间1234567var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);print(d1.isAfter(d2));print(d1.isBefore(d2));var d1 = DateTime.now();var d2 = d1.add(new Duration(milliseconds: 30));print(d1.isAtSameMomentAs(d2)); 时间差1234var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);var difference = d1.difference(d2);print([difference.inDays, difference.inHours]); 时间戳 公元 123var now = new DateTime.now();print(now.millisecondsSinceEpoch);print(now.microsecondsSinceEpoch); 代码 datetime.dart 参考 language-tour DateTime UTC 协调世界时 原子时 原子钟 ISO 8601 时区 时区列表 公元 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 08 字符串","date":"2018-10-18T05:48:22.000Z","path":"2018/10/18/dart/dart-08-string/","text":"本节目标 声明方式 字符串模板 字符串连接 转义操作 其它常用运算 环境 Dart 2.0.0 单引号或者双引号12String a = 'ducafecat';String b = \"ducafecat\"; 字符串模板123var a = 123;String b = 'ducafecat : $&#123;a&#125;';print(b); 字符串连接123456789101112131415var a = 'hello' + ' ' + 'ducafecat';var a = 'hello'' ''ducafecat';var a = 'hello' ' ' 'ducafecat';var a = 'hello'' ''ducafecat';var a = '''hello wordthis is multi line''';var a = \"\"\"hello wordthis is multi line\"\"\";print(a); 转义符号12var a = 'hello word \\n this is multi line';print(a); 取消转义12var a = r'hello word \\n this is multi line';print(a); 搜索12345var a = 'web site ducafecat.tech';print(a.contains('ducafecat'));print(a.startsWith('web'));print(a.endsWith('tech'));print(a.indexOf('site')); 提取数据1234print(a.substring(0,5));var b = a.split(' ');print(b.length);print(b[0]); 大小写转换12print(a.toLowerCase());print(a.toUpperCase()); 裁剪 判断空字符串12print(' hello word '.trim());print(''.isEmpty); 替换部分字符1print('hello word word!'.replaceAll('word', 'ducafecat')); 字符串创建123456var sb = StringBuffer();sb..write('hello word!')..write('my')..write(' ')..writeAll(['web', 'site', 'https://ducafecat.tech']);print(sb.toString()); 代码 string.dart 参考 language-tour String © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 07 布尔","date":"2018-10-17T09:37:31.000Z","path":"2018/10/17/dart/dart-07-bool/","text":"本节目标 布尔 声明、比较、默认值 断言、asset、isEmpty、isNaN 逻辑操作符 &amp;&amp;、||、! 关系运算符 == != &gt; &gt;= &lt; &lt;= 环境 Dart 2.0.0 声明为了代表布尔值，Dart 有一个名字为 bool 的类型。 只有两个对象是布尔类型的：true 和 false 所创建的对象， 这两个对象也都是编译时常量。 bool 12bool a;print(a); 只有 true 对象才被认为是 true。 所有其他的值都是 flase。 1234String name = 'ducafecat';if(name) &#123; print('this is name');&#125; assert 断言123456789var a = true;assert(a);var name = '';assert(name.isEmpty);assert(name.isNotEmpty);var num = 0 / 0;assert(num.isNaN); 注意： 断言只在检查模式下运行有效，如果在生产模式 运行，则断言不会执行。 逻辑运算符&amp;&amp; 逻辑与123bool a = true;bool b = true;assert(a &amp;&amp; b); || 逻辑或123bool a = true;bool b = false;assert(a || b); ! 逻辑非123bool a = true;bool b = !a;print(b); 关系运算符== 等于1if(a == b) &#123;&#125; != 不等于1if(a != b) &#123;&#125; &gt; 大于1if(a &gt; b) &#123;&#125; &gt;= 大于或等于1if(a &gt;= b) &#123;&#125; &lt; 小于1if(a &lt; b) &#123;&#125; &lt;= 小于或等于1if(a &lt;= b) &#123;&#125; 代码 bool.dart 参考 language-tour bool © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 06 数值","date":"2018-10-16T09:08:33.000Z","path":"2018/10/16/dart/dart-06-number/","text":"本节目标 数值类型 int、double、num 数值表示法 十进制、十六进制 科学计数法 数值转换 位运算 环境 Dart 2.0.0 数值数值类型int整数值，其取值通常位于 -253 和 253 之间。 int class double64-bit (双精度) 浮点数，符合 IEEE 754 标准。 double class numint 和 double 都是 num 的子类。 num class 数值表示法 十进制、十六进制123int a = 1001;int b = 0xABC;print([a, b]); 科学计数法12num a = 21.2e3;print([a]); 数值转换123456789101112131415// string -&gt; int// string -&gt; doubleint a = int.parse('123');double b = double.parse('1.223');// int -&gt; string// double -&gt; stringString a = 123.toString();String b = 1.223.toString();print([a, b]);// double -&gt; intdouble a = 1.8;int b = a.toInt();print(b); 位运算&amp; 与运算同时 1 才行 12341 0 1 0 100 0 1 0 2--------0 0 1 0 2 123var a = 10;var b = 2;print(a &amp; b); | 或运算有一个 1 就行 12341 0 1 0 100 0 1 0 2--------1 0 1 0 10 123var a = 10;var b = 2;print(a | b); 可以用在常量组合 123456const USE_LEFT = 0x1;const USE_TOP = 0x2;const USE_LEFT_TOP = USE_LEFT | USE_TOP;var result = USE_LEFT | USE_TOP;print(result);assert(USE_LEFT_TOP == result); ~ 非运算二进制数逐位进行逻辑非运算 1234560 1 0 0 1 +9 二进制 最高位 0 整数 1 负数0 0 1 1 0 补码1 1 0 0 1 取反1 1 0 1 0 加1--------1 1 0 1 0 -10 12var a = 9;print(~a); ^ 异或不相同的才出 1 12341 0 1 0 100 0 1 0 2--------1 0 0 0 8 123var a = 10;var b = 2;print(a ^ b); 计算机中可以用来取反色 移位运算符&lt;&lt; 左移12340 0 0 1 1 二进制0 0 1 0 左移一位 20 1 0 0 左移一位 41 0 0 0 左移一位 8 向左移动一位 12var a = 1 &lt;&lt; 1;print(a); &gt;&gt; 右移12341 0 0 0 8 二进制0 1 0 0 右移一位 40 0 1 0 右移一位 20 0 0 1 右移一位 1 向右移动一位 12var a = 8 &gt;&gt; 1;print(a); 代码 number.dart 参考 language-tour int class double class num class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 05 常量","date":"2018-10-10T06:49:26.000Z","path":"2018/10/10/dart/dart-05-constant/","text":"本节目标 常量的定义方式 final const 的区别 环境 Dart 2.0.0 定义类型声明可以省略12345final String a = 'ducafecat';final a = 'ducafecat';const String a = 'ducafecat';const a = 'ducafecat'; 初始后不能再赋值12345final a = 'ducafecat';a = 'abc';const a = 'ducafecat';a = 'abc'; 不能和 var 同时使用12final var a = 'ducafecat';const var a = 'ducafecat'; const 赋值 申明可省略12const List ls = const [11, 22, 33];const List ls = [11, 22, 33]; 区别需要确定的值123final dt = DateTime.now();const dt = const DateTime.now(); 不可变性可传递12345final List ls = [11, 22, 33];ls[1] = 44;const List ls = [11, 22, 33];ls[1] = 44; 内存中重复创建1234567final a1 = [11 , 22];final a2 = [11 , 22];print(identical(a1, a2));const a1 = [11 , 22];const a2 = [11 , 22];print(identical(a1, a2)); 代码 constant.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 04 变量的两种类型","date":"2018-10-10T02:18:25.000Z","path":"2018/10/10/dart/dart-04-variables/","text":"本节目标 了解 弱类型 强类型 常见 强类型 有哪些 如何选着何时用那种类型 环境 Dart 2.0.0 弱类型var如果没有初始值，可以变成任何类型 123456var a;a = 'ducafecat';a = 123;a = true;a = &#123;'key': 'val123'&#125;;a = ['abc']; Object动态任意类型，编译阶段检查类型 1234Object a = 'doucafecat';a = 123;a = [2222];a.p(); dynamic动态任意类型，编译阶段不检查检查类型 1234dynamic a = 'doucafecat';a = 123;a = [1111];a.p(); 比较 var 与 dynamic、Object唯一区别 var 如果有初始值，类型被锁定 1234var a = 'ducafecat';dynamic a = 'doucafecat';Object a = 'doucafecat';a = 123; 强类型申明类型声明后，类型被锁定 123String a;a = 'ducafecat';a = 123; 常见类型 名称 说明 num 数字 int 整型 double 浮点 bool 布尔 String 字符串 StringBuffer 字符串 buffer DateTime 时间日期 Duration 时间区间 List 列表 Sets 无重复队列 Maps kv 容器 enum 枚举 123456String a = 'doucafecat';int i = 123;double d = 0.12;bool b = true;DateTime dt = new DateTime.now();List l = [ a, i, d, b, dt]; 默认值一切都是 Object , 变量声明后默认都是 null 1234var a;String a;print(a);assert(a == null); assert 检查点函数，如果不符合条件直接抛出错误并终止程序进程 如何使用 在写 API 接口的时候，请用 强类型，一旦不符合约定，接收数据时能方便排查故障 你在写个小工具时，可以用 弱类型，这样代码写起来很快，类型自动适应 代码 variables.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 03 MacOS 下安装 SDK","date":"2018-09-30T07:41:49.000Z","path":"2018/09/30/dart/dart-03-install-macos/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 MacOS Dart SDK 2.0.0 下载 SDKSDK 列表 archive 下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 解压到磁盘 磁盘位置 ~/Documents/sdk/dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量12345678# 打开配置文件vim ~/.bash_profile# 尾部加入配置export PATH=~/Documents/sdk/dart-sdk/bin:$PATH# 重载配置文件source ~/.bash_profile 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"macos_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 02 Windows 下安装 SDK","date":"2018-09-30T06:41:49.000Z","path":"2018/09/30/dart/dart-02-install-windows/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 Windows 10 Dart SDK 2.0.0 下载 SDKSDK 列表 archive 源下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 解压到磁盘 磁盘位置 C:\\sdk\\dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量 环境变量 PATH 新增 C:\\sdk\\dart-sdk\\bin 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"windows_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 01 前言","date":"2018-09-30T02:00:48.000Z","path":"2018/09/30/dart/dart-01-introduce/","text":"本节目标 为什么学习 Dart 课程计划 如果获取课程资料、代码、视频 2018 Google 开发者大会大会官网 首页简介 bilibili 视频 介绍视频 Flutter官网 Flutter Dart官网 homepage 多平台开发 Platforms 课程计划12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879## 前言## 安装&amp;配置 - Windows## 安装&amp;配置 - MacOS## 变量 - 两种方式## 变量 - 常量## 类型 - 数字## 类型 - Bool## 类型 - 字符串## 类型 - 日期## 类型 - List## 类型 - Map## 类型 - Set## 类型 - Runes## 类型 - Symbol## 类型 - Enum## 注释 - Comments## 函数## 操作符## 流程控制## 异常## 类 - Class## 类 - getter、setter## 类 - 静态变量、方法## 类 - Abstract 抽象类、方法## 类 - Interface 接口## 类 - extends 继承## 类 - mixin 混合## 类 - 工厂构造函数## 类库 - Libraries## 泛型 - Generics## 异步 - Asynchrony## 生成器 - Generators## 可调用 - Callable## 隔离 - Isolate## 类型定义 - Typedef## 注解 - Metadata## 代码规范 - 代码风格## 代码规范 - 文档注释## 代码规范 - 最佳实践## 代码规范 - 设计指南 课程资料主站 https://ducafecat.tech资料 视频 youtube 优酷 文档 \b代码 参考 Dart 官网 Flutter 官网 2018 Google 开发者大会 bilibili © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]}]