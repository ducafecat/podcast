[{"title":"Flutter开源项目 - 加密币客户端 flutter-crypto-app","date":"2021-05-31T16:00:00.000Z","path":"2021/06/01/flutter-opensource/flutter-crypto-app/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat猫哥说节日好伙伴们，今天这个项目推荐给大家，主要是用了 Riverpod 状态管理，Freezed 代码生成器, Flutter 2.2 空安全 还有就是 写了 单元测试 集成测试 Github Action，大家可以学习下。 代码https://github.com/salvadordeveloper/flutter-crypto-app 参考 https://pub.flutter-io.cn/packages/get#reactive-state-manager https://dart.dev/guides/language/extension-methods 正文特性功能 API REST (CryptoWatch) restful 拉取数据 Linear Graph View (Hour, Day, Week, etc) 图 OHLC Graph 图 Search 搜索 Light / Dark Theme 样式主题 Multi Lenguage 多语言 Exchange Selection 交易 Favorite Pair 收藏 技术栈 Flutter 2.2.0 Riverpod + Hooks 状态管理 Freezed 代码生成器 Dio http 通讯 测试 Unit Testing (flutter_test) Integration Testing (integration_test) Mock Data (http_mock_adapter) Github Actions (iOS &amp; Android Integration Test) 屏幕截图 项目安装下载代码 1git clone https://github.com/salvadordeveloper/flutter-crypto-app 安装包 1flutter pub get 去申请 https://cryptowat.ch/zh-cn/ 账号 api 替换 API_KEY 1API_KEY=&#123;CryptoWatch_KEY&#125; 生成代码 1flutter pub run build_runner build --delete-conflicting-outputs 运行 app 1flutter run 单元测试 1flutter test 集成测试 1flutter drive --driver=test_driver/integration_test.dart --target=integration_test/main_test.dart 参考 https://flutter.dev/docs https://riverpod.dev/docs/getting_started/ https://docs.cryptowat.ch/rest-api/ © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"在 Flutter 中编写自定义小部件(第1部分)ー EllipsizedText","date":"2021-05-30T16:00:00.000Z","path":"2021/05/31/translation/writing-custom-widgets-in-flutter-part-1-ellipsizedtext/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://rlesovyi.medium.com/writing-custom-widgets-in-flutter-part-1-ellipsizedtext-a0efdc1368a8 代码https://github.com/MatrixDev/Flutter-CustomWidgets 正文 声明式用户界面在 Flutter 是相当不错，易于使用，它是非常诱人的使用尽可能。但是很多时候，开发人员只是做得太过火了ーー用声明的方式编写所有东西，即使有时候任务可以以更强制性的方式更有效、更容易理解。 每个人都应该明白的—- 在陈述和命令式编程之间必须有一个平衡。每种方法都有自己的用途，每种方法在某些任务上都比其他方法更加出色。 在本系列文章中，我将描述如何通过从头创建自定义小部件来解决不同的问题。每一个都比前一个稍微复杂一点。 思考在查看代码之前，我们需要知道一些基本的事情。 Widget ー只是一个不可变的(最好是 const)类，它包含 Elements 和 RenderObjects 的配置属性。它还负责创建上述元素和渲染对象。需要理解的重要事情ー小部件从不包含状态或任何业务逻辑，只是传递它们。 元素ー是负责实际 UI 树的实体。它包含对所有子元素的引用，以及(不像 Widget)对其父元素的引用。元素在大多数情况下都会被重用，除非键或小部件被更改。因此，如果 onlyWidget 属性被更改，即使分配了新的 Widget，Element 也将保持不变。 State ー只不过是 Element 内部的一个用户定义类，它还公开了一些来自它的回调。 RenderObject ーー负责实际尺寸的计算、子元素的放置、绘制、触摸事件的处理等。这些对象与 Android 或其他框架的经典视图非常相似。 为什么我们同时拥有元素和渲染对象？因为效率高。每个小部件都有各自的元素，但只有一些有渲染对象。由于这一点，很多布局，触摸和其他层次遍历调用可以省略。 代码第一个例子是一个非常简单的小部件，它在文本不适合时用省略号缩放文本。为什么我们需要这样一个小部件时，内置的文本已经省略号支持你可能会问？答案很简单—- 到目前为止，它只是通过文字而不是字符来表达 https://github.com/flutter/flutter/issues/18761。所以如果你有一个非常长的单词在结尾ー大多数时候你只能看到这个单词的前几个字母，即使有足够的空间去填充。 那么，我们开始吧。Flutter 有许多内置的基类和 mixin，它们将帮助构建完全自定义的小部件。以下是其中的一些: LeafRenderObjectWidget 没有 child SingleChildRenderObjectWidget 一个 child MultiChildRenderObjectWidget 多个 child 在我们的例子中，我们将使用 LeafRenderObjectWidget，因为我们只需要渲染文本，并且不会有子节点: 123456789101112131415161718192021222324enum Ellipsis &#123; start, middle, end &#125;class EllipsizedText extends LeafRenderObjectWidget &#123; final String text; final TextStyle? style; final Ellipsis ellipsis; const EllipsizedText( this.text, &#123; Key? key, this.style, this.ellipsis = Ellipsis.end, &#125;) : super(key: key); @override RenderObject createRenderObject(BuildContext context) &#123; return RenderEllipsizedText()..widget = this; &#125; @override void updateRenderObject(BuildContext context, RenderEllipsizedText renderObject) &#123; renderObject.widget = this; &#125;&#125; 我们创建了我们的 Widget，唯一不同寻常的是有两种方法: createRenderObject — 负责实际创建我们的 RenderObject updateRenderObject — 当 Widget 的数据发生变化但 RenderObject 保持不变时，将调用 updateRenderObject ー。在这种情况下，我们需要更新 RenderObject 中的数据，否则它将呈现旧文本 我还需要注意，将每个值从小部件复制到 RenderObject 是首选的。但是我会通过整个 Widget，因为不管怎样它们都是不可变的(而且我懒得编写所有的样板代码)。 现在让我们从实际的渲染对象开始: 123456789101112131415class RenderEllipsizedText extends RenderBox &#123; var _widgetChanged = false; var _widget = const EllipsizedText(''); set widget(EllipsizedText widget) &#123; if (_widget.text == widget.text &amp;&amp; _widget.style == widget.style &amp;&amp; _widget.ellipsis == widget.ellipsis) &#123; return; &#125; _widgetChanged = true; _widget = widget; markNeedsLayout(); &#125;&#125; 在这里，我们定义了所有的变量，并编写了一个 setter 来实际更新它们。还有一个检查值是否实际发生了更改的防护措施ー如果没有更改，则没有必要重新计算省略号和重绘文本。 现在我们需要布局渲染对象。 12345678910111213141516171819class RenderEllipsizedText extends RenderBox &#123; // ... var _constraints = const BoxConstraints(); @override void performLayout() &#123; if (!_widgetChanged &amp;&amp; _constraints == constraints &amp;&amp; hasSize) &#123; return; &#125; _widgetChanged = false; _constraints = constraints; size =_ellipsize( minWidth: constraints.minWidth, maxWidth: constraints.maxWidth, ); &#125;&#125; 布局的过程相当简单。所有我们需要做的ー根据提供给我们的约束计算渲染对象的大小。约束只描述我们必须遵守的最小和最大规模。另外，如果没有任何变化，并且在以前的布局传递过程中已经计算了大小，则添加额外的检查。 实际创建省略号文本的过程相当繁琐，而且肯定有更好的解决方案，但我选择使用二进制搜索来寻找最佳匹配。 12345678910111213141516171819202122232425class RenderEllipsizedText extends RenderBox &#123; // ... final _textPainter = TextPainter(textDirection: TextDirection.ltr); Size _ellipsize(&#123;required double minWidth, required double maxWidth&#125;) &#123; final text = _widget.text; if (_layoutText(length: text.length, minWidth: minWidth) &gt; maxWidth) &#123; var left = 0; var right = text.length - 1; while (left &lt; right) &#123; final index = (left + right) ~/ 2; if (_layoutText(length: index, minWidth: minWidth) &gt; maxWidth) &#123; right = index; &#125; else &#123; left = index + 1; &#125; &#125; _layoutText(length: right - 1, minWidth: minWidth); &#125; return constraints.constrain(Size(_textPainter.width, _textPainter.height)); &#125;&#125; 我不会讲完所有这些逻辑(如果你愿意，你可以通过它来阅读)。但是重要的是 TextPainter 是用来计算文本大小的。如果文本大小长于我们的约束，我会尽量使它越来越短，直到它符合我们的约束。 _layoutText 用来计算我们裁剪后的文本大小: 12345678910111213141516171819202122232425262728293031323334353637383940double _layoutText(&#123;required int length, required double minWidth&#125;) &#123; final text = _widget.text; final style = _widget.style; final ellipsis = _widget.ellipsis; String ellipsizedText = ''; switch (ellipsis) &#123; case Ellipsis.start: if (length &gt; 0) &#123; ellipsizedText = text.substring(text.length - length, text.length); if (length != text.length) &#123; ellipsizedText = '...' + ellipsizedText; &#125; &#125; break; case Ellipsis.middle: if (length &gt; 0) &#123; ellipsizedText = text; if (length != text.length) &#123; var start = text.substring(0, (length / 2).round()); var end = text.substring(text.length - start.length, text.length); ellipsizedText = start + '...' + end; &#125; &#125; break; case Ellipsis.end: if (length &gt; 0) &#123; ellipsizedText = text.substring(0, length); if (length != text.length) &#123; ellipsizedText = ellipsizedText + '...'; &#125; &#125; break; &#125; _textPainter.text = TextSpan(text: ellipsizedText, style: style); _textPainter.layout(minWidth: minWidth, maxWidth: double.infinity); return _textPainter.width;&#125; 差不多就是这样了，我们剩下要做的就是——实际上画出我们的文本。 1234@overridevoid paint(PaintingContext context, Offset offset) &#123; _textPainter.paint(context.canvas, offset);&#125; © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"flutter 启动屏幕使用 Lottie 动画","date":"2021-05-26T16:00:00.000Z","path":"2021/05/27/translation/how-to-use-lottie-animation-in-your-flutter-splash-screen/","text":"猫哥说因为出差关系来了重庆，很美的一个城市，走在街道上感觉就是在爬山，生活节奏相对比较慢，希望疫情远离我们。 感谢群里重庆好友能抽时间出来聚会。 正题开始 lottie 是一个夸平台的动画库，用这个可以做出酷炫动画。 其实作为一个前端还是要稍微会一点点美术、动画、几何数学。 https://lottiefiles.com/ https://github.com/airbnb/lottie-web 老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://mamuseferha.medium.com/how-to-use-lottie-animation-in-your-flutter-splash-screen-788f1380641d 代码https://github.com/debbsefe/Lottie-Animation-Splash-Screen 参考 https://lottiefiles.com/ https://github.com/airbnb/lottie-web https://github.com/debbsefe/Lottie-Animation-Splash-Screen 正文在构建移动应用程序时，启动画面非常常见。它们通常是在应用程序开始时显示的静态屏幕。这个屏幕可以帮助你告诉你的用户应用程序是关于什么的，通过显示你的应用程序标志或应用程序名称。 如果你想更进一步，真正吸引用户的注意力，可以考虑在启动画面上使用动画图片。使用 Lottie 显示一个动画图像就像在你的应用程序中使用 Image 小部件一样简单。 开始首先，创建一个新的 flutter 项目。 1flutter pub add lottie 通过粘贴以下代码创建启动画面小部件。 12345678910111213141516171819202122232425262728293031323334353637383940class SplashScreen extends StatefulWidget &#123; const SplashScreen(&#123;Key key&#125;) : super(key: key); @override _SplashScreenState createState() =&gt; _SplashScreenState();&#125;class _SplashScreenState extends State&lt;SplashScreen&gt; with TickerProviderStateMixin &#123; AnimationController _controller; @override void initState() &#123; super.initState(); _controller = AnimationController( duration: Duration(seconds: (5)), vsync: this, ); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( body: Lottie.asset( 'assets/splash_lottie.json', controller: _controller, height: MediaQuery.of(context).size.height * 1, animate: true, onLoaded: (composition) &#123; _controller ..duration = composition.duration ..forward().whenComplete(() =&gt; Navigator.pushReplacement( context, MaterialPageRoute(builder: (context) =&gt; HomePage()), )); &#125;, ), ); &#125;&#125; Splash screen 小部件是一个有状态小部件，它在其 build 方法中保存 Lottie 文件。动画控制器在 initState 中创建，并在控制器属性中使用。 若要在动画完成后导航到下一个页面，请使用带有 LottieComposition 的 onLoaded 回调。这允许您有更多的信息和控制的 Lottie 文件。 1234567onLoaded: (composition) &#123; _controller ..duration = composition.duration ..forward().whenComplete(() =&gt; Navigator.pushReplacement( context, MaterialPageRoute(builder: (context) =&gt; HomePage()),)); &#125;, 动画完成后，导航到下一页。 我在代码中添加了一个启动画面导航到的主页小部件。 12345678class HomePage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( body: Center(child: Text('Homepage')), ); &#125;&#125; 以 scaffold 为中心的简单文本小部件。 现在你可以继续为你的用户创建更具视觉吸引力的应用了。 不要忘记将 Lottie 文件作为资产添加到 pubspec.yaml 中，否则，动画将不会显示。你也可以在 GitHub 上找到完整的项目。 https://github.com/debbsefe/Lottie-Animation-Splash-Screen © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Dart 集合操作插件 DartX","date":"2021-05-24T22:13:25.000Z","path":"2021/05/25/translation/dart-collections-with-dartx-extensions/","text":"本次图片是向 kallehallden 致敬，热爱编程，保持一颗好奇的心 老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat猫哥说最近没时间录视频，一直在做项目和技术研究，就翻译和写写文章和大家分享。 关于这篇文章，我只想说一切让我们少写代码，让代码简洁的方式都是好东西！ 也许这个组件 dartx 在某些人眼里不够成熟，但是这代表了一种思路，你应该去借鉴。 原文 https://medium.com/flutter-community/dart-collections-with-dartx-extensions-959a0b42849e 参考 https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/linq-to-objects https://pub.dev/packages/dartx 正文Darts Iterable 和 List 提供了一组基本的方法来修改和查询集合。然而，来自 c # 背景，它有一个非凡的 LINQ-to-Objects 库，我觉得我日常使用的一部分功能缺失了。当然，任何任务都可以只使用 dart.core 方法来解决，但有时需要多行解决方案，而且代码不是那么明显，需要花费精力去理解。我们都知道，开发人员花费大量时间阅读代码，使代码简洁明了是至关重要的。 Dartx 包允许开发人员在集合(和其他 Dart 类型)上使用优雅且可读的单行操作。 https://pub.dev/packages/dartx 下面我们将比较这些任务是如何解决的: first / last collection item or null / default value / by condition; map / filter / iterate collection items depending on their index; converting a collection to a map; sorting collections; collecting unique items; min / max / average by items property; filtering out null items; 安装 dartx pubspec.yaml12dependencies: dartx: ^0.7.1 1import 'package:dartx/dartx.dart'; First / last collection item…… or null为了得到第一个和最后一个收集项目的简单省道，你可以这样写: 12final first = list.first;final last = list.last; 如果 list 为空，则抛出 statereerror，或者显式返回 null: 12final firstOrNull = list.isNotEmpty ? list.first : null;final lastOrNull = list.isNotEmpty ? list.last : null; 使用 dartx 可以: 12final firstOrNull = list.firstOrNull;final lastOrNull = list.lastOrNull; 类似地: 1final elementAtOrNull = list.elementAtOrNull(index); 如果索引超出列表的界限，则返回 null。 … or default value鉴于你现在记住这一点。第一和。当 list 为空时，last getter 会抛出错误，以获取第一个和最后一个集合项或默认值，在简单的 Dart 中，你会写: 123final firstOrDefault = (list.isNotEmpty ? list.first : null) ?? defaultValue;final lastOrDefault = (list.isNotEmpty ? list.last : null) ?? defaultValue; 使用 dartx 可以: 123final firstOrDefault = list.firstOrDefault(defaultValue);final lastOrDefault = list.lastOrElse(defaultValue); 类似于 elementAtOrNull: 1final elementAtOrDefault = list.elementAtOrDefault(index, defaultValue); 如果索引超出列表的边界，则返回 defaultValue。 … by condition要获取第一个和最后一个符合某些条件或 null 的集合项，一个普通的 Dart 实现应该是: 123final firstWhere = list.firstWhere((x) =&gt; x.matches(condition));final lastWhere = list.lastWhere((x) =&gt; x.matches(condition)); 除非提供 orElse，否则它将为空列表抛出 StateError: 123final firstWhereOrNull = list.firstWhere((x) =&gt; x.matches(condition), orElse: () =&gt; null);final lastWhereOrNull = list.lastWhere((x) =&gt; x.matches(condition), orElse: () =&gt; null); 使用 dartx 可以: 123final firstWhereOrNull = list.firstOrNullWhere((x) =&gt; x.matches(condition));final lastWhereOrNull = list.lastOrNullWhere((x) =&gt; x.matches(condition)); … collection items depending on their indexMap…当您需要获得一个新的集合，其中每个项目以某种方式依赖于其索引时，这种情况并不罕见。例如，每个新项都是来自原始集合的项及其索引的字符串表示形式。 如果你喜欢我的一句俏皮话，简单地说就是: 1234final newList = list.asMap() .map((index, x) =&gt; MapEntry(index, '$index $x')) .values .toList(); 使用 dartx 可以: 1final newList = list.mapIndexed((index, x) =&gt; '$index $x').toList(); 我应用.toList ()是因为这个和大多数其他扩展方法返回 lazy Iterable。 Filter…对于另一个示例，假设只需要收集奇数索引项。使用简单省道，可以这样实现: 123456final oddItems = [];for (var i = 0; i &lt; list.length; i++) &#123; if (i.isOdd) &#123; oddItems.add(list[i]); &#125;&#125; 或者用一行代码: 12345final oddItems = list.asMap() .entries .where((entry) =&gt; entry.key.isOdd) .map((entry) =&gt; entry.value) .toList(); 使用 dartx 可以: 12345final oddItems = list.whereIndexed((x, index) =&gt; index.isOdd).toList();// orfinal oddItems = list.whereNotIndexed((x, index) =&gt; index.isEven).toList(); Iterate…如何记录集合内容并指定项目索引？ In plain Dart: 123for (var i = 0; i &lt; list.length; i++) &#123; print('$i: $&#123;list[i]&#125;');&#125; 使用 dartx 可以: 1list.forEachIndexed((element, index) =&gt; print('$index: $element')); Converting a collection to a map例如，需要将不同 Person 对象的列表转换为 Map &lt; String，Person &gt; ，其中键是 Person.id，值是完整 Person 实例。 1final peopleMap = people.asMap().map((index, person) =&gt; MapEntry(person.id, person)); 使用 dartx 可以: 12345final peopleMap = people.associate((person) =&gt; MapEntry(person.id, person));// orfinal peopleMap = people.associateBy((person) =&gt; person.id); 要得到一个 Map，其中键是 DateTime，值是列出那天出生的人的名单 &lt; person &gt; ，在简单的 Dart 中，你可以写: 12345678910final peopleMapByBirthDate = people.fold&lt;Map&lt;DateTime, List&lt;Person&gt;&gt;&gt;( &lt;DateTime, List&lt;Person&gt;&gt;&#123;&#125;, (map, person) &#123; if (!map.containsKey(person.birthDate)) &#123; map[person.birthDate] = &lt;Person&gt;[]; &#125; map[person.birthDate].add(person); return map; &#125;,); 使用 dartx 可以: 1final peopleMapByBirthDate = people.groupBy((person) =&gt; person.birthDate); Sorting collections你会怎样用普通的 dart 来分类一个收集? 你必须记住这一点 1list.sort(); 修改源集合，要得到一个新实例，你必须写: 1final orderedList = [...list].sort(); Dartx 提供了一个扩展来获得一个新的 List 实例: 12345final orderedList = list.sorted();// andfinal orderedDescendingList = list.sortedDescending(); 如何基于某些属性对收集项进行排序？ Plain Dart: 12final orderedPeople = [...people] ..sort((person1, person2) =&gt; person1.birthDate.compareTo(person2.birthDate)); 使用 dartx 可以: 12345final orderedPeople = people.sortedBy((person) =&gt; person.birthDate);// andfinal orderedDescendingPeople = people.sortedByDescending((person) =&gt; person.birthDate); 更进一步，你可以通过多个属性对集合项进行排序: 123456789final orderedPeopleByAgeAndName = people .sortedBy((person) =&gt; person.birthDate) .thenBy((person) =&gt; person.name);// andfinal orderedDescendingPeopleByAgeAndName = people .sortedByDescending((person) =&gt; person.birthDate) .thenByDescending((person) =&gt; person.name); Collecting unique items要获得不同的集合项，可以使用以下简单的 Dart 实现: 1final unique = list.toSet().toList(); 这并不保证保持项目顺序或提出一个多行的解决方案 使用 dartx 可以: 12345final unique = list.distinct().toList();// andfinal uniqueFirstNames = people.distinctBy((person) =&gt; person.firstName).toList(); Min / max / average by item property例如，要查找一个 min/max 集合项，我们可以对其进行排序，并获取 first/last 项: 123final min = ([...list]..sort()).first;final max = ([...list]..sort()).last; 同样的方法也适用于按项属性进行排序: 123final minAge = (people.map((person) =&gt; person.age).toList()..sort()).first;final maxAge = (people.map((person) =&gt; person.age).toList()..sort()).last; 或: 12345final youngestPerson = ([...people]..sort((person1, person2) =&gt; person1.age.compareTo(person2.age))).first;final oldestPerson = ([...people]..sort((person1, person2) =&gt; person1.age.compareTo(person2.age))).last; 使用 dartx 可以: 123final youngestPerson = people.minBy((person) =&gt; person.age);final oldestPerson = people.maxBy((person) =&gt; person.age); 对于空集合，它将返回 null。 如果收集项目实现了 Comparable，则可以应用不带选择器的方法: 123final min = list.min();final max = list.max(); 你也可以很容易地得到平均值: 12345final average = list.average();// andfinal averageAge = people.averageBy((person) =&gt; person.age); 以及 num 集合或 num 项属性的总和: 12345final sum = list.sum();// andfinal totalChildrenCount = people.sumBy((person) =&gt; person.childrenCount); Filtering out null itemsWith plain Dart: 1final nonNullItems = list.where((x) =&gt; x != null).toList(); 使用 dartx 可以: 1final nonNullItems = list.whereNotNull().toList(); More useful extensions在 dartx 中还有其他有用的扩展。这里我们不会深入讨论更多细节，但是我希望命名和代码是不言自明的。 joinToString123456final report = people.joinToString( separator: '\\n', transform: (person) =&gt; '$&#123;person.firstName&#125;_$&#123;person.lastName&#125;', prefix: '&lt;&lt;️', postfix: '&gt;&gt;',); all (every) / none123final allAreAdults = people.all((person) =&gt; person.age &gt;= 18);final allAreAdults = people.none((person) =&gt; person.age &lt; 18); first / second / third / fourth collection items1234final first = list.first;final second = list.second;final third = list.third;final fourth = list.fourth; takeFirst / takeLast123final youngestPeople = people.sortedBy((person) =&gt; person.age).takeFirst(5);final oldestPeople = people.sortedBy((person) =&gt; person.age).takeLast(5); firstWhile / lastWhile123456789final orderedPeopleUnder50 = people .sortedBy((person) =&gt; person.age) .firstWhile((person) =&gt; person.age &lt; 50) .toList();final orderedPeopleOver50 = people .sortedBy((person) =&gt; person.age) .lastWhile((person) =&gt; person.age &gt;= 50) .toList(); 总结Dartx 包包含了许多针对 Iterable、 List 和其他 Dart 类型的扩展。探索其功能的最佳方式是浏览源代码。 https://github.com/leisim/dartx 感谢软件包作者 Simon Leier 和 Pascal Welsch。 https://www.linkedin.com/in/simon-leier/ https://twitter.com/passsy © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"使用 Flutter WEB 实现桌面 GUI 第1部分 介绍","date":"2021-05-23T16:00:00.000Z","path":"2021/05/24/translation/desktop-gui-implementation-using-flutter-web-part-1-introduction/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://achraf-feydi.medium.com/desktop-gui-implementation-using-flutter-web-part-1-introduction-42d21a6e7937 演示https://www.fluttergui.com/ 代码https://github.com/achreffaidi/FlutterGUI 参考 https://pub.dev/packages/flutter_treeview https://pub.dev/packages/reorderables https://pub.dev/packages/video_player https://pub.dev/packages/flutter_simple_calculator https://pub.dev/packages/photo_view https://pub.dev/packages/maze https://pub.dev/packages/flutter_widget_from_html_core https://pub.dev/packages/native_pdf_view https://pub.dev/packages/painter 正文Why FlutterGUI?作为 flutter2 的一部分，flutter 已经宣布，flutter 的网络支持已达到稳定的里程碑。 这不仅意味着我终于可以停止编写 HTML 和 CSS 代码，而且我现在可以拥有一个可以在几乎所有流行平台上运行的应用程序。 我对 Flutter Web 的稳定版本并没有太多期待，因为我已经尝试了 Beta 版，而且大多数插件都没有足够的支持。但是回到两周前，我对目前支持 WEB 的插件的数量感到惊讶。 这促使我去尝试一些有挑战性的东西，创建一个桌面图形用户界面使用颤振网络作为我的新的投资组合网站。 坦率地说，这个项目本身并不是什么有用的东西，它不是在解决问题，而且很可能也不是我下一个十亿美元的想法。但是，这是最好的方式来发现的优势和局限性颤振网络使用在一个网络项目。说实话，我想我至少要花两个月的时间来发布第一个版本。 在这个项目上花了两个星期的时间，每晚工作两个小时左右，我最终得到了一些真正值得出版的东西。 尽管我没有阅读任何文档，也没有像平时那样频繁地用谷歌搜索东西，但我还是对这种简单流畅的体验感到惊讶。从使用 Flutter 手机开发到网络的转变真的很简单，而且我在这个项目中学到的关于网络开发的知识并不需要使用任何东西。 Technical overview Project 现在有 8 个应用程序运行在它里面，正如你已经猜到的: 它是所有的小部件。 大多数应用程序是现有的颤振插件，包装在我创建的通用应用部件内部。 这个码头是从零开始建造的，因为我找不到一个能满足我需要的现有码头。 项目没有后端，Flutter Web 应用程序托管在 Github 页面上。 我正在使用 Firebase 分析跟踪用户的互动与应用程序。 Apps 文件管理器: 用 flutter_treeview 颤振树景 and 及 reorderables 可调整的 plugins. 插件 https://pub.dev/packages/flutter_treeview https://pub.dev/packages/reorderables 视频播放器: 使用 video_player 视频播放器 plugin. 插件 https://pub.dev/packages/video_player 计算器: 使用 flutter_simple_calculator 简单计算器 plugin. 插件 https://pub.dev/packages/flutter_simple_calculator 照片: 使用 photo_view 照片查看 plugin. 插件 https://pub.dev/packages/photo_view 游戏: 使用 Maze 梅兹 plugin. 插件 https://pub.dev/packages/maze 阅读器: 使用 flutter_widget_from_html_core 从 html 核心 plugin. 插件 https://pub.dev/packages/flutter_widget_from_html_core PDF 阅读器: 使用 native_pdf_view 本地 pdf 查看 plugin. 插件 https://pub.dev/packages/native_pdf_view 画家: 使用 painter 画家 plugin. 插件 https://pub.dev/packages/painter © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"在 Dart 和 Flutter 中探索异步编程","date":"2021-05-20T16:00:00.000Z","path":"2021/05/21/translation/exploring-asynchronous-programming-in-dart-flutter/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://medium.com/flutterdevs/exploring-asynchronous-programming-in-dart-flutter-25f341af32f 正文 异步编程是一种相等的编程类型，它允许一个工作单元独立于基本的应用程序线程运行。当工作完成时，它告诉主线程。在 Flutter 结构中可访问的 UI 小部件利用 Dart 的异步编程亮点来达到非同寻常的效果，帮助保持代码的协调性，并防止 UI 在客户端上的安全性。 在这个博客中，我们将探索在 Dart &amp; Flutter 中的异步编程。我们将看看异步代码模式如何帮助准备用户交互和从网络恢复数据，并在您的 Flutter 应用程序中看到几个异步 Flutter 小部件的行动。 异步编程它是一种在编程周期中附加在事件链上的相等执行类型。对于那些刚刚接触异步编程的人来说，这是另一种加速改进周期的技术。尽管如此，我们不能在所有实例上使用异步编程。当你在寻找直率而不是生产力的时候，它是有效的。为了处理基本的、自治的信息，异步编程是一个非同寻常的决定。 various perspectives 是理想的对应物 Flutter 从各种角度，在任何事件，为异步编程。即使 Dart 是单线程的，它也可以与不同的代码相关联，这些代码运行在不连续的线程中。使用 Dart 中的同步代码会造成延迟并阻碍整个程序的执行。尽管如此，异步编程解决了这个问题。此外，这提示改进了应用程序的执行和应用程序的响应性。 为什么我们应该使用异步编程面是异步编程的一些应用: 改善工作表现及提高工作效率 反应性. 你的应用程序，特别是当你有长期运行的活动，不需要阻止执行。对于这种情况，您可以在等待长期任务的结果的同时执行其他工作 以一种完美的、易于理解的方式组装代码，从根本上比传统线程创建的标准代码更好，并且更好地处理代码，你编写更少的代码，你的代码将比利用过去的异步编程策略，如利用纯赋值更可行 您可以使用语言高亮部分的最新升级，如 async / await was presented in a flutter. 在一阵颤动中显现出来 对元素进行了一些改进，比如对每个 async 进行了改进，对 async 类型进行了总结，比如 Value. Future未来的工作方式基本上与 Javascript 中的 Promise 相同。它有两个表达是未完成和已完成。完成的未来要么有价值，要么有错误。未完成的未来是等待函数的异步活动完成或抛出错误。 这个类有几个构造函数: Future. 意味着将 Duration 对象作为展示延迟后执行的时间跨度和函数的竞争对象 编码内存缓存意味着在内存中以原始状态存储压缩图片 Future. 意味着使未来以错误结束 使用 Await/AsyncDart 中的异步和等待方法基本上与不同的方言相同，但是，不管您是否对异步编程利用异步/等待有所了解，您都应该认为在这里很容易理解。 =&gt; Async 函数: 函数构成了异步编程的基础。这些异步函数的主体中有异步修饰符。下面是一个关于综合异步工作的例子: 123void flutter() async &#123; print('Flutter Devs');&#125; =&gt; Await 表达式: 它使您编写异步代码就像它是同步的一样。总而言之，等待发音具有下面给出的结构: 1234void main() async &#123; await flutter(); print('flutter Devs done');&#125; 用户交互事件也许异步处理用户输入的最简单模型是用回调来响应按钮小部件上的连接事件: 123456FlatButton( child: Text(\"Data\"), onPressed: () &#123; print(\"pressed button\"); &#125;,) 和大多数 Flutter 组件一样，FlatButton 组件提供了一个舒适的界面，称为 onPressed，用于响应速度快的按钮。在这里，我们已经将一个神秘的回调容量传递给了边界，它除了向控制台打印消息之外什么也不做。当客户端按下 catch 时，onPressed 事件被关闭，当偶然循环可以到达时，将执行未知函数。 在后台，有一个事件流，每次向其添加另一个事件时，都会使用任何相关信息调用回调工作。对于这种情况，基本的 catch 按钮没有相关信息，因此回调没有边界。 使用回调的异步网络调用也许异步编程最著名的例子包括通过网络获取信息，例如，通过 HTTP 上的 REST 服务: 12345import 'package:http/http.dart' as http;final future = http.get(\"https://flutterdevs.com\");future.then((response) &#123; if (response.statusCode == 200) &#123; print(\"Response received.\"); &#125;&#125;); Http 包是 Dart 的包回购中最著名的一个，Pub。我在这里合并了一个导入断言，以引起对使用作为关键字的 http 名称命名导入的平均例子的注意。这些助手保持包的许多高级函数、常量和因子不与您的代码发生冲突，就像澄清像 get ()这样的函数从何而来一样。 代码模型展示了吞噬未来的经典例子。当调用 http.get ()时，对它的调用立即返回一个不适当的 Future 示例。回想一下，通过 HTTP 获得结果需要很大的能量，我们不需要在旁观时让应用程序保持惰性。这就是我们立即将未来移回来并继续执行以下代码行的原因。这些下一行使用了 Future 示例的 at that then ()策略来获得一个回调函数，这个回调函数迟早会在 REST 反应出现时执行。万一不可避免的响应 HTTP 状态码为 200(成功) ，我们可以向调试控制台打印一条直截了当的消息。 我们把这个例子改进一下怎么样。这个模型将未来存储在最后一个变量中，然后得到 then () ，但是除非你有一个有效的理由来保留这个未来案例，否则跳过这个部分是平均的，就像在相应的模型中一样: 12345678http.get(\"https://flutterdevs.com\").then((response) &#123; if (response.statusCode == 200) &#123; print(\"Response received.\"); &#125; else &#123; print(\"Response not received\"); &#125;&#125;); 由于对 get ()的调用会对 Future 采取步骤，因此您可以直接调用它的 then ()策略，而不需要在变量中保存将来的引用。这些代码在这些行上稍微简化了一点，但同时又可以破译。将一些有价值的回收注册链接到我们的未来是可行的，例如: 123456789101112http.get(\"https://flutterdevs.com\").then((response) &#123; if (response.statusCode == 200) &#123; print(\"Response received.\"); &#125; else &#123; print(\"Response not received\"); &#125;&#125;).catchError(() &#123; print(\"Error!\");&#125;).whenComplete(() &#123; print(\"Future complete.\");&#125;); 目前我们已经设置了一个回调函数，当 HTTP 调用关闭时将执行一个错误，而不是使用 catchError 的响应，另一个回调函数将运行时不会考虑未来如何利用 whenComplete ()完成。这种搭售的技巧是可以想象的，因为每一种策略都会给我们的未来带来参考。 没有回调的异步网络调用Dart 提供了一个解决异步调用的替代例子，这个例子看起来更像习惯的同步代码，它可以使仔细阅读和推理变得更加简单。异步/等待标点符号为你处理了大量的未来物流: 1234Future&lt;String&gt; getData() async &#123; final response = await http.get(\"https://flutterdevs.com\"); return response.body;&#125; 当您意识到将在函数内部执行异步调用时，例如 http.get () ，您可以使用 async 关键字对函数进行戳记。异步工作一致地返回未来，您可以利用其主体中的 await 关键字。对于这种情况，我们认识到 REST 调用将返回字符串信息，因此我们在返回类型上使用泛型来表示: Future &lt; string &gt; 。 你可以等待任何返回未来的函数。getData ()函数将在等待清晰运行之后挂起执行，并将未来返回给调用者。代码紧密地等待反应; 它等待网络调用的未来完成。然后，当反应出现荒谬时，执行继续，并将 Response 对象指定为最后一个因子，然后 getData ()返回 Response.body，这是一个字符串。您不必从 getData ()中明确返回 future，因为这样做的结果是返回了 await 的主要用途。当你有了字符串信息，你返回它，然后达特用价值结束未来。 为了在使用 await 时捕捉错误，你可以使用 Dart 的标准 try/catch 包括: 12345678Future&lt;String&gt; getData() async &#123; try &#123; final response = await http.get(\"https://flutterdevs.com\"); return response.body; &#125; catch (excute) &#123; print(\"Error: $excute\"); &#125;&#125; 在这个版本中，我们放置的代码，可以抛出豁免到 try 块。在一切都很容易的情况下，我们将得到一个响应并返回字符串信息，类似于在早期模型中。如果出现错误，catch 块将执行所有考虑过的内容，并向我们传递一个对豁免的引用。由于我们没有向 getData ()的最大限度添加明确的返回公告，Dart 将在那里添加一个特定的返回 null 语句，这将以 null 值结束未来。 请注意，如果网络调用成功，则在 try 块中会发生返回，因此不会调用隐含的返回。 回调函数有它们的用途，并且它们可以成为处理简单情况下的异步通信的一种特殊方法，例如，响应一个客户机挤压捕获。对于更多混乱的情况，例如，当你需要安排一些异步调用，每个异步调用都依赖于先前调用的结果，Dart 的异步/等待语法结构可以帮助你尽量不去安排回调，这里或那里暗指回调地狱之火。 FutureBuilder一个 FutureBuilder 根据给定的未来条件来组装自己。对于这个模型，我们应该期望您有一个名为 getData ()的函数，它返回 Future &lt; string &gt; 。 123456789101112131415class MyStatelessWidget extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return FutureBuilder( future: getData(), builder: (BuildContext context, AsyncSnapshot snapshot) &#123; if (snapshot.connectionState == ConnectionState.waiting) &#123; return CircularProgressIndicator(); &#125; if (snapshot.hasData) &#123; return Text(snapshot.data); &#125; return Container(); &#125;, ); &#125;&#125; 这个定制的无状态小部件返回一个 FutureBuilder，如果 getData ()返回的 future 还没有结束，它将显示一个 advancement 指针，如果 future 已经结束，它将显示这个信息。万一这两样东西都不正确，一个空的容器就会被全面考虑。你建议 FutureBuilder 关注未来的边界，这时给它一个每次修改都需要的构建工作。构建回调获得典型的 BuildContext 争用，这是所有 Flutter 构建活动的正常情况，它同样获得 AsyncSnapshot 的出现，您可以使用 AsyncSnapshot 检查未来的状态并恢复任何信息。 这种方法有一个问题。根据 FutureBuilder 的官方文档，在构建步骤之前已经准备好了未来的必需品。 为了解决这个问题，我们需要使用一个有状态小部件来代替: 123456789101112131415161718192021class MyStatefulWidget extends StatefulWidget &#123; @override _MyStatefulWidgetState createState() =&gt; _MyStatefulWidgetState();&#125;class _MyStatefulWidgetState extends State&lt;MyStatefulWidget&gt; &#123; Future&lt;String&gt; _dataFuture; @override void initState() &#123; super.initState(); _dataFuture = getData(); &#125; @override Widget build(BuildContext context) &#123; return FutureBuilder( future: _dataFuture, builder: (BuildContext context, AsyncSnapshot snapshot) &#123; if (snapshot.connectionState == ConnectionState.waiting) &#123; return CircularProgressIndicator(); &#125; if (snapshot.hasData) &#123; return Text(snapshot.data); &#125; return Container(); &#125;, ); &#125;&#125; 这个小部件的改编在 initState ()期间获得了未来的信息。创建小部件的状态对象时，将精确地调用 initState ()技术一次。 StreamBuilder流类似于事件管道。信息或错误事件朝向一边，它们被传递给另一边的侦听器。当您为 StreamBuilder 提供对当前流的引用时，它会因此订阅和提取，以刷新至关重要的内容，并且它依赖于需要成为管道的任何信息来组装自己。 123456789101112131415class MyStatelessWidget extends StatelessWidget &#123; final Stream&lt;String&gt; dataStream; const MyStatelessWidget(&#123;Key key, this.dataStream&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return StreamBuilder&lt;ConnectionState&gt;( stream: dataStream, builder: (BuildContext context, AsyncSnapshot&lt;ConnectionState&gt; snapshot) &#123; if (snapshot.connectionState == ConnectionState.waiting) &#123; return CircularProgressIndicator(); &#125; if (snapshot.hasData) &#123; return Text(snapshot.data); &#125; return Container(); &#125;, ); &#125;&#125; 总结本文介绍了 Flutter 基本结构的“dart 与 Flutter 中的异步编程”，您可以根据自己的选择修改该代码。这是一个小的介绍在 dart 和 flutter 异步编程用户交互从我这边，它的工作使用 flutter。 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 2.2 升级了哪些东西？","date":"2021-05-19T16:00:00.000Z","path":"2021/05/20/translation/whats-new-in-flutter-2-2/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://medium.com/flutter/whats-new-in-flutter-2-2-fd00c65e2039 正文2.2 的发布侧重于改进和优化，包括 iOS 性能的提升，Android 延迟组件，为 Flutter web 更新服务工作者等等！ 今天是我们让 Flutter 2.2 可用的日子。您可以通过切换到 stable 通道并升级当前的 Flutter 安装，或者转到 Flutter.dev/docs/get-started 来启动新的安装。 尽管距离 Flutter 2 发布只有几个月的时间，我们在 2.2 中还是有很多改进可以分享。这个版本合并了 2,456 个 PRs，关闭了框架、引擎和插件库中的 3,105 个问题。特别大声呼吁 Flutter 社区在广大提供了大量的公关和公关审查，包括 Abhishek01039 谁贡献了最多的 PRs (17)和 xu-baolin，谁审查了最多的 PRs (9) Flutter 2.2。感谢所有贡献者的帮助，使 Flutter 2.2 的稳定通道。没有你我们做不到。 每一个 Flutter 发布到 stable 的新版本都会带来一组新的更新，无论是性能增强、新特性还是 bug 修复。此外，一个版本还包括一些尚未准备好投入生产使用的特性，但我们希望您能够验证它们是否按照您希望的方式工作。最后，每个新版本都附带了一组来自更大的 Flutter 社区的相关工具更新和更新。老实说，最近 Flutter 的每一个新版本都发生了很多事情，我们无法在一篇博客文章中合理地捕捉到所有的内容，但是我们会尽量突出重点。 在 stable 下 Flutter 2.2 更新这个版本涵盖了 Flutter 2 之上的一系列改进，包括跨 Android，iOS 和 web 的更新，新材质图标，文本处理更新，滚动条行为，以及对 TextSpan 小部件的鼠标光标支持，以及如何从单一源代码库中最好地支持多种平台的新指南。所有这些特性现在都可以稳定地使用，并且可以在生产应用程序中使用。它们都是建立在一个新的 Dart 释放上的。 Dart 2.13Flutter 2.2 带有 Dart 2.13 版本。除此之外，这次 Dart 更新包含了一个新的类型别名功能，它可以让你为类型和函数创建别名: 123456789// Type alias for functions (existing)typedef ValueChanged&lt;T&gt; = void Function(T value);// Type alias for classes (new!)typedef StringList = List&lt;String&gt;;// Rename classes in a non-breaking way (new!)@Deprecated(\"Use NewClassName instead\")typedef OldClassName&lt;T&gt; = NewClassName&lt;T&gt;; 类型别名可以为长而复杂的类型提供很好的短名称，它还允许您以非破坏性的方式重命名类。在 Dart 2.13 中还有更多的新功能，请查看 Dart 2.13 发布公告中的详细信息。 https://medium.com/dartlang/announcing-dart-2-13-c6d547b57067 Flutter web 更新Flutter 最新的稳定平台 web 已经在这个版本中得到了改进。 首先，我们使用新的服务工作者加载机制优化了缓存行为，并修复了 main.dart.js 的双重下载。在 Flutter web 的早期版本中，服务工作者在后台下载更新到您的应用程序，同时让您的用户访问您的应用程序的陈旧版本。一旦更新被下载，用户将不会看到这些更改，直到他们刷新浏览器页面几次。在 Flutter 2.2 中，当新的服务工作者检测到一个变化时，用户会等到更新被下载后才能使用这个应用程序，但是之后他们会看到更新，而不需要第二次手动刷新页面。 启用此更改需要您重新生成您的 Flutter 应用程序的 index.html。要做到这一点，保存修改，删除 index.html，然后运行 flutter create。在你的项目目录中重新创建它。 我们还对这两个网页渲染器进行了改进。对于 HTML，我们添加了对字体特性的支持，以支持设置 FontFeature，并使用 canvas api 呈现文本，以便文本在鼠标悬停时出现在正确的位置。对于 HTML 和 CanvasKit，我们增加了对着色遮罩和 computelinetrics 的支持，解决了 Flutter web 和移动应用之间的平价差距。例如，开发人员现在可以使用不透明遮罩来使用着色遮罩执行淡出过渡，并且可以像使用移动应用程序一样使用 computelinetrics。 对于 Flutter 网页，以及 Flutter general，可访问性是我们的最高优先事项之一。根据设计，Flutter 通过构建 SemanticsNode 树来实现可访问性。一旦 Flutter web 应用用户启用了可访问性，框架就会生成一个与 RenderObject DOM 树并行的 DOM 树，并将语义属性转换为 Aira。在这个版本中，我们改进了语义节点的位置，以便在使用转换时缩小移动和桌面 web 应用程序之间的差距，这意味着当小部件使用转换设计时，焦点框应该正确地出现在元素上。要看到这个效果，请看 Victor Tsaran 的视频，他领导了材料设计的可访问性项目，使用 VoiceOver with Flutter Gallery App: 我们还公开了语义节点调试树，在概要文件和释放模式中有一个命令行标志，通过可视化为 web 应用程序创建的语义节点来帮助开发人员调试可访问性。 为了使你自己的 Flutter web 应用程序能够使用这个功能，运行以下命令: 12$ flutter run -d chrome --profile \\ --dart-define=FLUTTER_WEB_DEBUG_SHOW_SEMANTICS=true 激活该标志后，您将能够看到小部件顶部的语义节点，这样您就可以调试并查看语义元素是否放置在不应该放置的位置。如果你找到这样的例子，请不要犹豫，提交一份错误报告。 https://goo.gle/flutter_web_issue 虽然我们在支持一组核心可访问性特性方面取得了重大进展，但我们将继续改进可访问性支持。在 2.2 稳定版之外的主版和开发版渠道中，我们增加了一个 API，让开发者可以通过编程方式自动启用应用程序的可访问性，并通过使用带有屏幕阅读器的 Tab 解决问题。 最后，但肯定不是最不重要的，最新版本的 Flutter DevTools 现在支持您的 Flutter 网络应用程序的布局浏览器。 这个更新给你提供了和你的移动和桌面应用程序一样的网页布局调试工具。 iOS 页面转换和增量安装对于 iOS，在这个版本中，我们通过减少 75% 渲染动画画面所需的时间，使 Cupertino 的页面转换更加流畅，而且可能在低端手机上更多。我们不只是寻找最终用户性能的改进，我们也一直在寻找提高开发性能的方法。 在这个版本中，我们在开发过程中实现了增量的 iOS 安装。在我们的基准测试中，我们发现安装升级版 iOS 应用程序的时间减少了 40% ，这样在测试应用程序更改时就会减少周转时间。 使用 Flutter 构建平台自适应应用程序随着 Flutter 扩展到支持更多稳定的平台，考虑不仅支持不同形式因素的应用程序变得很有用，比如移动设备、平板电脑和桌面，还有不同的输入类型(触摸和鼠标 + 键盘)和带有不同习惯用法的平台，比如导航抽屉和导航系统菜单。我们把能够根据不同目标平台的细节进行调整的应用称为“平台自适应”应用。 为了介绍在构建平台自适应应用程序时需要注意的事项，我们将向您介绍 Kevin Moore 的构建平台自适应应用程序会议。要了解更多详细信息，请查看 flutter.dev 上的平台自适应应用程序指南。 构建平台自适应应用https://events.google.com/io/session/868dfd56-7f8c-49ee-84ad-ac69a23ba19d?lng=en 指南https://flutter.dev/docs/development/ui/layout/building-adaptive-apps 最后，对于根据这些原则为多个平台编写的示例应用程序，我们推荐来自 gSkinner 的 Flokk 和 Flutter Folio 应用程序。你可以下载 Flokk 和 Folio 的代码，也可以从各种应用程序商店下载 Flokk 和 Folio，或者直接从浏览器上运行它们。另一个很好的例子是用于创建指南本身的应用程序: https://flutter.gskinner.com/flokk https://flutter.gskinner.com/folio https://flutter.gskinner.com/flokk/#g-download https://github.com/gskinnerTeam/flutter-folio Flutter 平台自适应应用指南的 UX 部分是基于新的大屏幕材料指南。这个来自 Material 团队的新指导包括几个主要布局文章的返工，以及对几个组件的更新和更新的设计工具包，所有这些都考虑到了大屏幕。 https://material.io/blog/material-design-for-large-screens Flutter 的目标一直是让应用程序不仅仅在多个平台上运行; 我们还要等到你的应用程序在所有你的目标平台上运行良好之后才能完成。的支持不仅可以针对多个平台的应用程序，还可以根据屏幕大小、输入模式和每个平台的习惯调整应用程序。 更多 Material 图标关于 Material guidance 的主题，在这个版本中，我们已经为 Flutter 添加了不止一个而是两个新的 Material 图标，包括一个 Dash 自己的图标！ https://github.com/flutter/flutter/pull/78311 这些更新使你的应用程序的材质图标总数超过 7000 个。如果你很难找到你想要的图标，那么在那些令人尴尬的财富中(谁不会呢?)你可在此 fonts.google.com/icons 按类别及姓名搜寻。 http://fonts.google.com/icons 按名称搜索 Flutter 材质图标 一旦你找到了完美的图标，新的“ Flutter”标签会告诉你如何使用它，或者你可以下载这个图标作为应用程序中的独立资产。添加 Dash 到您的 Flutter 应用程序从来没有这么容易。 改进的文本处理随着我们继续改进 Flutter 以支持每个平台的细节，我们继续推进新的领域，这些领域在移动表单因素上不像在桌面表单因素上那么重要。其中一个领域是文本处理。在这个版本中，我们已经开始重构我们如何处理文本输入，以实现诸如取消在小部件层次结构中冒泡的击键等功能，并通过引入完全自定义与文本动作相关的击键功能。 能够取消击键使得 Flutter 能够在不触发滚动事件的情况下实现诸如使用空格键和箭头键之类的东西，给你的最终用户一个更直观的体验。您可以使用同样的功能来处理击键，然后再将其发送到您自己的应用程序中的父窗口部件。另一个例子是，在这个版本中，你可以在 TextField 和 Flutter 应用程序中的一个按钮之间选择 Tab，而且它正常工作: 1234567891011121314151617181920212223import 'package:flutter/material.dart';void main() =&gt; runApp(App());class App extends StatelessWidget &#123; @override Widget build(BuildContext context) =&gt; MaterialApp( title: 'Flutter Text Editing Fun', home: HomePage(), );&#125;class HomePage extends StatelessWidget &#123; @override Widget build(BuildContext context) =&gt; Scaffold( body: Column( children: [ TextField(), OutlinedButton(onPressed: () &#123;&#125;, child: const Text('Press Me')), ], ), );&#125; Flutter 2.2 可以取消冒出窗口部件层次结构的击键，例如允许 TAB 从 TextField 更改焦点 自定义文本操作允许你做一些事情，比如在 TextField 中特殊处理 Enter 键; 例如，你可以触发在聊天客户端发送消息，同时仍然允许通过 Ctrl + Enter 插入一个新行。这些相同的文本操作允许 Flutter 本身提供不同的按键来匹配主机 OS 本身的文本编辑行为，例如，在 Windows 和 Linux 上使用 Ctrl + c，而在 macOS 上使用 Cmd + c。 https://github.com/flutter/flutter/pull/75032 作为一个例子，下面的示例重写了默认的左箭头操作，并为退格键和删除键提供了一个新的操作: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import 'package:flutter/material.dart';import 'package:flutter/services.dart';void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) =&gt; MaterialApp( title: 'Flutter TextField Key Binding Demo', home: Scaffold(body: UnforgivingTextField()), );&#125;/// A text field that clears itself if the user tries to back up or correct/// something.class UnforgivingTextField extends StatefulWidget &#123; @override State&lt;UnforgivingTextField&gt; createState() =&gt; _UnforgivingTextFieldState();&#125;class _UnforgivingTextFieldState extends State&lt;UnforgivingTextField&gt; &#123; // The text editing controller used to clear the text field. late TextEditingController controller; @override void initState() &#123; super.initState(); controller = TextEditingController(); &#125; @override Widget build(BuildContext context) =&gt; Shortcuts( shortcuts: &lt;LogicalKeySet, Intent&gt;&#123; // This overrides the left arrow key binding that the text field normally // has in order to move the cursor back by a character. The default is // created by the MaterialApp, which has a DefaultTextEditingShortcuts // widget in it. LogicalKeySet(LogicalKeyboardKey.arrowLeft): const ClearIntent(), // This binds the delete and backspace keys to also clear the text field. // You can bind any key, not just those already bound in // DefaultTextEditingShortcuts. LogicalKeySet(LogicalKeyboardKey.delete): const ClearIntent(), LogicalKeySet(LogicalKeyboardKey.backspace): const ClearIntent(), &#125;, child: Actions( actions: &lt;Type, Action&lt;Intent&gt;&gt;&#123; // This binds the intent that indicates clearing a text field to the // action that does the clearing. ClearIntent: ClearAction(controller: controller), &#125;, child: Center(child: TextField(controller: controller)), ), );&#125;/// An intent that is bound to ClearAction.class ClearIntent extends Intent &#123; const ClearIntent();&#125;/// An action that is bound to ClearIntent that clears the TextEditingController/// passed to it.class ClearAction extends Action&lt;ClearIntent&gt; &#123; ClearAction(&#123;required this.controller&#125;); final TextEditingController controller; @override Object? invoke(covariant ClearIntent intent) &#123; controller.clear(); &#125;&#125; 按左箭头或 ESC 可以清除文本 我们仍然有更多的工作要做，但我们正在努力给你提供完整的文本编辑操作。我们的目标是，当 Flutter 桌面变得稳定时，你的用户将无法分辨出 Flutter 应用程序中编辑文本与主机操作系统中其他应用程序之间的区别。 自动滚动行为作为我们持续追求的一部分，让 Flutter 应用在每个平台上都表现得像最好的应用一样，我们在这个版本中重新审视了滚动条。当实际显示滚动条时，安卓和 iOS 是相同的; 默认情况下它们不显示滚动条。另一方面，对于桌面应用程序，当内容大于容器时，通常会自动显示滚动条，这需要您添加一个滚动条父窗口小部件。为了在移动或桌面上获得正确的行为，此版本在必要时自动添加滚动条。 考虑下面的无滚动条代码: 123456789101112131415161718192021import 'package:flutter/material.dart';void main() =&gt; runApp(App());class App extends StatelessWidget &#123; @override Widget build(BuildContext context) =&gt; MaterialApp( title: 'Automatic Scrollbars', home: HomePage(), );&#125;class HomePage extends StatelessWidget &#123; @override Widget build(BuildContext context) =&gt; Scaffold( body: ListView.builder( itemCount: 100, itemBuilder: (context, index) =&gt; Text('Item $index'), ), );&#125; 在桌面上运行时，会出现一个滚动条: 如果您不喜欢滚动条的外观，或者总是显示滚动条，那么可以设置 ScrollBarTheme。如果您不喜欢这种默认行为，可以通过设置 ScrollBehavior 在应用程序范围内或在特定实例上更改它。有关新的默认滚动条行为以及如何将代码迁移到新的最佳实践集的更多细节，请查看 flutter.dev 上的文档。 https://flutter.dev/docs/release/breaking-changes/default-desktop-scrollbars 鼠标 cursors over text spans在以前的 Flutter 版本中，您可以在任何小部件上添加一个鼠标光标(就像一只手指示可点击的东西)。实际上，Flutter 本身在大多数情况下为您添加那些鼠标光标，比如在所有按钮上添加一个手动鼠标光标。然而，如果你想要一系列富文本，它们具有不同的文本跨度和各自的样式，并且可能有足够长的时间来包装，那么你就不太走运了ーー TextSpan 不是一个小部件，因此不能用作鼠标光标的视觉范围… … 直到现在！在这个版本中，当你有一个带有手势识别器的 TextSpan 时，你将自动获得相应的鼠标光标: 123456789101112131415161718192021222324252627282930313233343536373839404142import 'package:flutter/gestures.dart';import 'package:flutter/material.dart';import 'package:url_launcher/url_launcher.dart' as urlLauncher;void main() =&gt; runApp(App());class App extends StatelessWidget &#123; static const title = 'Flutter App'; @override Widget build(BuildContext context) =&gt; MaterialApp( title: title, home: HomePage(), );&#125;class HomePage extends StatelessWidget &#123; @override Widget build(BuildContext context) =&gt; Scaffold( appBar: AppBar(title: Text(App.title)), body: Center( child: RichText( text: TextSpan( style: TextStyle(fontSize: 48), children: [ TextSpan( text: 'This is not a link, ', style: TextStyle(color: Colors.black), ), TextSpan( text: 'but this is', style: TextStyle(color: Colors.blue), recognizer: TapGestureRecognizer() ..onTap = () &#123; urlLauncher.launch('https://flutter.dev'); &#125;, ), ], ), ), ), );&#125; 现在您可以拥有所需的所有包装文本跨度，并且其中任何带有识别器的文本都将获得适当的鼠标游标。 在这个版本中，TextSpan 还支持 onEnter 和 onExit 以及 mouseCursor。像这样的东西可能看起来很小，但他们有很长的路要走，使 Flutter 应用程序感觉就像用户期望它的感觉。 Flutter 2.2 updates in preview除了可用于产品的新功能外，Flutter 2.2 在预览版中提供了一些功能，包括 iOS 着色器编译器性能的改进，Android 延迟组件支持，Flutter 桌面更新，以及索尼的 ARM64 Linux 主机支持。请尝试一下，如果有任何问题请告诉我们。 http://github.com/flutter/flutter/issues Preview: iOS 着色器编译改进在图形渲染术语中，“着色器”是一个在终端用户设备上可用的 GPU 上编译和运行的程序。自 Skia 图形库诞生以来，Flutter 就一直使用着色器来提供高质量的图形效果，包括颜色、阴影、动画等等。由于 Flutter 的 api 的灵活性，着色器生成和编译实时，与帧工作负载需要他们同步。当编译着色器的时间超过帧预算时，结果对用户来说是显而易见的“ jank” 为了避免混乱，Flutter 提供了在训练过程中缓存着色器的能力，然后打包并捆绑一个应用程序，在第一帧之前编译，同时 Flutter 引擎启动。这意味着预编译的着色器不必在框架工作负载期间进行编译，也不会造成混乱。然而，Skia 最初只在 OpenGL 中实现了这个特性。 因此，当我们在 iOS 上默认启用 Metal 后端以回应苹果不推荐使用 OpenGL 时，根据我们的基准测量，最糟糕的帧时间有所增加，而且用户报告的 jank 也有所增加。我们自己的测量表明，这些报告通常是由于增加了着色器编译时间，增加了 Skia 为 Metal 后端生成的着色器数量，以及编译的着色器无法在运行过程中缓存，以至于 jank 在第一次运行应用程序之后仍然存在。 因此，到目前为止，避免 iOS 上这种混乱的唯一方法是简化场景和动画，这并不理想。 https://github.com/flutter/flutter/issues/79298 然而，现在在开发通道是一个预览的新支持在 Skia 的着色器热身的金属。通过 Skia，Flutter 现在编译绑定着色器之前的第一帧工作量开始。 跟踪显示在应用程序启动期间发生的预编译 然而，这个解决方案也有一些警告: Skia 仍然为 Metal 后端生成比 OpenGL 后端更多的着色器 最终的着色器编译到机器代码仍然与框架工作负载同步进行，但这比作为框架渲染时间的一部分进行整个着色器生成和编译要快 生成的机器代码在应用程序第一次运行后被缓存，直到设备重新启动 如果您希望利用应用程序中的这种新支持，可以按照 flutter.dev 上的说明进行操作。 https://flutter.dev/docs/perf/rendering/shader#how-to-use-sksl-warmup We’re not done with this work, however. On both Android and iOS, this implementation has a few drawbacks: 然而，我们还没有完成这项工作，无论是在安卓还是 iOS 上，这个实现都有一些缺点: 部署应用程序的大小更大，因为它包含捆绑着色器 应用程序启动延迟更长，因为捆绑着色器需要预编译 我们对这种实现所暗示的开发人员的体验并不满意 我们认为最后一个问题是需要解决的最重要问题。特别是，我们查看了执行训练运行的过程，并推理由应用程序大小和应用程序启动延迟造成的权衡过于繁重。因此，我们继续研究如何消除不依赖于此实现的着色器编译 jank 和一般的所有 jank。特别是，我们正在与 Skia 团队合作，以减少它响应 Flutter 的要求所产生的着色器的数量，同时也在调查使用与 Flutter 引擎捆绑在一起的一小套静态定义着色器可以实现多少 Flutter。 你可以跟随这个项目在 Flutter 回购看到我们的进展。 Android 延迟组件对于 Android，这个版本使用了 Dart 的分离 AOT 编译特性，允许 Flutter 应用程序在运行时下载包含提前编译代码和资源的模块。我们将这些可安装的组件中的每一个称为延迟组件。通过将代码和资产的下载推迟到仅在需要时进行，初始安装大小可以显著减少。例如，我们实现了 Flutter Gallery 的一个版本，所有的研究和演示都被推迟了，发现初始安装规模减少了 46% 。 https://github.com/flutter/flutter/pull/76192 在启用延迟组件的情况下进行构建时，Dart 会将只使用 deferred 关键字导入的代码编译成单独的共享库，这些库与资产一起打包到延迟组件中。 延迟组件目前只能在 Android 上使用，这个特性是作为早期预览提供的。了解如何在 flutter.dev 上的新 Deferred 组件页面中实现 Deferred 组件。这个页面还链接到 Flutter 维基上的一个页面，该页面包含了关于这个功能如何工作的深入介绍。请在 Flutter 问题跟踪日志问题。 Flutter Windows UWP alpha在这个版本中，Flutter 的另一个更新是针对桌面爱好者的; 对 Windows UWP 的支持在 dev 通道中已经转移到 alpha 版本(稳定的 2.2 版本之外)。允许你把 Flutter 应用程序带到标准 Windows 应用程序不能运行的设备上，包括 Xbox。要进行尝试，首先需要设置 UWP 先决条件。然后，切换到开发通道，启用 UWP 支持: https://flutter.dev/desktop#windows-uwp 123$ flutter channel dev$ flutter upgrade$ flutter config — enable-windows-uwp-desktop 一旦启用，创建一个 Flutter 应用程序包括一个新的 winuwp 文件夹，它允许你在 UWP 容器中构建和运行你的应用程序: 1234$ flutter create uwp_fun$ cd uwp_fun$ flutter pub get$ flutter run -d winuwp 因为你正在构建一个 Windows UWP 应用程序，它在 Windows 的沙箱环境中运行，所以在开发过程中，你需要在本地主机上的应用程序防火墙上打一个洞，以启用热重载和调试器断点等功能。你可以通过 checkknesolation 命令按照扑桌面文档页面上的说明做到这一点。一旦你这样做了，你可以看到你最喜欢的 Flutter 应用程序运行作为一个 UWP 应用程序在 Windows 上。 你最喜欢的 Flutter 应用程序在 Windows UWP 容器中运行 当然，你可以运行更多有趣的 UWP 应用程序，比如这些 Flutter 应用程序运行在 Xbox 上。 我要特别感谢克拉克松，自从我加入 Flutter 队以来，他就一直致力于这项支持。有关 Windows UWP alpha 的更多细节，请查看 flutter.dev/desktop/# Windows-UWP。 http://flutter.dev/desktop/#windows-uwp ARM64 Linux host support from Sony另一个来自社区成员 HidenoriMatsubayashi 的杰出努力，他是索尼的软件工程师，为目标 ARM64 Linux 提供了支持。这个 PR 可以让你在 ARM64 Linux 机器上建立和运行 Flutter 应用程序。 您最喜欢的 Flutter 应用程序运行在 ARM64 Linux 机器上 https://github.com/HidenoriMatsubayashi https://github.com/flutter/flutter/pull/61221 很高兴看到 Flutter 社区将 Flutter 带到了 Google 团队无法想象的地方。继续好好干吧！ Flutter 生态系统和工具更新Flutter 引擎和框架只是整体经验的一部分。对软件包生态系统和工具的更新对 Flutter 开发人员的体验同样重要。我们在这些领域有一些很棒的更新可以分享。 在生态系统方面，我们有一些新的 Flutter 最喜欢的软件包，以及 FlutterFire 的几个更新，Flutter 对 Firebase 的支持。更好的是，FlutterFire 支持新的 Firebase App Check 预览，所以 Flutter 开发者可以在第一天就利用它。 在工具方面，Flutter DevTools 提供了新的更新，用于优化应用程序的内存占用和提供程序包的新标签。对于 VS Code 和 Android Studio/IntelliJ 的 IDE 插件都有一些值得注意的更新，如果你是一个以 Flutter 为目标的内容作者，那么有一种全新的方式将 DartPad 整合到你的写作中。 最后但并非最不重要的是，有一个新的低代码的应用程序设计和建设工具称为 FlutterFlow，目标 Flutter 和运行在网络上，因为它本身是建立了 Flutter。 Flutter Favorite updates作为这次发布的一部分，Flutter 生态系统委员会一直在努力认证 24 个新的 Flutter 最喜欢的软件包，我们最大的扩展。最新标记的 Flutter 收藏包括: 正在生产中:cloud_firestore, cloud_functions, firebase_auth, firebase_core, firebase_crashlytics, firebase_messaging, and 及 firebase_storage Flutter Community packages: android_alarm_manager_plus, android_intent_plus, battery_plus, connectivity_plus, device_info_plus, network_info_plus, package_info_plus, sensors_plus, and 及 share_plus googleapis package win32 package intl and 及 characters packages Sentry and sentry_flutter infinite_scroll_pagination and flutter_native_splash packages 所有这些软件包都已经迁移到 null 安全性，并且在适当的情况下支持 Android、 iOS 和 web。例如，firebase crashlytics 在 web 上没有底层的 SDK，Android alarm manager plus 是专门为 Android 设计的。 Flutter 社区“加上”包提供了一个超集相应的包从 Flutter 小组。例如，电池组在 Flutter 发布之前就已经由 Google 的 Flutter 团队提供，并且已经迁移到了 null 安全性，但是只支持安卓和 iOS。另一方面，Flutter 社区电池 + 软件包支持所有六个 Flutter 平台，包括 web、 Windows、 macOS 和 Linux。颁奖的 Flutter 最喜欢的奖项所有 9 个“加”包代表了一个成熟的 Flutter 社区作为一个整体向前迈出了一大步。比 Google 的工程师团队要大得多。您应该尽快将代码迁移到“附加”包，在未来几周内，Google 的相应包将进行更新，以推荐您这样做。 Googleapi 插件提供了大约 185 个自动生成的 Dart 包装器，用于客户端或服务器端的 Dart 应用程序(包括 Flutter 应用程序)。如果你想了解更多关于这个软件包，作者有一个关于使用 Google api 启动 Flutter 应用程序的 i/o 演讲。 Win32 包是一个工程奇迹，它使用 Dart FFI 包装了大多数常用的 Win32 API 调用，使它们可以被 Dart 代码访问，而不需要 c 编译器或 Windows SDK。随着 Flutter 在 Windows 平台上的流行，win32 包已经成为许多流行插件的关键依赖，包括最流行的路径提供者。作为一个完整性的测试，作者 timsneath 做了一些疯狂的事情，比如在原始的 Win32 中使用原始的 Dart 来实现记事本、 snake 和俄罗斯方块。 俄罗斯方块运行在 Windows 上，只使用 Dart FFI 和 Win32 调用 Win32 包是绝对值得检查，如果你做任何与 Dart 或扑在 Windows。 更新和 Firebase 应用程序检查FlutterFire，Flutter 对 Firebase 的支持，是 Flutter 使用的最流行的插件集合之一。转化酶已经做了一个巨大的工作，让它生产的 Flutter 2 释放，并继续改善它，从那时起。事实上，自从 FlutterFire 的初始生产版本发布以来，转化酶已经减少了 79% 的未解决问题，并且减少了 88% 的未解决问题。此外，他们不仅在产品质量插件方面做得非常出色，他们还将 beta 质量插件迁移到了空安全性，并且让它们在同一核心上构建和运行，这样你就可以混合和匹配了。 此外，Invertase 还继续为 FlutterFire 插件增加新的功能，包括一些 Flutter 与 Cloud Firebase 整合的更新: Typesafe API 空气污染指数 用于读写数据 支持 Firebase 本地模拟器套件 优化您的数据查询 data bundles 数据包 最后，但并非最不重要的是，FlutterFire 提供了对新 Firebase 产品 beta 版本的支持: Firebase App Check。防火基地应用程序检查保护你的后端资源，如云存储，免受滥用，如帐单欺诈或网络钓鱼。使用 App Check，运行你 Flutter 应用的设备使用一个应用程序身份认证提供商来确认它确实是你的应用程序，并且可能检查它是否运行在一个真实的、未被篡改的设备上。一旦你激活应用程序检查，这个认证就会附加到你的应用程序对 Firebase 后端资源提出的每个请求上。要了解更多信息，请参阅 FlutterFire App Check 文档。 Flutter DevTools updates随着这个版本的发布，Flutter DevTools 有了一些值得注意的更新，包括两个内存跟踪改进和一个全新的选项卡专门为提供者插件。 DevTools 版本中的第一个内存跟踪改进提供了跟踪对象分配位置的能力。这对于在代码中找到内存泄漏的位置非常方便。Flutter DevTools memory tab allocation stack trace Flutter DevTools 内存选项卡分配堆栈跟踪 第二个是将自定义消息注入内存时间轴的能力。这样你就可以为你的应用程序提供特定的标记，比如在你完成一些内存密集型的工作之前和之后，这样你就可以检查你是否正确地清理了东西。 自定义内存事件 随着 Flutter 应用程序越来越大，我们将继续确保 Flutter 开发者拥有他们需要的工具来跟踪和修复内存泄漏和各种运行时问题。 在使用 Flutter 框架时，你不仅要追踪运行时问题，有时你还要追踪与软件包相关的问题。在 pub.dev 上有超过 15,000 个 flutter 兼容的软件包和插件，随着应用程序使用更多的软件包，这种情况越来越有可能发生。因此，考虑到这一点，我们一直在尝试为 Flutter DevTools 添加一个新的 Provider 标签。实际上，这个选项卡是由提供程序包本身的作者 Remi Roussel 创建的(还有许多其他好东西)。如果你正在运行最新版本的 Flutter DevTools，并且正在调试一个使用提供者插件的 Flutter 应用程序，你将自动获得新的 Provider 标签。 激活 DevTools Provider 选项卡 “提供者”选项卡显示与每个提供者关联的数据，包括运行应用程序时的实时更改。如果这还不够惊人的话，它可以让你直接改变数据，作为一种测试你的应用程序的角落情况的方法！ 通过使用 Remi 的这个标签，我们学到了一些关于如何更好地支持其他想要做同样事情的软件包作者的知识; 你可以阅读 Remi 如何构建 Provider 标签，以及我们目前关于如何在 Flutter DevTools Plugins 提案中启用更多标签的想法。请给我们您的反馈，并随时联系告诉我们您的计划，一个新的标签在 Flutter 开发工具。 This is only a few of the cool new things in Flutter DevTools in this release. For the complete list, check out the individual announcements here: 这只是 Flutter DevTools 在这个版本中的一些很酷的新东西。完整的列表请点击这里查看个人声明: Flutter DevTools 2.1 Release Notes 2.1 发行说明https://groups.google.com/g/flutter-announce/c/tCreMfJaJFU/m/38p1BBeiCAAJ Flutter DevTools 2.2.1 Release Notes 2.2.1 发行说明https://groups.google.com/g/flutter-announce/c/t8opLnUyiFQ/m/dJth-jKxAAAJ Flutter DevTools 2.2.3 Release Notes 2.2.3 发行说明https://groups.google.com/g/flutter-announce/c/t8opLnUyiFQ/m/YX5Ds_q0AgAJ IDE 插件更新Visual Studio Code 和 IntelliJ/Android Studio IDE 扩展 for Flutter 在这个版本中也进行了更新。例如，visualstudio 代码扩展现在支持两个附加的 Dart 代码重构: 内联方法和内联局部变量。 新的 Dart 重构行动内嵌方法 在 Android Studio/IntelliJ 扩展中，我们添加了将所有堆栈跟踪打印到控制台的功能。 现在您可以获得所有的堆栈跟踪，而不仅仅是第一个 这对于那些根本原因可能在不同包中的项目很有帮助，因为以前没有打印这些包。我们已经有了一些想法，可以让这篇文章不那么冗长，所以在未来寻找更多的改变。 有关此版本的 IDE 扩展更改的完整列表，请查看以下公告: VS Code extension v3.21 VS Code 扩展 v3.21https://groups.google.com/g/flutter-announce/c/gNtKp9c1glU/m/SZYTuwcQBwAJ VS Code extension v3.22 VS Code 扩展 v3.22https://groups.google.com/g/flutter-announce/c/1XR7baYZOVI/m/y6MGYrGhAAAJ Flutter IntelliJ Plugin M55 Release 55 Releasehttps://groups.google.com/g/flutter-announce/c/tYwFDPAtLu0/m/FrsntcNNBwAJ Flutter IntelliJ Plugin M56 Release 56 发布https://groups.google.com/g/flutter-announce/c/EkgiAO4p3UM/m/P32ZXXKfAAAJ DartPad workshops为了确保我们在快速发展的 Flutter 开发者社区中准备好文档，Dart 和 Flutter 团队总是在寻找改进和扩展创建教育内容的方法。随着这个版本的发布，我们为 DartPad 添加了一个新的、逐步的 UI，开发人员可以使用它来跟随讲师指导的工作坊。 实践中的 DartPad 工作坊 通过直接在 DartPad 中添加说明，我们为 i/o 提供了一种有指导的工作坊体验。然而，我们不仅仅是为我们自己的工作坊创建它; 如果您想在您的 Dart 或 Flutter 工作坊中使用它，您可以通过遵循 DartPad 工作坊创作指南来实现。除此之外，你还可以在 Gist 中使用 DartPad 来共享代码，并在你自己的站点中嵌入 DartPad，这已经有一段时间了。 我们希望每个制作 Dart 和 Flutter 内容的人都能够为他们的用户提供丰富的交互式体验。请尝试一下这个新功能，让我们知道你的想法！ 社区聚光灯: FlutterFlowFlutterFlow 是一个“低代码”应用程序设计和开发工具，用于在浏览器中构建应用程序。它提供了一个所见即所得的环境，可以使用 Firebase 的实际数据在多个页面上展示你的应用程序。低代码工具的目标是轻松地完成大多数常见事情，允许您编写尽可能少的行自定义代码。事实上，作为一个演示，他们在不到一个小时的时间里创建了一个整体的多页面移动应用程序，可以用零代码浏览大都会艺术博物馆。 FlutterFlow 输出 Flutter 代码，所以如果你需要添加代码来进一步定制你的应用程序，你可以。你可以在 FlutterFlow.io 上阅读 FlutterFlow 产品的发布。 https://flutterflow.io/blog/launch Breaking Changes一如既往，我们努力减少破坏性更改的数量，在这个版本中，我们已经能够限制它去除这些反对意见: 73750 删除已弃用的 BinaryMessages 73751 删除已弃用的 TypeMatcher 类 您可以在 flutter.dev 上找到针对这些突发变化的缓解方法。 摘要像往常一样，来自谷歌 Flutter 团队的所有人，我们想说ーー谢谢。感谢你成为社区的一部分，让这一切成为可能。随着超过八分之一的新应用程序在播放商店正在建立 Flutter 和超过 200,000 个 Flutter 应用程序在播放商店，我们的持续增长是令人兴奋的。世界各地的各种规模的应用程序都委托他们的用户界面，飞翼工艺美丽的多平台体验，以满足用户可能在任何地方。 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Google I/O 2021 发布 Flutter 2.2","date":"2021-05-19T00:42:13.000Z","path":"2021/05/19/translation/announcing-flutter-2-2-at-google-i-o-2021/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://medium.com/flutter/announcing-flutter-2-2-at-google-i-o-2021-92f0fcbd7ef9 参考 https://flutter.dev/docs/whats-new https://www.slashdata.co/reports/?category=mobile-desktop 正文在今天的 Google i/o 大会上，我们发布了 Flutter 2.2，这是我们最新发布的开源工具包，可以为单一平台上的任何设备构建漂亮的应用程序。Flutter 2.2 是 Flutter 目前为止最好的版本，它的更新让开发者比以往任何时候都更容易通过应用程序内购买、支付和广告赚钱; 连接到云服务和 api，扩展应用程序以支持新功能; 以及工具和语言功能，允许开发者消除一整类错误，提高应用程序性能和减少包大小。 建立在 Flutter 2 的基础上Flutter 2.2 是建立在 Flutter 2 的基础上的，它将 Flutter 从它的移动根源扩展到整合了 web、桌面和嵌入式使用。它是专门为环境计算世界设计的，用户有各种各样不同的设备和形式因素，并寻找跨越他们的日常生活的一致体验。使用 Flutter 2.2，企业、初创公司和企业家都可以构建高质量的解决方案，这些解决方案可以充分发挥其潜在市场的潜力，让创造性灵感(而不是目标平台)成为唯一的限制因素。 Flutter 是目前最流行的跨平台开发框架。 最近的一项移动开发者研究强调了 Flutter 的增长。分析公司 SlashData 的移动开发人员 2021 年人口预测显示，Flutter 现在是最流行的跨平台开发框架，有 45% 的开发人员选择了它，在 2020 年第一季度到 2021 年第一季度之间增长了 47% 。我们自己的数据证实了 Flutter 的这种转变; 在过去的 30 天里，Play Store 中超过八分之一的新应用程序都是使用 Flutter 构建的。 在 i/o，我们分享到仅仅在 Play Store 中就有超过 20 万个应用程序使用了 Flutter。这些应用程序来自腾讯，其微信即时通讯应用程序在 iOS 和安卓系统上被超过 12 亿用户使用; ByteDance，TikTok 的发起者，现在已经使用 Flutter 开发了 70 个不同的应用程序; 以及其他来自宝马、 SHEIN、 Grab 和滴滴等公司的应用程序。当然，Flutter 不仅仅被大公司使用。一些最具创新性的应用程序来自于你可能从未听说过的名字: Wombo，沃姆博，自拍应用程序; Fastly,间歇性禁食应用程序; Kite，一个漂亮的投资交易应用程序。 介绍 Flutter 2.2Flutter 2.2 发布的重点是改进开发体验，以帮助您向客户提供更可靠、性能更好的应用程序。 Sound null safety 现在是默认的新项目。空安全增加了对空引用异常的保护，使开发人员能够在代码中表达不可空类型。由于 Dart 的实现是合理的，编译器可以在运行时消除空检查，从而提高应用程序的性能。这个生态系统反应迅速，大约有 5000 个软件包已经升级到支持空安全。 这个版本还有很多性能改进: 对于 web 应用，我们使用服务工作者提供后台缓存; 对于 Android 应用，Flutter 支持延迟组件; 对于 iOS，我们一直在开发工具来预编译着色器，以消除或减少首次运行的 jank。我们还为 DevTools 套件添加了一些新特性，帮助您理解如何在应用程序中分配内存，以及对第三方工具扩展的支持。 此外，我们一直致力于一些重要的改进领域，如改善网页目标的可访问性。 我们的工作超越了 Flutter 的核心。我们还与其他谷歌团队合作，帮助将 Flutter 整合到我们更广泛的开发者堆栈中。特别是，我们继续建立可信赖的服务，帮助开发者负责任地将他们的应用货币化。我们的新广告 SDK 是更新在这个版本的零安全和自适应横幅格式的支持。我们还引入了一个新的支付插件，与谷歌支付团队建立了合作关系，让你可以在 iOS 和安卓系统上支付实体商品。我们更新了我们的应用内购买插件，以及一个匹配的代码。 adshttps://developers.google.com/admob/flutter/quick-start payhttp://pub.dev/packages/pay in_app_purchasehttps://pub.dev/packages/in_app_purchase codelabs flutter-in-app-purchaseshttps://codelabs.developers.google.com/codelabs/flutter-in-app-purchases 作为“秘密武器”的 Flutter，Dart 也得到一个更新，在这个版本。Dart 2.13 扩展了对本地互操作性的支持，在 FFI 中支持数组和打包结构。它还包括对类型别名的支持，这提高了可读性，并为某些重构场景提供了一种温和的方式。我们继续为更广泛的生态系统添加集成，使用 Dart GitHub Action 和针对基于云的业务逻辑部署进行优化的策划的 Docker Official Image。 github actionhttps://github.com/marketplace/actions/setup-dart-sdk ocker Official Imagehttps://hub.docker.com/_/dart 不仅仅是一个谷歌项目虽然谷歌仍然是 Flutter 项目的主要贡献者，但我们很高兴看到 Flutter 周围更广泛的生态系统的发展。 最近几个月来，Flutter 增长的一个特别领域是不断扩展到越来越多的平台和操作系统。在 Flutter 参与，我们宣布，丰田是带来扑动到他们的下一代汽车信息娱乐系统。上个月，Canonical 发布了他们的第一个 Ubuntu 版本，带有 Flutter 的集成支持，Snap 的集成和韦兰的支持。 https://medium.com/googleplaydev/seamless-multi-platform-app-development-with-flutter-ea0e8003b0f9#f53d https://ubuntu.com/blog/ubuntu-21-04-is-here 两个新的合作伙伴展示了这个不断增长的生态系统。三星正在将 Flutter 移植到 Tizen，并提供了一个其他人也可以贡献的开放源代码库。索尼正在努力为嵌入式 Linux 提供解决方案。 https://github.com/flutter-tizen/flutter-tizen https://github.com/sony/flutter-embedded-linux 设计师也从这个项目的开源性质中受益，Adobe 公布了更新后的 XD to Flutter 插件。Adobe XD 为设计师提供了一个很好的实验和迭代的方式，现在有了增强的 Flutter 支持，设计师和开发人员可以在同一资产上协作，比以往更快地将伟大的想法投入到生产中。 https://medium.com/adobetech/announcing-xd-to-flutter-v2-0-82d09f3909a7 最后，微软将继续与我们合作; 除了 Surface 团队一直在使用 Flutter 构建可折叠体验的工作外，本周还将看到为 Windows 10 构建的 UWP 应用程序 Flutter 的 alpha 支持。我们很高兴看到更多的应用程序能够利用 Flutter 内置的平台适应性，在移动、桌面、网络和其他领域提供更好的体验。 https://flutter.dev/desktop#windows-uwp 建立伟大的 Experiences最重要的是，我们建立 Flutter 来帮助开发者建立伟大的体验。我们被应用程序开发可以做得更好这个想法激励着: 我们可以通过消除传统的阻碍接触到你的受众的障碍来增强你的能力。 我们喜欢看你如何让 Flutter 工作。一个例子是美国退伍军人管理局的一个项目。下面的视频展示了他们的 Flutter 应用程序是如何帮助他们提供创伤后应激障碍士兵康复。 通过在 Google i/o 上举办各种各样的关于 Flutter 的研讨会、演示会和点播会议，我们很高兴与大家分享我们的工作。别忘了看看我们有趣的照相亭网络应用，它是用 Flutter 开发的，它可以让你和我们的 Dash 吉祥物和她的朋友们创建一张自拍！ https://events.google.com/io/program/content?4=topic_flutter https://photobooth.flutter.dev/ © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter ModalBottomSheet 指导","date":"2021-05-17T16:00:00.000Z","path":"2021/05/18/translation/flutter-modalbottomsheet-for-beginners/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://evandrmb.medium.com/flutter-modalbottomsheet-for-beginners-e5f3af271076 代码https://github.com/evandrmb/bottom_sheet 参考 https://material.io/components/sheets-bottom 正文根据材质设计指南，底部表是一个小工具，用于显示锚定在屏幕底部的附加内容。虽然了解使用这个的设计规则很好，但这不是本文的目标。要了解更多关于底板设计原则的详细信息，请参阅“Sheets: bottom — Material Design”。 现在你知道了 BottomSheet，你可能会问自己: 什么是 ModalBottomSheet？我们如何使用他们在 Flutter？ 好的，第一个问题，有两种底层表: 模态的和持久的。当用户与屏幕交互时，持久化保持可见。谷歌地图应用就是一个例子。 另一方面，模式化的操作会阻止用户在应用程序中做其他动作。您可以使用它们来确认某些操作，或者请求额外的数据，比如询问用户在电子商务应用程序中订购时需要多少交换，等等。 在本文中，我们将通过创建一个简单的体重跟踪应用程序来展示如何使用它，在这个应用程序中我们可以提交我们的体重并查看我们之前的体重。我们不会输入应用程序的详细信息，而是直接进入 ModalBottomSheet 实现。 要显示它，您需要从具有 Scaffold 的上下文调用 showModalBottomSheet，否则，您将得到一个错误。也就是说，让我们开始构建我们的表格。 首先要知道的是 ModalBottomSheets 的高度默认为屏幕的一半，为了改变它，必须传递 true 给 isScrollControlled 参数，并返回一个与我们期望的大小相匹配的小部件，所以让我们这样做。 1234567891011121314151617181920void addWeight() &#123; showModalBottomSheet( isScrollControlled: true, context: context, builder: (context) &#123; var date = DateTime.now(); return Container( height: 302, padding: const EdgeInsets.all(16.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ ], ), ); &#125;, ); &#125; 现在，我们需要添加一些东西，以便我们的用户可以输入他们的权重让我们添加一个 TextInput 并给它一个 TextEditingController (这种方式即使我们的工作表意外关闭时，用户再次打开它，它的值仍然存在)。 1234567891011121314151617181920212223242526272829303132333435void addWeight() &#123; showModalBottomSheet( isScrollControlled: true, context: context, builder: (context) &#123; var date = DateTime.now(); return Container( height: 302, padding: const EdgeInsets.all(16.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ padding: EdgeInsets.only(bottom: 24.0), child: Text( 'Register Weight', style: Styles.titleStyle, ), ), TextField( controller: weightInputController, keyboardType: TextInputType.number, decoration: InputDecoration( labelText: 'Weight (KG)', border: OutlineInputBorder( borderRadius: Styles.borderRadius, ), ), ), ], ), ); &#125;, ); &#125; 看起来不错，但现在我们有麻烦了。当用户点击我们的 TextField 键盘在它上面，为什么？当键盘打开时，我们的工作表不会调整位置，我们可以把工作表做得更大，但这不能解决我们的问题，因为我们仍然需要添加一个字段，用户可以在其中输入他们记录重量的日期。那么解决方案是什么呢？这很简单，如果打开键盘，我们让我们的工作表在它上面，我们可以实现这一点，给我们的容器一个边距的边缘。在 viewinset.bottom 中，我们将得到以下结果: 它开始看起来很漂亮，但是你不认为如果我们在纸上加一些半径会更平滑吗？让我们通过添加如下所示的 shapeproperty 来实现。 12345678showModalBottomSheet( isScrollControlled: true, context: context, shape: const RoundedRectangleBorder( borderRadius: BorderRadius.only( topLeft: Radius.circular(8), topRight: Radius.circular(8), )), 酷，现在让我们做我们的小工具来选择一个日期。通常，您会创建一个小部件来处理这个逻辑，并使用 ValueChanged 函数公开选定的值，但是为了说明您将来可能面临的问题，让我们在工作表本身内部创建所有逻辑。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102void addWeight() &#123; showModalBottomSheet( isScrollControlled: true, context: context, shape: const RoundedRectangleBorder( borderRadius: BorderRadius.only( topLeft: Radius.circular(8), topRight: Radius.circular(8), )), builder: (context) &#123; return Container( height: 360, width: MediaQuery.of(context).size.width, margin: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom), padding: const EdgeInsets.all(16.0), decoration: BoxDecoration( borderRadius: BorderRadius.circular(20), ), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ const Padding( padding: EdgeInsets.only(bottom: 24.0), child: Text( 'Register Weight', style: Styles.titleStyle, ), ), TextField( controller: weightInputController, keyboardType: TextInputType.number, decoration: InputDecoration( labelText: 'Weight (KG)', border: OutlineInputBorder( borderRadius: Styles.borderRadius, ), ), ), Padding( padding: const EdgeInsets.symmetric(vertical: 8.0), child: Row( children: [ Expanded( child: Text( 'Select a date', style: TextStyle( fontSize: 14, fontWeight: FontWeight.w500, ), ), ), Container( padding: const EdgeInsets.symmetric(horizontal: 4), margin: const EdgeInsets.symmetric(vertical: 8.0), height: 36, decoration: BoxDecoration( borderRadius: Styles.borderRadius, ), child: OutlinedButton( onPressed: () async &#123; final now = DateTime.now(); final result = await showDatePicker( context: context, initialDate: now, firstDate: now.subtract( const Duration( days: 90, ), ), lastDate: now); if (result != null) &#123; setState(() &#123; selectedDate = result; &#125;); &#125; &#125;, child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Padding( padding: const EdgeInsets.only(right: 16.0), child: Text('$&#123;formatDateToString(selectedDate)&#125;'), ), Icon(Icons.calendar_today_outlined), ], ), ), ), ], ), ) ], ), ); &#125;, ); &#125; 需要注意的是，我已经在我们的主页中添加了 selectedDatevariable，你可以在我最后提供的存储库链接中看到这一点。但是现在我们遇到了一个问题，尽管我们正在使用 setstateoutlinebutton 更新 selectedDate 的值，但是在重新打开工作表之前，仍然会显示旧的值，如下所示。 为了解决这个问题，我们需要将 OutlinedButton 传递给 StatefulBuilder (或者您可以创建一个新的小部件并使用回调公开更改，正如我前面所说的，顺便说一下，这是更正确的方法)。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134void addWeight() &#123; showModalBottomSheet( isScrollControlled: true, context: context, shape: const RoundedRectangleBorder( borderRadius: BorderRadius.only( topLeft: Radius.circular(8), topRight: Radius.circular(8), )), builder: (context) &#123; return Container( height: 360, width: MediaQuery.of(context).size.width, margin: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom), padding: const EdgeInsets.all(16.0), decoration: BoxDecoration( borderRadius: BorderRadius.circular(20), ), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ const Padding( padding: EdgeInsets.only(bottom: 24.0), child: Text( 'Register Weight', style: Styles.titleStyle, ), ), TextField( controller: weightInputController, keyboardType: TextInputType.number, decoration: InputDecoration( labelText: 'Weight (KG)', border: OutlineInputBorder( borderRadius: Styles.borderRadius, ), ), ), Padding( padding: const EdgeInsets.symmetric(vertical: 8.0), child: Row( children: [ Expanded( child: Text( 'Select a date', style: TextStyle( fontSize: 14, fontWeight: FontWeight.w500, ), ), ), Container( padding: const EdgeInsets.symmetric(horizontal: 4), margin: const EdgeInsets.symmetric(vertical: 8.0), height: 36, decoration: BoxDecoration( borderRadius: Styles.borderRadius, ), child: StatefulBuilder( builder: (context, setState) &#123; return OutlinedButton( onPressed: () async &#123; final now = DateTime.now(); final result = await showDatePicker( context: context, initialDate: now, firstDate: now.subtract( const Duration( days: 90, ), ), lastDate: now); if (result != null) &#123; setState(() &#123; selectedDate = result; &#125;); &#125; &#125;, child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Padding( padding: const EdgeInsets.only(right: 16.0), child: Text( '$&#123;formatDateToString(selectedDate)&#125;'), ), Icon(Icons.calendar_today_outlined), ], ), ); &#125;, )), ], ), ), Expanded(child: Container()), ButtonBar( children: [ ElevatedButton( onPressed: () =&gt; Navigator.pop(context), child: Text('Cancel', style: TextStyle( color: Theme.of(context).primaryColor, )), style: ElevatedButton.styleFrom( primary: Colors.white, // minimumSize: Size(96, 48), ), ), ElevatedButton( onPressed: () &#123; setState(() &#123; weights.insert( 0, WeightModel( value: double.parse(weightInputController.text), date: selectedDate, )); &#125;); Navigator.pop(context); &#125;, child: const Text('Register')), ], ), ], ), ); &#125;, ); &#125; 这是我们的 ModalBottomSheet 的最终版本！ https://github.com/evandrmb/bottom_sheet © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter开源项目 - 音乐播放器 BlackHole","date":"2021-05-16T16:00:00.000Z","path":"2021/05/17/flutter-opensource/flutter-music-player-blackhole/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat代码 https://github.com/Sangwan5688/BlackHole 特点Music SearchTop PlaylistsLocal and Global Top 200 songsStreaming (320kbps)Add Songs to FavoriteDownload Support (320kbps with ID3 tags)Play Online as well as Offline Songs 截图 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源项目https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"企业级Flutter项目-走出第一步","date":"2021-05-13T16:00:00.000Z","path":"2021/05/14/translation/flutter-in-business-first-steps/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://matteozajac.medium.com/flutter-in-business-first-steps-d8d0648c913b 参考 https://pub.dev/packages/flutter_bloc https://pub.dev/packages/chopper https://pub.dev/packages/json_serializable https://dart.dev/guides/language/effective-dart https://plugins.jetbrains.com/plugin/12400-flutter-pub-version-checker 正文大多数时候你必须为你的应用程序的技术债务付款。如果你在 MVP 之后没有良好的体系结构，那么现在是时候停下来，重构一下，让你的未来变得更加容易。事实上，在没有架构的情况下编写较小的应用程序更容易—- 很难不同意这一点—- 但是作为一个成熟的技术专家来考虑。 测试覆盖率，设计模式，代码分析，这些都是我正在考虑的。本文将介绍我们如何在提高代码质量和团队愉悦感的同时，交付出色的应用程序。 从架构开始Provider, BLoC, Redux ーー如果这些词听起来不熟悉，请在继续前进之前对它们有基本的了解。 它们都有优点和缺点，你可以自己选择。 拥有 Flutter 的知识和如何人们已经适应项目结构 BLoC 似乎是最简单的方式开始。 恕我直言，展示和理解 BLoC 如何工作的最好方式是看下面的图表。 表示层将事件发送到 BLoC 数据层异步执行较长的操作，例如从 API 或数据库获取数据 对用户界面产生返回值 就这么简单。 自己实现 BLoC 模式这真的是很好的锻炼，你应该一次性完全理解它背后的流程。如果你已经这样做了 然后使用..。 BLoC 库幸运的是，社区没有让人失望。你不必每次都写 BLoC，只需使用这个方便的 library ー FlutterBloc。 我想指出几个关键特征: Event — 没有样板的事件-状态通信, Dependency 依赖注入通过 BlocProvider, BlocBuilder 根据接收的状态构建小部件, BlocDelegate 使全局处理错误更加容易, BLoC 可以(也应该)进行测试 https://pub.dev/packages/flutter_bloc 采用 REST API 如果你创建了一个移动应用程序，你将连接到一个远程数据源。最常用的方法是 REST api 和 JSON。当然，你已经这样做了很多次，所以没有更多的解释。 来自 Android world 的消息表明你已经使用过 Retrofit、 GSON 或莫希 JSON 转换器。这些真的是非常棒的工具。 Flutter 中使用 chopper 库 https://pub.dev/packages/chopper 在这两种情况下，您都需要为您的 API 定义抽象类，并使用 flutter pub run build_runner build 生成它。 接下来，没有类似 GSON 的库可以将 JSON 转换为 POJO。您需要编写自己的映射器函数，或者使用 json_serializable，它通过注释 Dart 类自动生成转换到 JSON 和从 JSON 转换的代码。这个过程本身非常简单，你肯定会习惯的。 https://pub.dev/packages/json_serializable 本地持久化 在大多数情况下，当需要缓存我们的数据时，Sqflite 是我们的首选。它只是一个 SQLite Dart 实现，支持: 原始 SQL 查询, 插入/查询/更新/删除的方便助手, 批次ー避免性能问题。 分析代码在项目中拥有并保持代码样式对于团队来说可能是至关重要的。与体系结构一样，它也是维护项目和团队成员之间的质量、一致性的关键因素。 默认情况下，ide 集成了默认的静态分析，您可以根据需要扩展和调整这些分析。在他们的文档中很好地描述了 Effective 有自己的线头规则ーー Effective Dart。如果您喜欢这种风格(我确实喜欢) ，来自 Google 的开发团队就创建了一个带有这种规则集的包(pedantic | Dart 包) Effective Darthttps://dart.dev/guides/language/effective-dart pedantichttps://pub.dev/packages/pedantic 值得一提手动检查每个包的版本可能有点烦人。对于 Android Studio 用户，你可以查看这个插件 Flutter Pub Version Checker ー For IntelliJ IDEA，Android Studio 为你提供。突出显示带有新版本的软件包非常方便。 https://plugins.jetbrains.com/plugin/12400-flutter-pub-version-checker 待续这是一个关于我们公司内部使用的库和方法的快速总结。如果你正在寻找一些开始点，它也应该有助于你的项目，但作为 Flutter 已经演变，我们有许多可行的解决方案，共同的问题，这只是其中之一。在下一篇文章中，我将展示体系结构图，解释特定的层，并实现一个列表屏幕(从远程、本地持久化获取)。 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ 开源https://ducafecat.tech/categories/%E5%BC%80%E6%BA%90/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter开源项目 - 响应式后台管理面板界面","date":"2021-05-11T16:00:00.000Z","path":"2021/05/12/flutter-opensource/flutter-responsive-admin-panel-or-dashboard/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat前言关于 Flutter V2 网络正式支持稳定的分支。今天我分享一个管理面板，或者你可以称它为仪表板 UI 。现在你可以使用 flutter 构建你的应用程序仪表板。这个仪表板包含几乎所有你需要的东西，如图表，表，显示信息的小卡片。它在网络、 macOS 应用程序、平板电脑以及安卓和 iOS 手机上都运行良好。是时候编写一次运行所有地方的代码了。是的，flutter 网络不是搜索引擎优化友好，但我们不需要搜索引擎优化的管理面板。 项目地址https://github.com/ducafecat/Flutter-Responsive-Admin-Panel-or-Dashboard 界面 代码分析核心代码 lib/responsive.dart通过 MediaQuery 查询界面宽高尺寸，来决定你是那个布局方案。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import 'package:flutter/material.dart';class Responsive extends StatelessWidget &#123; final Widget mobile; final Widget tablet; final Widget desktop; const Responsive(&#123; Key key, @required this.mobile, this.tablet, @required this.desktop, &#125;) : super(key: key);// This size work fine on my design, maybe you need some customization depends on your design // This isMobile, isTablet, isDesktop helep us later static bool isMobile(BuildContext context) =&gt; MediaQuery.of(context).size.width &lt; 850; static bool isTablet(BuildContext context) =&gt; MediaQuery.of(context).size.width &lt; 1100 &amp;&amp; MediaQuery.of(context).size.width &gt;= 850; static bool isDesktop(BuildContext context) =&gt; MediaQuery.of(context).size.width &gt;= 1100; @override Widget build(BuildContext context) &#123; final Size _size = MediaQuery.of(context).size; // If our width is more than 1100 then we consider it a desktop if (_size.width &gt;= 1100) &#123; return desktop; &#125; // If width it less then 1100 and more then 850 we consider it as tablet else if (_size.width &gt;= 850 &amp;&amp; tablet != null) &#123; return tablet; &#125; // Or less then that we called it mobile else &#123; return mobile; &#125; &#125;&#125; 业务界面处理细节通过 if (!Responsive.isMobile(context)) 这样的方式去判断执行 lib/screens/main/main_screen.dart 12345678910111213141516171819202122232425262728class MainScreen extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( key: context.read&lt;MenuController&gt;().scaffoldKey, drawer: SideMenu(), body: SafeArea( child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: [ // We want this side menu only for large screen if (Responsive.isDesktop(context)) Expanded( // default flex = 1 // and it takes 1/6 part of the screen child: SideMenu(), ), Expanded( // It takes 5/6 part of the screen flex: 5, child: DashboardScreen(), ), ], ), ), ); &#125;&#125; lib/screens/dashboard/dashboard_screen.dart 123456789101112131415161718192021222324252627282930313233343536373839404142class DashboardScreen extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return SafeArea( child: SingleChildScrollView( padding: EdgeInsets.all(defaultPadding), child: Column( children: [ Header(), SizedBox(height: defaultPadding), Row( crossAxisAlignment: CrossAxisAlignment.start, children: [ Expanded( flex: 5, child: Column( children: [ MyFiels(), SizedBox(height: defaultPadding), RecentFiles(), if (Responsive.isMobile(context)) SizedBox(height: defaultPadding), if (Responsive.isMobile(context)) StarageDetails(), ], ), ), if (!Responsive.isMobile(context)) SizedBox(width: defaultPadding), // On Mobile means if the screen is less than 850 we dont want to show it if (!Responsive.isMobile(context)) Expanded( flex: 2, child: StarageDetails(), ), ], ) ], ), ), ); &#125;&#125; © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 如何获取设备的唯一码","date":"2021-05-10T16:00:00.000Z","path":"2021/05/11/translation/how-to-get-unique-device-details-in-flutter/","text":"老铁记得 转发 ，猫哥会呈现更多 Flutter 好文~~~~微信 flutter 研修群 ducafecat原文 https://medium.com/flutterdevs/how-to-get-unique-device-details-in-flutter-ced2dbe5f8e5 猫哥说获取设备 id 是每一个 APP 都应该去做的，比如你访问唯一用户统计就需要。 前言 代码https://github.com/flutter-devs/flutter_device_details_demo 参考 https://pub.dev/packages/device_info 正文一般来说，制作一个移动应用程序是一个极其令人难以置信和测试的任务。有许多可用的框架，这些框架为创建移动应用程序提供了极好的亮点。为了创建移动应用，Android 提供了一个基于 Java 和 Kotlin 语言的本地结构框架，而 iOS 提供了一个依赖于 Objective-C/Swift 语言的系统。 随后，我们需要两种独特的语言和结构来为这两种操作系统创建应用程序。今天，为了打破这种错综复杂的结构，已经提出了几个框架来帮助桌面应用程序同时使用这两种操作系统。这类框架被称为 cross-platform 跨平台开发工具。 在这个博客，我们将探索如何获得独特的设备细节.我们将实现一个演示程序，并获得独特的设备细节，为安卓和 IOS 使用设备信息包在您的 Flutter 应用程序。 简介Flutter 中得到当前设备数据的应用。如何利用 device_info plugin 为 Android 和 IOS 提供独特的设备细节。在这一点上，当我们谈论一个独特的设备细节在本地，我们有 Settings.Secure.ANDROID_ID 获得一个独一无二的设备细节。 https://pub.dev/packages/device_info 演示 这个演示视频显示了如何获得一个独特的设备细节的 Flutter 。它显示了如何设备细节将工作使用设备信息包在您的 Flutter 应用程序。它会显示用户何时点击触发按钮，屏幕上显示的唯一设备 Andriod/Ios 信息，如设备名称、版本、标识符等。它会显示在你的设备上。 实施 第一步: 添加依赖项 将依赖项添加到 pubspec ー yaml 文件。 1234dependencies: flutter: sdk: flutter device_info: ^0.4.0+4 第二步: 导入 1import 'package:device_info/device_info.dart'; 第三步: 在应用程序的根目录中运行 flutter 软件包。 代码实现如何实现 dart 文件中的代码: 在 lib 文件夹中创建一个新的 dart 文件，名为 device_detail_demo.dart。 首先，我们将创建一个用户界面。在主体部分，我们将添加一个中心小部件。在内部，我们将添加一个列小部件。在这个小部件中，我们将添加一个 mainAxisAlignmnet 为中心。它是 children’s property ，添加 RaisedButton()。在这个按钮中，我们将添加填充、颜色和 OnPressed 功能。它的子属性，我们将文本“Device Details”。 1234567891011121314Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ RaisedButton( padding: EdgeInsets.all(14), color: Colors.cyan[50], onPressed: ()&#123;&#125;, child: Text(\"Device Details\", style: TextStyle(color: Colors.black),), ), ], ),), 当我们运行应用程序时，我们应该得到屏幕的输出，就像下面的屏幕截图一样。 我们将创建三个字符串 deviceName、 deviceVersion 和 identifier。 123String deviceName ='';String deviceVersion ='';String identifier= ''; 现在，我们将添加程序的主函数。我们将添加 future _deviceDetails() 在内部，我们将添加一个最终的 deviceinfoplgin 等于新的 deviceinfoplgin()。我们将添加 try {} 方法，并为平台导入 dart:io。 1import 'dart:io'; 如果平台是 Andriod，那么构建就等于 deviceInfoPlugin 对于 Andriod 信息。添加 setState ()方法。在这个方法中，我们将所有的字符串加起来等于构建。如果平台是 Ios，那么构建版本就等于 Ios 信息的 deviceInfoPlugin。添加 setState ()方法。在这个方法中，我们将所有的字符串加起来等于构建。 123456789101112131415161718192021222324Future&lt;void&gt;_deviceDetails() async&#123; final DeviceInfoPlugin deviceInfoPlugin = new DeviceInfoPlugin(); try &#123; if (Platform.isAndroid) &#123; var build = await deviceInfoPlugin.androidInfo; setState(() &#123; deviceName = build.model; deviceVersion = build.version.toString(); identifier = build.androidId; &#125;); //UUID for Android &#125; else if (Platform.isIOS) &#123; var data = await deviceInfoPlugin.iosInfo; setState(() &#123; deviceName = data.name; deviceVersion = data.systemVersion; identifier = data.identifierForVendor; &#125;);//UUID for iOS &#125; &#125; on PlatformException &#123; print('Failed to get platform version'); &#125;&#125; 我们将为 PlatformException 导入服务 1import 'package:flutter/services.dart'; 现在，我们将在引发的按钮上添加按下的函子上的 _deviceDetails() 123onPressed: ()&#123; _deviceDetails();&#125;, 我们将添加设备版本、名称和标识符不是空的，然后显示 Column 小部件。在这个小部件中，我们将添加所有三个文本，如设备名称、设备版本和设备标识符将显示在您的设备上。否则，显示一个空容器。 12345678910111213141516171819deviceVersion.isNotEmpty &amp;&amp; deviceName.isNotEmpty &amp;&amp; identifier.isNotEmpty?Column( children: [ SizedBox(height: 30,), Text(\"Device Name:- \"+deviceName,style: TextStyle (color: Colors.red, fontWeight: FontWeight.bold)), SizedBox(height: 30,), Text(\"Device Version:- \"+deviceVersion,style: TextStyle (color: Colors.red, fontWeight: FontWeight.bold)), SizedBox(height: 30,), Text(\"Device Identifier:- \"+identifier,style: TextStyle (color: Colors.red, fontWeight: FontWeight.bold)), SizedBox(height: 30,), ],): Container(), 当用户点击按钮，然后，所有三个数据将显示在您的设备上。当我们运行应用程序时，我们应该得到屏幕的输出，就像下面的屏幕截图一样。 代码文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import 'dart:io';import 'package:device_info/device_info.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';class DeviceDetailDemo extends StatefulWidget &#123; @override _DeviceDetailDemoState createState() =&gt; _DeviceDetailDemoState();&#125;class _DeviceDetailDemoState extends State&lt;DeviceDetailDemo&gt; &#123; String deviceName =''; String deviceVersion =''; String identifier= ''; Future&lt;void&gt;_deviceDetails() async&#123; final DeviceInfoPlugin deviceInfoPlugin = new DeviceInfoPlugin(); try &#123; if (Platform.isAndroid) &#123; var build = await deviceInfoPlugin.androidInfo; setState(() &#123; deviceName = build.model; deviceVersion = build.version.toString(); identifier = build.androidId; &#125;); //UUID for Android &#125; else if (Platform.isIOS) &#123; var data = await deviceInfoPlugin.iosInfo; setState(() &#123; deviceName = data.name; deviceVersion = data.systemVersion; identifier = data.identifierForVendor; &#125;);//UUID for iOS &#125; &#125; on PlatformException &#123; print('Failed to get platform version'); &#125; &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( backgroundColor: Colors.redAccent[100], title: Text(\"Flutter Device Details Demo\"), automaticallyImplyLeading: false, ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ RaisedButton( padding: EdgeInsets.all(14), color: Colors.cyan[50], onPressed: ()&#123; _deviceDetails(); &#125;, child: Text(\"Device Details\", style: TextStyle(color: Colors.black),), ), deviceVersion.isNotEmpty &amp;&amp; deviceName.isNotEmpty &amp;&amp; identifier.isNotEmpty? Column( children: [ SizedBox(height: 30,), Text(\"Device Name:- \"+deviceName,style: TextStyle (color: Colors.red, fontWeight: FontWeight.bold)), SizedBox(height: 30,), Text(\"Device Version:- \"+deviceVersion,style: TextStyle (color: Colors.red, fontWeight: FontWeight.bold)), SizedBox(height: 30,), Text(\"Device Identifier:- \"+identifier,style: TextStyle (color: Colors.red, fontWeight: FontWeight.bold)), SizedBox(height: 30,), ], ): Container(), ], ), ), ); &#125;&#125; 总结在本文中，我解释了如何获得独特的设备细节 Flutter 的基本结构，您可以根据自己的选择修改这个代码。这是一个小的介绍，以获得独特的设备细节的用户交互从我这边，它的工作使用 Flutter。 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter Getx 05 - 嵌套导航、多语言、主题、Snackbar、Dialog、BottomSheet","date":"2021-05-08T16:00:00.000Z","path":"2021/05/09/flutter-getx/flutter-getx-05-nested-snack-dialog-bottom-lang-theme/","text":"本节目标 嵌套导航 多语言 主题 3 UI 组件 Snackbar Dialog BottomSheet 视频https://www.bilibili.com/video/BV1RU4y1t7DD/ 代码https://github.com/ducafecat/getx_quick_start 参考 https://pub.flutter-io.cn/packages/get 正文嵌套导航 几个 Navigator widget ，并排或者嵌套，他们是通过属性 key 来区分的，具体去哪里是通过 onGenerateRoute 实现的，在 getx 中 我们要把业务写到 controller中，状态切换用 Obx 控制 BottomNavigationBar，代码如下。 lib/pages/nested_navigation/controller.dart 1234567891011121314151617181920212223242526272829303132333435class NestedController extends GetxController &#123; static NestedController get to =&gt; Get.find(); var currentIndex = 0.obs; final pages = &lt;String&gt;['/list', '/detail', '/login']; void changePage(int index) &#123; currentIndex.value = index; Get.toNamed(pages[index], id: 1); &#125; Route? onGenerateRoute(RouteSettings settings) &#123; if (settings.name == '/login') return GetPageRoute( settings: settings, page: () =&gt; LoginView(), transition: Transition.topLevel, ); else if (settings.name == '/list') return GetPageRoute( settings: settings, page: () =&gt; ListIndexView(), transition: Transition.rightToLeftWithFade, ); else if (settings.name == '/detail') return GetPageRoute( settings: settings, page: () =&gt; DetailView(), transition: Transition.fadeIn, ); return null; &#125;&#125; lib/pages/nested_navigation/binding.dart 123456class NestedBinding extends Bindings &#123; @override void dependencies() &#123; Get.lazyPut(() =&gt; NestedController()); &#125;&#125; lib/pages/nested_navigation/index.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class NestedNavView extends GetView&lt;NestedController&gt; &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"嵌套路由\"), ), body: Container( color: Colors.amber, child: Column( children: [ Container( child: Text(\"占位条\"), height: 100, ), SizedBox( height: 300, child: Navigator( key: Get.nestedKey(1), initialRoute: '/list', onGenerateRoute: controller.onGenerateRoute, ), ), ], ), ), bottomNavigationBar: Obx( () =&gt; BottomNavigationBar( items: const &lt;BottomNavigationBarItem&gt;[ BottomNavigationBarItem( icon: Icon(Icons.list), label: '列表', ), BottomNavigationBarItem( icon: Icon(Icons.details), label: '详情', ), BottomNavigationBarItem( icon: Icon(Icons.login), label: '登录', ), ], currentIndex: controller.currentIndex.value, selectedItemColor: Colors.pink, onTap: controller.changePage, ), ), ); &#125;&#125; lib/common/routes/app_pages.dart 12345GetPage( name: AppRoutes.NestedNavigator, page: () =&gt; NestedNavView(), binding: NestedBinding(),), 多语言 编写多语言字典 文件名格式 [国家]_[语言].dart lib/common/lang/en_US.dart 1234const Map&lt;String, String&gt; en_US = &#123; 'title': 'This is Title!', 'login': 'logged in as @name with email @email',&#125;; lib/common/lang/zh_Hans.dart 1234const Map&lt;String, String&gt; zh_Hans = &#123; 'title': '这是标题', 'login': '登录用户 @name，邮箱账号 @email',&#125;; lib/common/lang/zh_HK.dart 1234const Map&lt;String, String&gt; zh_HK = &#123; 'title': '這是標題', 'login': '登錄用戶 @name，郵箱賬號 @email',&#125;; 继承 Translations lib/common/lang/translation_service.dart 12345678910class TranslationService extends Translations &#123; static Locale? get locale =&gt; Get.deviceLocale; static final fallbackLocale = Locale('en', 'US'); @override Map&lt;String, Map&lt;String, String&gt;&gt; get keys =&gt; &#123; 'en_US': en_US, 'zh_Hans': zh_Hans, 'zh_HK': zh_HK, &#125;;&#125; 初始 GetMaterialApp lib/main.dart 1234567891011121314class MyApp extends StatelessWidget &#123; const MyApp(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return GetMaterialApp( ... locale: TranslationService.locale, fallbackLocale: TranslationService.fallbackLocale, translations: TranslationService(), ); &#125;&#125; locale 当前系统语言 fallbackLocale 如果找不到对应字典，默认值 translations 字典列表 切换 updateLocale 采用扩展操作符方式调用显示，点赞 xxx.tr, 切换语言 Get.updateLocale 123456\"title -&gt; \" + 'title'.tr,......var locale = Locale('zh', 'HK');Get.updateLocale(locale); lib/pages/lang/index.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class LangView extends StatelessWidget &#123; const LangView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"多语言\"), ), body: Center( child: Column( children: [ Text( \"title -&gt; \" + 'title'.tr, style: TextStyle(fontSize: 24), ), Divider(), Text( \"login -&gt; \" + 'login'.trParams( &#123;'name': 'ducafecat', 'email': 'ducafecat@gmail.com'&#125;)!, style: TextStyle(fontSize: 24), ), Divider(), ListTile( title: Text(\"切换语言\"), subtitle: Text('zh-HK'), onTap: () &#123; var locale = Locale('zh', 'HK'); Get.updateLocale(locale); &#125;, ), ListTile( title: Text(\"切换语言\"), subtitle: Text('zh-Hans'), onTap: () &#123; var locale = Locale('zh', 'Hans'); Get.updateLocale(locale); &#125;, ), ListTile( title: Text(\"切换语言\"), subtitle: Text('en-US'), onTap: () &#123; var locale = Locale('en', 'US'); Get.updateLocale(locale); &#125;, ), ], ), ), ); &#125;&#125; 主题 直接 Get.changeTheme 切换 ThemeData 数据。 1234onTap: () &#123; Get.changeTheme( Get.isDarkMode ? ThemeData.light() : ThemeData.dark());&#125;, lib/pages/theme/index.dart 123456789101112131415161718192021222324252627282930313233343536class ThemeView extends StatelessWidget &#123; const ThemeView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"主题\"), ), body: Center( child: Column( children: [ Container( height: 100, child: Align( alignment: Alignment.center, child: Text( \"是否黑色主题 -&gt; \" + Get.isDarkMode.toString(), style: TextStyle(fontSize: 24), )), ), Divider(), ListTile( title: Text(\"切换主题\"), subtitle: Text('Get.changeTheme'), onTap: () &#123; Get.changeTheme( Get.isDarkMode ? ThemeData.light() : ThemeData.dark()); &#125;, ), ], ), ), ); &#125;&#125; Snackbar 调用 1234onTap: () =&gt; Get.snackbar( \"标题\", \"消息\",), 参数 1234567891011121314151617181920212223242526272829303132333435363738394041void snackbar&lt;T&gt;( String title, String message, &#123; Color? colorText, Duration? duration, /// with instantInit = false you can put snackbar on initState bool instantInit = true, SnackPosition? snackPosition, Widget? titleText, Widget? messageText, Widget? icon, bool? shouldIconPulse, double? maxWidth, EdgeInsets? margin, EdgeInsets? padding, double? borderRadius, Color? borderColor, double? borderWidth, Color? backgroundColor, Color? leftBarIndicatorColor, List&lt;BoxShadow&gt;? boxShadows, Gradient? backgroundGradient, TextButton? mainButton, OnTap? onTap, bool? isDismissible, bool? showProgressIndicator, SnackDismissDirection? dismissDirection, AnimationController? progressIndicatorController, Color? progressIndicatorBackgroundColor, Animation&lt;Color&gt;? progressIndicatorValueColor, SnackStyle? snackStyle, Curve? forwardAnimationCurve, Curve? reverseAnimationCurve, Duration? animationDuration, double? barBlur, double? overlayBlur, SnackbarStatusCallback? snackbarStatus, Color? overlayColor, Form? userInputForm,&#125;) async &#123; Dialog 调用 12345678910111213onTap: () =&gt; Get.defaultDialog( title: \"标题\", content: Column( children: [ Text(\"第1行\"), Text(\"第2行\"), Text(\"第3行\"), ], ), textConfirm: \"确认\", textCancel: \"取消\", onConfirm: () =&gt; Get.back(),), 参数 123456789101112131415161718192021222324252627Future&lt;T?&gt; defaultDialog&lt;T&gt;(&#123; String title = \"Alert\", TextStyle? titleStyle, Widget? content, VoidCallback? onConfirm, VoidCallback? onCancel, VoidCallback? onCustom, Color? cancelTextColor, Color? confirmTextColor, String? textConfirm, String? textCancel, String? textCustom, Widget? confirm, Widget? cancel, Widget? custom, Color? backgroundColor, bool barrierDismissible = true, Color? buttonColor, String middleText = \"Dialog made in 3 lines of code\", TextStyle? middleTextStyle, double radius = 20.0, // ThemeData themeData, List&lt;Widget&gt;? actions, // onWillPop Scope WillPopCallback? onWillPop,&#125;) &#123; BottomSheet 调用 1234567891011121314 onTap: () =&gt; Get.bottomSheet( Container( height: 200, color: Colors.white, child: Column( children: [ Text(\"第1行\"), Text(\"第2行\"), Text(\"第3行\"), ], ), ), ),), 参数 123456789101112131415161718extension ExtensionBottomSheet on GetInterface &#123; Future&lt;T?&gt; bottomSheet&lt;T&gt;( Widget bottomsheet, &#123; Color? backgroundColor, double? elevation, bool persistent = true, ShapeBorder? shape, Clip? clipBehavior, Color? barrierColor, bool? ignoreSafeArea, bool isScrollControlled = false, bool useRootNavigator = false, bool isDismissible = true, bool enableDrag = true, RouteSettings? settings, Duration? enterBottomSheetDuration, Duration? exitBottomSheetDuration, &#125;) &#123; © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter getx","slug":"flutter-getx","permalink":"https://blog.ducafecat.tech/tags/flutter-getx/"}]},{"title":"Flutter 多个版本切换控制","date":"2021-05-06T23:43:37.000Z","path":"2021/05/07/translation/flutter-how-to-fluttering-from-one-version-to-other-versions/","text":"原文https://medium.com/litslink/flutter-how-to-fluttering-from-one-version-to-other-versions-cf242ffb15f7 猫哥说如果你和猫哥我一样，手上有几个 1 年前的项目，那么经常切换 sdk 版本，就成了必须做的事情，我可不会把老项目去升级新版本。 前言每次当技术改变为一个新的主版本时，将一个项目从较低的版本迁移到较高的版本是痛苦的。幸运的是，Dart 有一个迁移工具，可以帮助您将项目中的定义迁移到新的语法中。 但是即使你已经准备好切换到一个更新的版本，你也必须等待在你的项目中使用的一系列插件，即使在我的情况下，我确实帮助一些开源库迁移到 Null-Safety，这不足以将我的项目迁移到下一个版本。 社区每天都在成长，在大多数情况下，你会找到一些替代插件，这些插件还没有被迁移。如果您停留在以前的 Flutter 版本，本文将帮助您简化在项目之间的切换。 参考 https://flutter.dev/docs/development/tools/sdk/releases https://fvm.app/ 正文版本管理Flutter 版本有一个相关的 Dart SDK 版本，可以在本地缓存到 Flutter 缓存文件夹中，因此您应该记住一些约束。 作为一个开发者，你有几个选项可以在不同版本之间切换: 使用命令行脚本(CLI)进行手动编写 Flutter 版本管理器 CLI Sidekick GUI 图形用户界面 手动当你有两个或三个项目并在它们之间切换时，这个选项对你来说并不常见。 Flutter CLI 具有 git 控制的版本管理，因此即使使用 git checkout &lt;tag&gt; 命令也很容易切换。要查看可以签出的版本列表，只需运行 git tag-l，然后在找到所需版本时按 q 退出。 就是用 git 命令啦，没啥特别的，但是国内 github 很慢。。。 下载所需版本你可以访问 Flutter 发行版页面下载所需版本的快照，并替换环境变量版本以使用下载的版本 https://flutter.dev/docs/development/tools/sdk/releases 这是我之前常用的方法，免去了下载，每个版本包可是要 1G 了 Flutter CLI您可以尝试使用 flutter dider &lt;version&gt; 命令来降低它的等级，但是您将面临一个无法从 2.x 切换到 1.x 的问题。 Git幸运的是，Flutter SDK 使用 GIT 来管理版本，因此您可以有一个单一的目录来切换，而不像下载每个版本，并减少硬件上的空间。 假设你的 SDK 副本位于 ~/flutter 然后: 12345678910cd ~/flutter# Checkout needed versiongit checkout 1.22.6# Download Dart SDK, tools, etc.flutter doctor# Check Flutter and Dart versionflutter --version 最后，您将看到 flutter --version 命令的输出: 1234Flutter 1.22.6 • channel unknown • unknown sourceFramework • revision 9b2d32b605 (3 months ago) • 2021-01-22 14:36:39 -0800Engine • revision 2f0af37152Tools • Dart 2.10.5 当你需要切换回最新版本时，反之亦然: 1234567891011cd ~/flutter# Switch back to the stable channelflutter channel stable# Switch to latest version# flutter doctor will be invoked at this stepflutter upgrade# Check Dart and Flutter versionflutter --version 如果您对此步骤没有意见，可以通过调用 *.sh 来存储这些脚本并自动执行降级/升级过程。命令行中的 sh 文件。 FVM (Flutter Version Manager) 这也是猫哥我现在用的方式 以前，当我基于 React 和 ReactNative 开发应用程序时，我使用 NPM (节点包管理器)来管理项目中的依赖关系，Flutter 中的一个类似工具是 pub。有时候我需要更改 NPM 版本，但是它对 Node 版本有限制，所以我需要做同样的步骤，下载几个版本，替换目录等等。为了避免这个例程，我使用了 NVM (节点版本管理器) ，我的日子就要好起来了。 幸运的是，Flutter 有一个名为 FVM 的非官方工具，可以做同样的事情，它管理 Flutter 版本并将它们存储在您的硬件上。 https://fvm.app/ FVM 有两种使用方式: 全局指定 flutter 版本 指定你当前项目使用的版本 只需按照安装 https://fvm.app/docs/getting_started/installation 和配置说明的 https://fvm.app/docs/getting_started/configuration 来正确设置你的环境。 另一个令人惊奇的选择是 FVM 的 GUI，称为 Sidekick，它使得全局或本地(项目) Flutter SDK 版本管理更加舒适，如果你不是 CLI 的大粉丝。 老铁记得 点赞、转发 ，我将更有动力呈现 Flutter 好文~~~~ © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter BLoC 用户登录 1","date":"2021-05-05T16:00:00.000Z","path":"2021/05/06/translation/mastering-flutter-bloc-pattern-for-login-part-1/","text":"原文 https://medium.com/theotherdev-s/mastering-flutter-bloc-pattern-for-login-part-1-94082e139725 前言 首先，由于这不是一个基本的教程，我们理所当然地认为这是一个路线的知识，我们也包含了一点点的 validation 与 formoz 包来创建可重用的模型; 这不是本教程的目的，以显示这将如何工作，您将看到这在下一个教程。对于登录部分，出于教程的目的，我们还使用了 BLoC (Cubit) 的子集，因此您将看到这两者之间的区别。 代码，可以先阅读代码，再看文档https://github.com/Alessandro-v/bloc_login 参考 https://pub.flutter-io.cn/packages/equatable https://pub.flutter-io.cn/packages/validation https://pub.flutter-io.cn/packages/flutter_bloc https://pub.flutter-io.cn/packages/formoz 正文 开始在我们开始之前，让我们在 pubspec.yaml 中添加一些必要的包: 123equatable: ^2.0.0flutter_bloc: ^7.0.0formz: ^0.3.2 添加 equatable 包只会使您的工作更加容易，但是如果您想手动比较类的实例，只需要重写 “==” 和 hashCode。 登录状态让我们从一个包含表单状态和所有字段状态的类开始: 123456789101112131415161718192021222324252627class LoginState extends Equatable &#123; const LoginState(&#123; this.email = const Email.pure(), this.password = const Password.pure(), this.status = FormzStatus.pure, this.exceptionError, &#125;); final Email email; final Password password; final FormzStatus status; final String exceptionError; @override List&lt;Object&gt; get props =&gt; [email, password, status, exceptionError]; LoginState copyWith(&#123; Email email, Password password, FormzStatus status, String error, &#125;) &#123; return LoginState( email: email ?? this.email, password: password ?? this.password, status: status ?? this.status, exceptionError: error ?? this.exceptionError, ); &#125;&#125; 现在让我们创建我们的 LoginCubit，它将负责执行逻辑，例如通过 emit 获取电子邮件和输出新状态: 123456789101112131415161718192021222324252627282930313233class LoginCubit extends Cubit&lt;LoginState&gt; &#123; LoginCubit() : super(const LoginState()); void emailChanged(String value) &#123; final email = Email.dirty(value); emit(state.copyWith( email: email, status: Formz.validate([ email, state.password ]), )); &#125; void passwordChanged(String value) &#123; final password = Password.dirty(value); emit(state.copyWith( password: password, status: Formz.validate([ state.email, password ]), )); &#125; Future&lt;void&gt; logInWithCredentials() async &#123; if (!state.status.isValidated) return; emit(state.copyWith(status: FormzStatus.submissionInProgress)); try &#123; await Future.delayed(Duration(milliseconds: 500)); emit(state.copyWith(status: FormzStatus.submissionSuccess)); &#125; on Exception catch (e) &#123; emit(state.copyWith(status: FormzStatus.submissionFailure, error: e.toString())); &#125; &#125;&#125; 但是我们如何将腕尺与我们的用户界面连接起来呢？下面是对 BlocProvider 的解救，这是一个小部件，它使用: BlocProvider.of&lt;logincubit&gt;(context) 为其子部件提供一个区块 1234BlocProvider( create: (_) =&gt; LoginCubit(), child: LoginForm(),), 登入表格既然现在似乎都在他自己的地方，是时候解决我们的最后一块 puzzle，整个用户界面 1234567891011121314151617181920212223242526272829303132333435363738394041424344class LoginForm extends StatelessWidget &#123; const LoginForm(&#123;Key key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return BlocConsumer&lt;LoginCubit, LoginState&gt;( listener: (context, state) &#123; if (state.status.isSubmissionFailure) &#123; print('submission failure'); &#125; else if (state.status.isSubmissionSuccess) &#123; print('success'); &#125; &#125;, builder: (context, state) =&gt; Stack( children: [ Positioned.fill( child: SingleChildScrollView( padding: const EdgeInsets.fromLTRB(38.0, 0, 38.0, 8.0), child: Container( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, mainAxisAlignment: MainAxisAlignment.start, children: [ _WelcomeText(), _EmailInputField(), _PasswordInputField(), _LoginButton(), _SignUpButton(), ], ), ), ), ), state.status.isSubmissionInProgress ? Positioned( child: Align( alignment: Alignment.center, child: CircularProgressIndicator(), ), ) : Container(), ], ) ); &#125;&#125; 为了对 Cubit 发出的新状态做出反应，我们需要将我们的表单包裹在一个 BlocConsumer 中，现在我们将暴露一个监听者和一个建造者。 Listener 这里我们将监听状态更改，例如，在响应 API 调用时显示错误或执行导航。 Builder 在这里，我们将显示 ui 反应状态的变化，我们的 Cubit。 用户界面我们的用户界面由一个列和 5 个子元素组成，但是我们只展示 2 个简短的小部件: 123456789101112131415161718192021222324252627282930313233343536class _EmailInputField extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return BlocBuilder&lt;LoginCubit, LoginState&gt;( buildWhen: (previous, current) =&gt; previous.email != current.email, builder: (context, state) &#123; return AuthTextField( hint: 'Email', key: const Key('loginForm_emailInput_textField'), keyboardType: TextInputType.emailAddress, error: state.email.error.name, onChanged: (email) =&gt; context .read&lt;LoginCubit&gt;() .emailChanged(email), ); &#125;, ); &#125;&#125;class _LoginButton extends StatelessWidget &#123; const _LoginButton(&#123;Key key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return BlocBuilder&lt;LoginCubit, LoginState&gt;( buildWhen: (previous, current) =&gt; previous.status != current.status, builder: (context, state) &#123; return CupertinoButton( child: Text('Login'), onPressed: state.status.isValidated ? () =&gt; context.read&lt;LoginCubit&gt;().logInWithCredentials() : null ); &#125;, ); &#125;&#125; 这两个小部件都包装在一个 BlocBuilder 中，只有当肘位为它们各自的评估属性发出新的状态时，BlocBuilder 才负责重新构建这些小部件，因此，例如，如果用户没有在 email 字段中键入任何内容，EmailInputField 将永远不会被重新构建。 相反，如果所有字段都经过验证，按钮将调用 logInWithCredentials() 函数，该函数将根据 API 响应发出一个新状态(失败或成功)。 老铁记得 点赞、转发 ，我将更有动力呈现 Flutter 好文~~~~ © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 添加APP启动 Story View","date":"2021-05-04T16:00:00.000Z","path":"2021/05/05/translation/story-view-in-flutter/","text":"原文 https://medium.com/flutterdevs/story-view-in-flutter-7bb4ae98b119 前言 在当前的快速市场中，一些社交渠道已经全面爆发，成为各个年龄段聚会的热门话题。漫步在数字环境中，你会注意到新的网络媒体应用程序，比如 Instagram，在过去的一年里热得像火一样。 当你听到“基于网络的媒体应用”这个词时，可能会出现 Facebook、 Instagram、 Twitter 或 Linkedin 等应用程序。然而，你有没有考虑过如何在 Instagram 这样的在线媒体应用程序上显示一个故事？在线媒体应用程序是一个开放的集会，您可以通过一个简单的用户界面与来自世界各地的个人进行联系。 在这个博客中，我们将探 Story View In Flutter 。我们将实现一个故事视图演示程序，以及如何在您的颤动应用程序中使用故事视图包创建类似 WhatsApp 的故事。 类库 https://pub.dev/packages/story_view/install 本文源码https://github.com/flutter-devs/flutter_story_view_demo 正文Flutter Story ViewStory View Flutter 组件工具对 Flutter 开发者很有帮助，通过使用这个类库，你可以显示社交媒体故事页面非常像 WhatsApp 状态故事或 Instagram 状态故事视图。同样可以像 Google 新闻应用程序一样使用内联/内部 ListView 或者 Column。伴随着手势暂停，向前，并进入后面的页面。 这个演示视频显示了如何创建一个 Flutter 的故事视图。它展示了如何在您的 Flutter 应用程序中使用故事视图包来工作。它可以像文本、图片、视频等一样显示你的故事。此外，用户将转发，先前，和手势暂停的情景。它会显示在你的设备上。 Features 功能Story View 的一些特性如下: 简单的文本状态故事 图像、 GIF 图像故事和视频故事(启用缓存) 为上一个、下一个和暂停故事做手势 每个故事项的标题 在每个故事视图的顶部有一个动画的进度指示器 Properties 属性Story View 的一些属性是: controller: 此属性用于控制 Story 的回放 onComplete: 此属性用于在显示 Story 的整个周期时进行回调。每当故事完成时，当 repeat 设置为 true 时，就会调用这个函数 storyItems: 此属性不为空，不显示页 onVerticalSwipeComplete: 此属性用于检测到垂直滑动手势时的回调。如果您不想收听这样的事件，请不要提供它 onStoryShow: 此属性用于当前显示故事时的回调 progressPosition: 此属性用于应放置进度指示符的位置 集成步骤 第一步: 添加依赖项 将依赖项添加到 pubspec ー yaml 文件。 1234dependencies: flutter: sdk: flutter story_view: ^0.12.3 第二步: 导入 1import 'package:story_view/story_view.dart'; 第三步: 拉取包 1&gt; flutter packages get 代码实现你需要分别在你的代码中实现它: 在 lib 文件夹中创建一个名为 status_screen.dart 的新 dart 文件。 在这个屏幕上，我们将创建一个类似 WhatsApp 的用户界面。我们将添加一个容器小部件。在内部，我们将向 ListTile 添加网络图像、文本和 onTap 函数自动换行。在这个函数中，我们将导航到 StoryPageView() 类。 12345678910111213141516171819202122232425Container( height: 80, padding: const EdgeInsets.all(8.0), color: textfieldColor, child: ListView( children: &lt;Widget&gt;[ ListTile( leading: CircleAvatar( radius: 30, backgroundImage: NetworkImage( \"https://images.unsplash.com/photo-1581803118522-7b72a50f7e9f?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8bWFufGVufDB8fDB8fA%3D%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\"), ), title: Text( \"Logan Veawer\", style: TextStyle(fontWeight: FontWeight.bold,color: white ), ), subtitle: Text(\"Today, 20:16 PM\",style: TextStyle(color:white.withOpacity(0.5)),), onTap: () =&gt; Navigator.push( context, MaterialPageRoute( builder: (context) =&gt; StoryPageView())), ), ], ),), 当用户按下容器时，就会显示一个故事页面。我们将深入讨论下面的代码。当我们运行应用程序时，我们应该得到屏幕的输出，就像下面的屏幕截图一样。 在 lib 文件夹中创建一个名为 story_page_view.dart 的新 dart 文件。 首先，我们将创建一个与 StoryController() 相等的 final_controller。 1final _controller = StoryController(); 我们将创建一个 storyItems 列表。首先，我们将添加 StoryItem.text 意味着只添加不同背景颜色的简单文本状态。其次，我们将添加 StoryItem.pageImage 的意思是用控制器添加图像的 URL 来控制故事。最后，我们将使用控制器和图像匹配添加 gif 视频的 URL。 123456789101112131415final List&lt;StoryItem&gt; storyItems = [ StoryItem.text(title: '''“When you talk, you are only repeating something you know. But if you listen, you may learn something new.” – Dalai Lama''', backgroundColor: Colors.blueGrey), StoryItem.pageImage( url: \"https://images.unsplash.com/photo-1553531384-cc64ac80f931?ixid=MnwxMjA3fDF8MHxzZWFyY2h8MXx8bW91bnRhaW58ZW58MHx8MHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\", controller: controller), StoryItem.pageImage( url: \"https://wp-modula.com/wp-content/uploads/2018/12/gifgif.gif\", controller: controller, imageFit: BoxFit.contain),]; 我们将返回一个 Material() 方法。在这个方法中，我们将添加 StoryView()。在内部，我们将添加一个 storyItems、 controller、 inline means 列表，如果您希望将故事显示为整个页面，则将其设置为 false 。但是，如果您要将它作为页面的一部分(如 ListView 或 Column)显示，那么将其设置为 true。我们会添加重复意味着用户应该故事永远重复然后真实，否则，假。 12345678return Material( child: StoryView( storyItems: storyItems, controller: controller, inline: false, repeat: true, ),); 当我们运行应用程序时，我们应该得到屏幕的输出，就像下面的屏幕截图一样。 代码文件1234567891011121314151617181920212223242526272829303132333435363738import 'package:flutter/material.dart';import 'package:story_view/story_view.dart';class StoryPageView extends StatefulWidget &#123; @override _StoryPageViewState createState() =&gt; _StoryPageViewState();&#125;class _StoryPageViewState extends State&lt;StoryPageView&gt; &#123; final controller = StoryController(); @override Widget build(BuildContext context) &#123; final List&lt;StoryItem&gt; storyItems = [ StoryItem.text(title: '''“When you talk, you are only repeating something you know. But if you listen, you may learn something new.” – Dalai Lama''', backgroundColor: Colors.blueGrey), StoryItem.pageImage( url: \"https://images.unsplash.com/photo-1553531384-cc64ac80f931?ixid=MnwxMjA3fDF8MHxzZWFyY2h8MXx8bW91bnRhaW58ZW58MHx8MHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\", controller: controller), StoryItem.pageImage( url: \"https://wp-modula.com/wp-content/uploads/2018/12/gifgif.gif\", controller: controller, imageFit: BoxFit.contain), ]; return Material( child: StoryView( storyItems: storyItems, controller: controller, inline: false, repeat: true, ), ); &#125;&#125; 总结在本文中，我已经解释了 Flutter 的基本结构的 Story View ; 您可以根据自己的选择修改这个代码。这是一个小的介绍 Story View 的用户交互从我这边，它的工作使用 Flutter。 老铁记得 点赞、转发 ，我将更有动力呈现 Flutter 好文~~~~ © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"这10个每个开发者都必须知道的Widgets","date":"2021-05-02T16:00:00.000Z","path":"2021/05/03/translation/these-10-flutter-widgets-every-developer-must-know/","text":"原文 https://genotechies.medium.com/these-10-flutter-widgets-every-developer-must-know-d0b61529796b 这些是我们将要讨论的 widgets: Dismissible SizedBox Draggable Flexible MediaQuery Spacer AnimatedIcon Placeholder RichText ReorderableListView 正文Dismissible滑动和隐藏是移动应用程序中常见的 UI 模式。要在 Flutter 做到这一点，可以使用 Dismissible widget。它有一个 child，background 和 key 。它将检测滑动手势和动画的 child 小部件。你也可以双向和垂直的交换。你可以用自己的方式使用更多的属性。您可以通过复制并粘贴下面的代码来尝试。 1234567891011121314151617181920212223242526272829303132333435class _MyHomePageState extends State&lt;MyHomePage&gt; &#123; List&lt;String&gt; _values = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5']; @override Widget build(BuildContext context) &#123; return ListView.separated( itemCount: _values.length, padding: const EdgeInsets.all(5.0), separatorBuilder: (context, index) =&gt; Divider( color: Colors.black, ), itemBuilder: (context, index) &#123; return Dismissible( key: Key('item $&#123;_values[index]&#125;'), onDismissed: (DismissDirection direction) &#123; if (direction == DismissDirection.startToEnd) &#123; print(\"Selected Item\"); &#125; else &#123; print('Delete item'); &#125; setState(() &#123; _values.removeAt(index); &#125;); &#125;, child: ListTile( leading: Icon(Icons.email, size: 50), title: Text(_values[index]), ), ); &#125; ); &#125;&#125; SizedBox这是一个小部件示例。当你有一个小部件，应该是固定的大小。例如，一个按钮的大小应该为 width = 100px 和 height = 50px。您需要将按钮包装在 SizedBox 中。下面是类的构造函数。 123456const SizedBox(&#123;Key key,double width,double height,Widget child&#125;) Draggable在许多应用程序中，我们可以看到拖动选项，如在电子邮件，文档拖动。有了这个 Flutter 小部件，很容易实现这个功能。在这里，我们拖动数据。这里我传递一个从 Draggable 到 DragTarget 的字符串。然后你需要说明你传递的数据是什么，子属性显示你的数据。DragTarget 目标是拖曳 Draggable 的着陆区。主要有三种调用方法。 onwillAccept: 以测试移动目标是否可以接受数据 onAccept: 调用有效的可拖动区域 onLeave: 当区域不成功时调用 Flexible大多数时候，我们使用行和列来显示一组子窗口小部件。但他们需要灵活的大小来显示与父母的相关性。您只需要将所有子窗口小部件包装在一个灵活的窗口小部件中。Flex 值决定每个子元素获得多少空间。当改变屏幕大小时，它不会改变儿童之间的比例。 12345678910111213141516171819202122child: Column( children: &lt;Widget&gt;[ Flexible( flex: 3, child: Container( color: Colors.red, ) ), Flexible( flex: 1, child: Container( color: Colors.green, ) ), Flexible( flex: 2, child: Container( color: Colors.blue, ) ), ],) MediaQuery如果你的目标是在手机和选项卡上运行你的应用程序，你的应用程序需要支持不同的用户界面大小。此外，有时用户有自己的 UI 期望，如字体大小或小，方向，填充等。使用这个 MediaQuery，您可以获得屏幕大小信息和用户首选项，并根据这些细节构建布局。 1234567891011121314151617const MediaQueryData(&#123; this.size = Size.zero, this.devicePixelRatio = 1.0, this.textScaleFactor = 1.0, this.platformBrightness = Brightness.light, this.padding = EdgeInsets.zero, this.viewInsets = EdgeInsets.zero, this.systemGestureInsets = EdgeInsets.zero, this.viewPadding = EdgeInsets.zero, this.alwaysUse24HourFormat = false, this.accessibleNavigation = false, this.invertColors = false, this.highContrast = false, this.disableAnimations = false, this.boldText = false, this.navigationMode = NavigationMode.traditional,&#125;) 这是一个提取屏幕尺寸的示例。 1MediaQueryData deviceInfo = MediaQuery.of(context); 输出 123I/flutter ( 6508): size: Size(360.0, 592.0)I/flutter ( 6508): padding: EdgeInsets(0.0, 24.0, 0.0, 0.0)I/flutter (6508) : Size: Size (360.0,592.0) i/flutter (6508) : padding: EdgeInsets (0.0,24.0,0.0,0.0) Spacer这是另一个小部件，您最好在事先自定义中使用它。在一行中，我们可以使用 MainAxisAlignment 定义子级之间的空间。但是使用 Spacer 小部件，你可以做得更多。只需在其他小部件之间添加间隔符即可。然后 children 扩展开来制造额外的空间。有一个 flex 属性来确定相对大小。 12345678910111213141516171819202122232425SizedBox( height: 50, child: Row( children: &lt;Widget&gt;[ Container( width: 50, color: Colors.red, ), Spacer(flex: 2,), Container( width: 50, color: Colors.green, ), Spacer(flex: 1,), Container( width: 50, color: Colors.blue, ), Container( width: 50, color: Colors.yellow, ), ], ),); AnimatedIcon已经有一个巨大的图标集已经在框架。也有动画图标，你可以在你的应用程序中使用。要使用这些，我们需要一个 AnimatedIcon 小部件。你需要提供图标和主要的进度属性。Flutter 提供了许多不同的动画图标供您使用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import 'package:flutter/animation.dart';import 'package:flutter/material.dart';void main() =&gt; runApp(LogoApp());class LogoApp extends StatefulWidget &#123; _LogoAppState createState() =&gt; _LogoAppState();&#125;class _LogoAppState extends State&lt;LogoApp&gt; with SingleTickerProviderStateMixin &#123; bool isPlaying = false; Animation animation; AnimationController controller; @override void initState() &#123; super.initState(); controller = AnimationController( duration: const Duration(milliseconds: 500), vsync: this); &#125; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Center( child: IconButton( iconSize: 70, icon: AnimatedIcon( icon: AnimatedIcons.play_pause, progress: controller, ), onPressed: () =&gt; _onpressed(), )), ), ); &#125; @override void dispose() &#123; controller.dispose(); super.dispose(); &#125; _onpressed() &#123; setState(() &#123; isPlaying = !isPlaying; isPlaying ? controller.forward() : controller.reverse(); &#125;); &#125;&#125; Placeholder有时您需要为 UI 的特定组件保留空间，直到最后确定该组件的视图。因此，与其保留一个空间，我们可以在那里放置 Plaholder 以便进一步实现。在你可以开始实施它之后。这将填补所有提到的空间。 1234567891011121314151617181920212223Center( child: Column( children: &lt;Widget&gt;[ Container( child: Placeholder() ), Expanded( child: Row( children: &lt;Widget&gt;[ Flexible( flex: 1, child: Placeholder(color: Colors.red,), ), Flexible( flex: 4, child: Placeholder(color: Colors.green,), ), ], ), ) ], )), RichText文本是每个应用程序的主要 UI 组件之一。因此字体设计非常重要。你必须注意文字的样式和外观，如文字大小、字体、样式等。有时候你需要显示一个结合了不同风格的段落。用粗体表示强调，或用斜体表示，或用下划线表示，或用不同的颜色，不同的字体大小，或同时显示所有内容。你最好使用 RichText。下面是一个例子: 12345678910RichText( text: TextSpan( style: TextStyle(color: Colors.black, fontSize: 24), children: &lt;TextSpan&gt;[ TextSpan(text: 'Flutter ', style: TextStyle(color: Colors.red)), TextSpan(text: 'Placeholder '), TextSpan(text: 'Widget', style: TextStyle(decoration: TextDecoration.underline, fontStyle: FontStyle.italic)) ], ),) ReorderableListView在我们的应用程序中，我们使用列表视图来显示一组数据并滚动它们。通常，您不能移动和更改列表中的位置。ReorderbaleListView 是解决方案。有了它，用户可以长时间按下该项目，并将其放入一个新的他或她喜欢的地方。列表视图的每个项都有一个用于标识该项的键，在移动该项时，调用 onReorder 方法并跟踪移动和更改。下面是一个例子。 12345678910111213141516171819202122232425262728293031323334353637383940class _TopListState extends State&lt;TopList&gt; &#123; List&lt;String&gt; topMovies = [ \"It Happened One Night(1934)\", \"Black Panther(2018)\", \"Citizen Kane(1941)\", \"Parasite (Gisaengchung)(2019)\", \"Avengers: Endgame(2019)\", \"The Wizard of Oz(1939)\", \"Casablanca(1942)\", \"Knives Out(2019)\" ]; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"ReorderableListView Example\"), ), body: ReorderableListView( onReorder: (int oldIndex, int newIndex) &#123;&#125;, children: getListItems(), ), ); &#125; List&lt;ListTile&gt; getListItems() =&gt; topMovies .asMap() .map((i, item) =&gt; MapEntry(i, buildTenableListTile(item, i))) .values .toList(); ListTile buildTenableListTile(String item, int index) &#123; return ListTile( key: ValueKey(item), title: Text(item), leading: Text(\"$&#123;index + 1&#125;\"), ); &#125;&#125; © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 移动安全 ー Ep.2 Strong Device/ Strong Pin","date":"2021-04-29T16:00:00.000Z","path":"2021/04/30/translation/mobile-security-via-flutter-ep-2-strong-device-strong-pin/","text":"原文 https://medium.com/kbtg-life/mobile-security-via-flutter-ep-2-strong-device-strong-pin-70b4322bffc2 前言 在本期节目中，我们将进一步强化您的移动应用程序。“但是怎么做呢?”你可能会好奇。让我们把它比作建造一座房子。为了确保它配备了最高级别的安保系统，你可能需要在房子周围安装所有的警报器和摄像头。但是如果你碰巧把钥匙留在门口，这些都不重要了！对于安全性，我们需要考虑一个坏黑客可能选择攻击的每一种可能性，所以这不仅仅是一个解决方案，然后，一切都完成了。我们必须确保外部和内部的应用程序都是安全的。 上一集，我们讨论了 SSL。你可以把它想象成房子周围高高的篱笆。虽然爬过去比较困难，但还是可以管理的。因此，在本期节目中，我们将确保没有人意外地把钥匙落在门口。 https://medium.com/kbtg-life/mobile-security-via-flutter-ep-1-ssl-pinning-c57f18b711f6 在 iOS/Android 中，已经有一个本地安全 API 来保护他们的应用程序不受外界的攻击，所以我们将使用这个 API 来实现 Flutter。让我们来看看什么是必要的，什么是美好的。 参考 https://pub.dev/packages/flutter_secure_storage https://www.macrumors.com/2020/12/16/ios-14-installed-81-percent-iphones/ https://pub.dev/packages/flutter_jailbreak_detection https://developer.apple.com/documentation/localauthentication/logging_a_user_into_your_app_with_face_id_or_touch_id https://frida.re/ https://developer.android.com/training/sign-in/biometric-auth#crypto https://medium.com/androiddevelopers/using-biometricprompt-with-cryptoobject-how-and-why-aace500ccdb7 https://github.com/zionspike/android-FingerAuthenSample-Asym https://www.researchgate.net/publication/313823128_Understanding_Human-Chosen_PINs_Characteristics_Distribution_and_Security 正文强制性安全的数据存储基本上有两件事你需要记住: 不要在应用程序中保存任何安全信息，比如名字、姓氏、电子邮件、用户名、密码、公民身份，或任何能让黑客追踪并查出用户身份的信息。如果你真的需要保存它，比如一个令牌或者任何你想用来改善用户体验的东西，确保你把它保存在两个操作系统平台都提供的安全的数据存储中。为此，我使用了这个库。 https://pub.dev/packages/flutter_secure_storage 对于 iOS，他们使用 Keychain，即使你删除了应用程序也不会被删除，而对于安卓，他们使用 KeyStore 来存储解密保存的数据的密钥。 额外的安全层总是加密的安全信息，即使 iOS/Android 已经有了安全存储。这是因为在未来，可能会有一种工具，可以让黑客破解设备上的加密。既然我们在讨论加密的话题，我们也需要讨论一下密钥。它应该是动态的和唯一的每个用户，所以我们决定使用用户自己的密码，因为我们可以肯定，只有应用程序所有者知道如何解密它与正确的密码和访问所有保存的数据。 然而，这意味着密码被秘密保存在设备上。如果一个黑客暴力破解了一个密码，他们就会知道这是正确的密码，这可能会更加危险。他们将有足够的时间解密，因为它是在设备上，所以我们的解决方案是使用另一层保护。我们允许黑客使用任何密钥解密，这样他们就不知道哪个是正确的密钥来调用我们的服务器。如果他们输入错误的密码 3 次，后端会自动锁定他们。这将解决这个问题。这里不提供使用任何密钥进行解密的解决方案。 关闭生产中的日志开发人员需要一个日志来查看他们的代码是否正常工作。这对于非生产环境来说没有问题，但是对于生产环境来说，您需要关闭它以防止任何人看到它。为此，我通过在 main.dart 中调用以下代码来覆盖 debugPrint 函数 1debugPrint = (String message, &#123;int wrapWidth&#125;) &#123;&#125;; 这意味着如果我们使用 debugPrint，它将不会打印任何东西。我把它划分为 main_dev。飞镖和主电极。然后把这个函数放在 main_prod 中。这样我们就看不到任何生产日志了。至于非刺激性构建，您可以就这样保留它。没有必要添加任何东西。我们为什么一定要关掉这根木头？这是因为我们不想让任何人看到幕后的应用程序。不要给黑客任何他们下一步行动应该是什么的线索。 从现在开始只使用 debugPrint 而不是 print 不支持旧版本操作系统我们必须把这个设置成本地，而不是 Flutter。我并不是真的担心 iOS，因为 iOS 用户倾向于根据本文的采用率频繁更新操作系统。 https://www.macrumors.com/2020/12/16/ios-14-installed-81-percent-iphones/ 在 iOS 14 发布后仅仅 3 个月，81% 的设备都更新了他们的操作系统。请记住，安全就像猫和老鼠，您需要一直远离潜在的威胁。我们不应该因为操作系统的安全漏洞而尝试支持过时的操作系统版本。在我看来，只支持最新版本或者更早的版本是可以的。例如，现在我们有 iOS 14，所以我们应该只支持 iOS 12,13 和 14。这将允许 98% 的用户使用你的应用程序。我们可以在 Xcode 设定一个最低目标来控制它。 与此同时，Android 是开源的，这意味着谷歌无法控制它。因此，收养率非常低。看看 Android 的公告，看看哪些 Android 操作系统正在变得过时，没有更多的安全补丁。现在他们仍然支持 Android 8.0，所以我们可能不得不将 minSdkVersion 的目标定为 build.gradle 为 26。 简而言之，iOS = 12 及以上/Android = 26 及以上 只在你需要的时候请求许可所有开发人员都应该知道的一件基本事情是，总是在需要时请求权限。不要从一开始就要求许可，只要求你需要的东西。例如，一些应用程序可能会要求访问您的 GPS 位置，即使没有任何功能需要它。你永远不应该这样做，因为两件事。首先，你在收集不必要的数据，这些数据是用户的私人数据。其次，如果这些数据没有被正确实现，黑客也可以访问这些数据。因此，为了安全起见，只问你需要什么和什么时候需要它。当用户第一次打开应用程序时，你不希望用户体验是 10 个弹出窗口。用户将离开，再也不会回来。 越狱检测对于 Flutter，我们使用了原生的越狱检测填充，比如用于安卓系统的 Rootbeer 和用于 iOS 系统的 DTTJailbreakDetection。这两个都是著名的。对于 Flutter，我使用这个库。 https://pub.dev/packages/flutter_jailbreak_detection 尽管对于有经验的黑客来说，它可能还不够强大，但至少我们有东西可以保护我们的应用免受没有经验的黑客的攻击。他们在商业 SDK 中有几个解决方案来保护这一个，但是他们不是强制性的。除非你的应用需要高安全级别，否则 Flutter 越狱检测应该足够了。 利用密码技术进行生物测定目前，许多应用程序为了更好的用户体验而实现了生物特征识别认证。然而，他们中的大多数人只是相信 iOS/Android，我并不真的推荐这样做。首先，我们可能会在 Swift 中看到这样的代码，甚至苹果也推荐这样的代码。 https://developer.apple.com/documentation/localauthentication/logging_a_user_into_your_app_with_face_id_or_touch_id 12345678let reason = “Log in to your account”context.evaluatePolicy(.deviceOwnerAuthentication, localizedReason: reason ) &#123; success, error in if success &#123; // Login Succeed, do something next &#125; else &#123; // Failed, somebody else!! &#125;&#125; 每个人都会相信他们的设备。为什么不呢? 嗯，实际上有一个工具叫做 Frida 脚本。 https://frida.re/ 浏览之后，你会发现使用这个工具绕过生物计量学工具是多么容易。 这里的教训是 DO n’t just trust boolean from devices。这里有一个来自谷歌的教程，其他人已经在 Android 版本中实现了它。 https://developer.android.com/training/sign-in/biometric-auth#crypto https://medium.com/androiddevelopers/using-biometricprompt-with-cryptoobject-how-and-why-aace500ccdb7 https://github.com/zionspike/android-FingerAuthenSample-Asym 这是生物识别和密码复查的结合。您可以使用同样的概念扑动。也就是说，如果你的应用程序没有任何金融或在线支付功能，你可以跳过这一部分。 不要用纯文本发送密码有些人可能会说 HTTPS 是足够安全的，为什么我们必须关心以纯文本发送密码？事实上，黑客可以使用 MITM (中间人攻击文档)以纯文本形式轻松检索你的信息。这就是为什么我们应该在离开移动应用程序之前对密码进行修改，以防黑客窃听，最好的方法就是用盐来修改密码。 hash(password + dynamic salt) 盐应该在短时间内频繁更换，我们可以做一些基本的事情。 hash(password + userID) 尽管用户 ID 是唯一的和动态的，但它并不总是变化的。尽管如此，对于基本安全来说，这是可以接受的。然而，如果你想要实现完全的安全性，你必须找到其他一直在改变的东西，并且使用缓慢的散列算法，比如 Bcrypt 而不是 SHA256，因为它们需要特殊的硬件来破解。 可选，最好去做这部分是针对需要额外安全性的金融或银行应用程序。 反调试对于安卓系统，我们将其分为多个功能 关闭 Debuggable 在 buildTypes 部分中添加此标志以 build.gradle。将 release 设置为 false，debug 设置为 true，或者如果需要，可以将两者都设置为 false。 1234567891011121314buildTypes &#123; release &#123; debuggable false signingConfig signingConfigs.release minifyEnabled true proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; debug &#123; debuggable true signingConfig signingConfigs.release &#125;&#125; 阻止调试器 12345678910111213141516171819// Open ADB Debuggingif (Settings.Secure.getInt(this.applicationContext.contentResolver, Settings.Global.ADB_ENABLED, 0) == 1) &#123;&#125;// Check by using `adb shell getprop ro.crypto.type`if ((applicationContext.getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager).storageEncryptionStatus == DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED) &#123;&#125;// flag debuggable in gradle is trueif ((0 != applicationInfo.flags and ApplicationInfo.FLAG_DEBUGGABLE || BuildConfig.DEBUG)) &#123;&#125;// Use Debugger in Android Studio to connect for getting logif (Debug.isDebuggerConnected() || Debug.waitingForDebugger()) &#123;&#125; 您可以复制上面的代码并将其粘贴到 MainActivity.kt。如果是真的，你可以把用户踢出去或者做任何你想做的事情。请允许我解释一下。 打开 ADB 调试防止用户打开 ADB 模式。虽然这没有必要，因为大多数 Android 开发人员总是在需要测试应用程序的时候打开它。这取决于你是否祝酒消息警告用户或评论它出来。 不支持 ENCRYPTION _ status _ unsupported 以检查设备是否支持存储加密。在安卓系统中，默认情况下它应该是开启的。如果它被关闭了，那么他们的设备就出了问题，因为用户通常不能自己做到这一点。为了防止上述风险，我们只是不允许任何人使用它。 ApplicationInfo.FLAG_DEBUGGABLE 检查我们在 Gradle 添加的标志调试是否为 true。如果没有，不要让用户使用它。和上一个一样，这是用户无法改变的东西，除非有人反向工程你的应用程序，并打包为 APK 再次。 来检查你的应用程序是否连接到了 Android Studio 调试器。如果是，不要让用户使用它。 至于 iOS，现在还没有简单的方法来实现它，但是你可以找到一些商业 SDK 来帮助你实现它。 检查设备是否有安全访问有些用户可能决定不在他们的设备上安装针、手指扫描或面部扫描。如果有人偷了他们的设备，他们只需要解锁就可以了。拥有这种类型的安全措施就像是安全的第一道门。 在 Android 中，我使用 Flutter 通道调用 Flutter 来配置 FlutterEngine 功能，让 Flutter 来决定如何处理这个用户。下面是 Android 的代码，用来检查设备是否有密码。 12345678private val CHANNEL = &quot;com.kbtg.flutter&quot;MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler &#123; call, result -&gt; if (call.method == &quot;getDeviceHasPasscode&quot;) &#123; result.success((getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager).isDeviceSecure) &#125; else &#123; result.notImplemented() &#125;&#125; 请拨打以下电话到 Flutter。 1234567891011121314try &#123; final hasPasscode =await Storage.platform.invokeMethod(&apos;getDeviceHasPasscode&apos;); if (!hasPasscode) &#123; Toast.show( &quot;No pin, DANGER DANGER&quot;, context, duration: 5, gravity: Toast.BOTTOM, ); &#125;&#125; on PlatformException catch (e) &#123; debugPrint(&quot;==== Failed to scan security &apos;$&#123;e.message&#125;&apos; ====&quot;);&#125; 如果 hasPasscode 是错误的，我们只是烤的消息，以警告用户，你没有一个针激活在您的设备。 如果需要，关闭第三方键盘有些第三方键盘可能是恶意的。你永远不会知道他们是否已经实现了秘密地将你输入的密码发送到他们的服务器上的功能。对于 Android 来说，没有简单的方法来防止这种情况，因为所有的键盘都算作第三方键盘，甚至 Android 自己的键盘。解决这个问题的办法是自己实现一个安全的键盘，方法是使用带有字母和数字的布局从头开始构建一个键盘。 但是，对于 iOS 系统，我们可以使用下面的函数来禁用它，只限制使用本地键盘 123override func application(_ application: UIApplication, shouldAllowExtensionPointIdentifier extensionPointIdentifier: UIApplicationExtensionPointIdentifier) -&gt; Bool &#123; return extensionPointIdentifier != .keyboard&#125; 检查代码完整性可以对 IPA 和 APK 进行反编译，以更改内部的一些代码并重新构建以便再次发布。黑客修改的代码可能是你连接到同一个服务器，但是每个信息也会推送到黑客的服务器。对于 IPA 来说，我并不担心，因为从 App Store 以外安装应用程序是相当复杂的。你必须先安装证书并接受某些条件或破解你的设备才能安装它。至于安卓系统，它很容易伪造一个应用程序，因为它更开放，允许任何用户安装外部的 APK 只需要 1-2 次点击。 这就是代码完整性的用武之地。你可以计算你的应用程序的校验和，并在每次打开应用程序之前检查它是否仍然和你部署到应用程序商店的应用程序一样。这个概念听起来很简单，但是很难实现。幸运的是，有一个商业 SDK 可以解决这个问题，所以我们不需要自己动手。 代码混淆对于我们实现或保存到应用程序中的所有业务逻辑和安全逻辑，我们需要确保没有人能够反编译并查看源代码。如果黑客能看到它，他们就会知道我们用哪种逻辑来加密数据，或者我们在哪里存储安全信息。他们可以模仿这种逻辑，发送到他们的服务器，而不是使用我们的应用程序。对于代码混淆，可以使用商业 SDK 来加强应用程序。 你可能已经注意到我经常提到商业 SDK。有些人可能会想，“如果是这样的话，这篇文章的意义何在？我写这篇文章是为了寻找一种在应用程序中实现它的方法，而不是仅仅转到另一个链接。” 没有人什么都擅长。使用商业 SDK 就像拥有一个专注于安全工作的专业团队。你自己不能实现和关闭所有的安全漏洞，所以最好把它留给专家，他们知道他们在做什么，你做你最擅长的是开发应用程序。 现在你的应用外壳更加坚固，你的用户不再把钥匙留在门上，让我们确保房子的钥匙不容易被复制。我说的是密码和密码 Stronger PinPin 或 password 是一种确认你是账户真正所有者的方法。我们选择为应用程序设置一个密码，有两个原因。 更好的用户体验尽管密码更安全，但考虑到 A-Z、0-9 和特殊字符可以组成十亿种可能的组合，在设备上使用小键盘输入太难了。在进入你的应用程序之前，你可能会花费大量的时间。这就是为什么我们采用一个 6 位数的引脚来代替。虽然你只能用 4 个数字创建 10,000 个可能的引脚，但 6 个数字给你 1,000,000 个可能性，这是 100 倍的难度。 人们可以在 2-3 秒内输入一个密码，但是一个密码可能会花费他们 10-15 秒，这取决于它有多难。 易于记忆是的，我们希望让黑客难以破解密码，但我们也希望我们的用户能够不费吹灰之力地记住它。由于 pin 是 iOS/Android 的基本安全访问设备，它不应该发布任何挑战，因为用户已经习惯了 对于销子，我们不想让它变得太容易。“‘太容易’到底是什么意思?”你问。好吧，让我们说得更具体一点。 针没有标准，所以我从网上的研究中得出了一个想法。请看下面的链接。 https://www.researchgate.net/publication/313823128_Understanding_Human-Chosen_PINs_Characteristics_Distribution_and_Security 根据上述模式，我们得出以下规则 不允许有序列号，例如 123456、234567、345678 ー包括反序列号，例如 654321、543210 不要使用「同一行别针」 ，例如 123123、456456、789789 只允许 3 个或 3 个以上的唯一数字，例如 122112 个是不允许的，但 123321 个是可以的(即使这可能与上面的统计数据相矛盾)155115,133133,166661 是不允许的，因为只有两个不同的数字在密码中使用 有些人甚至建议禁用生日别针，比如如果你的生日是 1986 年 6 月 8 日，你就不能用 080686 作为别针来防止黑客利用这些信息入侵。但是，我不这样做只是因为我不在系统中保存用户的生日 我们不想制定太多的规则。否则，你会删除所有的密码组合，更糟糕的是，黑客更容易暴力破解它。我们可以制定更多的规则，但是如果 100 万种可能性变成 100-200 个引脚，那又有什么意义呢？ 使用上面的方法，我们仍然有大约 60,000 种可能性供用户使用。下面是实现它的示例代码。 12345678910111213141516171819202122static bool isPinComplexity(String pin) &#123; const notAllowListPin = [ &quot;123123&quot;, &quot;456456&quot;, &quot;789789&quot;, &quot;012345&quot;, &quot;123456&quot;, &quot;234567&quot;, &quot;345678&quot;, &quot;456789&quot;, &quot;567890&quot;, &quot;098765&quot;, &quot;987654&quot;, &quot;876543&quot;, &quot;765432&quot;, &quot;654321&quot;, &quot;543210&quot; ]; final pinSet = new Set.from(pin.split(&quot;&quot;)); final uniqueCharacter = pinSet.length &gt; 2; return uniqueCharacter &amp;&amp; !notAllowListPin.contains(pin);&#125; 您可以使用 isPinComplexity 来检查引脚。如果返回 true，我们允许用户添加它。不要忘记将所有可能的散列也添加到后端。我们在前端实现只是为了更好的用户体验，这样用户就不必打电话给网络，从服务器和服务器上被拒绝，以确保如果黑客试图绕过别针，服务器将不允许它。 你可以根据你的需要在 notAllowListPin 中添加更多的条件，但是我现在很好。 因此，对于我们实施的所有这些解决方案，我们要确保我们的应用程序配备了另一层保护。 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 移动安全 ー Ep.1 SSL Pinning","date":"2021-04-28T16:00:00.000Z","path":"2021/04/29/translation/mobile-security-via-flutter-ep-1-ssl-pinning/","text":"原文 https://medium.com/kbtg-life/mobile-security-via-flutter-ep-1-ssl-pinning-c57f18b711f6 前言 这篇文章还是很好的，作者是一个银行从业者，简单说就是在你的程序里指定 ssl 通讯证书，提供安全性。 为啥这样做呢，比如你用公共 wifi ，这时候打开 www.taobaomy.com 竟然证书显示机构 “淘宝官方”，这显然是伪造的。 还有你确实访问了 www.taobao.com ，但是被公共 wifi 中间劫持替换证书，重定向去了他的网站，你输入的 用户名、密码 都被窃取了。 所以说呢，验证通讯证书很有必要。 如果觉得好，请分享到朋友圈。 参考 https://owasp.org/ https://api.flutter.dev/flutter/dart-io/HttpClient/badCertificateCallback.html https://github.com/dart-lang/sdk/issues/39425#issuecomment-680312787 https://pub.dev/packages/ssl_pinning_plugin 正文由于 2019 冠状病毒疾病的流行，我们看到移动应用程序的使用量有了很大的增长。开发人员必须不断跟上新特性的发展，或者改善更好的用户体验。随着一切都在网上进行，越来越多的钱涌入这个行业，这些自然而然的坏家伙(也就是坏黑客)想要利用它。我敢肯定我们都知道设计思维和如何与用户产生共鸣，因为如果我们从未使用过我们的产品，或者更糟糕的是，喜欢它，你还能指望用户如何喜欢我们的产品吗？是时候设身处地为别人着想了。在 KBTG，我们有一个叫做“狗食”的程序。你们中的一些人可能听说过这个成语“吃自己的狗粮”。这意味着你必须在别人喜欢你的产品之前使用你的产品，坚持使用你的产品，并且热爱你的产品。有些人可能会认为用户喜欢的是前沿的特性或者很酷的设计，但是在 KBTG，我们不仅仅局限于其中的两个。 安全是我们同情用户的另一个重要组成部分。他们信任我们，向我们提供他们有价值的私人信息，所以我们的荣誉和责任就是为我们的系统提供完全的内部和外部保护。所谓内部人员，我们指的是像我们这样的开发人员。出于数据隐私的原因，我们根本没有能力查看我们的数据库或查看用户的信息。所有的东西都是加密的，我们的团队中没有人可以访问这个密钥。这个过程表明我们是多么关心我们的用户。对我们来说困难的部分是当我们遇到一个问题，它是很难调查，因为我们没有访问原始数据来解决它，但我们接受这个挑战，因为我们自豪地保护我们的用户隐私。 在本系列文章中，我将分享我从银行业工作中获得的知识，我坚信这些知识体现了最高安全性的领域。我的向导没那么难。我只是遵循 OWASP 的标准。 https://owasp.org/ 我会告诉你如何在 Flutter 中实现这个。我们还没有尝试开发一个具有超级安全性的应用程序，但这将是指导所有移动应用程序的基本的，必须具备的安全性。实现过程并不复杂。这可能需要你 10 天左右的时间来开发。是的，只有 10 天！与通常需要 80-90 天的功能相比，这听起来几乎没什么。让我们从 SSL 钉住开始本系列的第一集。 SSL PinningSSL Pinning 可以防止 MITM (Man in the Middle Attack) ，但那到底是什么呢？ 简而言之，当你连接到一个公共 WIFI 或热点时，负责网络的 IT 人员，无论好坏，都可以把流量从你的移动设备传送到你连接的服务器。想了解更多细节，你可以去专业网站上查找，比如下面的一个。底线是不要使用公共 WIFI 或任何其他人的热点！ Credit 信用 https://www.guardsquare.com/en/blog/iOS-SSL-certificate-pinning-bypassing 开始实现如果您正在调查 Stackoverflow 关于 Flutter 或 Dart 中 SSL pinting 的内容，那么您可能会找到一个关于 badCertificateCallback 的解决方案。 https://api.flutter.dev/flutter/dart-io/HttpClient/badCertificateCallback.html 基本上，您可以通过告诉 Flutter 不要信任任何证书(除了您在移动应用程序中提供的证书)来覆盖 Flutter。下面是如何实现的方法。 12345HttpClient _client = new HttpClient(context: await globalContext);_client.badCertificateCallback =(X509Certificate cert, String host, int port) =&gt; false;var _ioClient = new IOClient(_client);_ioClient.get(url) 创建 HttpClient，将 globalContext 传递给它，并将 badcertificateecallback 分配为 false。 获得 ioClient 之后，可以使用它调用 GET、 POST、 PUT、 DELETE。上面的代码表明我只会信任其中的两个证书，因此如果其他证书在移动应用程序有请求时被发送，它将在获得 badCertificateCallback 后停止工作。 以下是获取 GlobalContext 的方法。 1234567891011Future&lt;SecurityContext&gt; get globalContext async &#123; // Note: Not allowed to load the same certificate final sslCert1 = await rootBundle.load('assets/cert/certificate.pem'); final sslCert2 = await rootBundle.load('assets/cert/certificate2.pem'); SecurityContext sc = new SecurityContext(withTrustedRoots: false); sc.setTrustedCertificatesBytes(sslCert1.buffer.asInt8List()); sc.setTrustedCertificatesBytes(sslCert2.buffer.asInt8List());return sc;&#125; 为了获得 certificate.pem，我使用这个脚本从服务器获得公钥，并在 Terminal 中运行这个命令以获得 certificate.pem 文件。不要忘记在没有 HTTP 或 HTTPs 的情况下将“ your-url. com”更改为您的网站。 1openssl s_client -showcerts -connect your-url.com:443 -servername your-url.com &lt;/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; certificate.pem 一旦你获得了 certificate.pem，把你的证书放到你的目标资产中，并将你的资产添加到 pubspec.yaml 中。我将它添加到 cert 文件夹中。 12assets: - assets/cert/ 您可以设置任意多的信任证书，但我通常只设置四个证书。原因是你拥有的越多，你就越容易被黑客攻击。但是为什么是四个呢？对于防火墙，我使用 Akamai 在到达服务器之前阻止和过滤请求，消除系统中的坏请求、匿名请求和 DDoS 攻击。因此，两个证书是为 Akamai，而其他两个是为了更新证书在未来。我曾经试图固定相同的证书或无效的证书，结果 Dart 像预期的那样抛给我一个错误。 一旦我们完成了以上所有的工作，一切似乎都在工作。如果您更改了服务器上的证书，应用程序将停止工作。呜呼！任务完成了，对吧？一开始是我..。 直到我发现了 badCertificateCallback 的一个大问题。 https://github.com/dart-lang/sdk/issues/39425#issuecomment-680312787 原来 badCertificateCallback 在没有检查通用名称的情况下就固定了中间证书，这造成了一个严重的安全问题，因为坏的黑客也可以创建这些证书。例如，在我的例子中，我将 Let’s Encrypt 作为一个中间证书，因此如果一个黑客创建了假证书并将其发送到我们的应用程序，它将接受这个请求！因为我们不检查通用名称，并假设证书来自同一证书提供程序。 为了解决这个问题，我还必须使用另一种方法检查该证书的 SHA256。 123456Future&lt;bool&gt; get _isAllowList async &#123; const myAllowList = \"xxxxxxx\"; final x509Cert1 = await _readPemCert('assets/cert/certificate.pem'); X509CertificateData data = X509Utils.x509CertificateFromPem(x509Cert1); return data.sha256Thumbprint == myAllowList&#125; 来自下面的函数。这可能不是一个好的解决方案，因为我不知道证书是如何工作的，所以我只使用字符串操作: p 基本上，我只是削减了证书的其他部分，只得到最后一部分。 12345678Future&lt;String&gt; _readPemCert(String path) async &#123; final sslCert = await rootBundle.load(path); final data = sslCert.buffer.asUint8List(); final pemString = utf8.decode(data); final pemArray = pemString.split(\"-----END CERTIFICATE-----\"); final cert = [pemArray[0], \"-----END CERTIFICATE-----\"].join(\"\"); return cert;&#125; 然后，我使用 libs basic_utils 来解析证书。把这个加到你的 pubspec.yaml 里。我不能用 basic 语言解析整个证书，所以我必须这样做。 1basic_utils: ^2.7.0-rc.4 使用 get X509Utils 获得 sha256 来与允许列表进行比较，这个允许列表在省道中保存为常量。现在，我们可以使用两个方法(badCertCallback 和 X509Utils)再次检查安全性，以查看添加到允许列表中的证书和来自服务器的 Sha256 是否相同。 最近，在我实现了我的方法之后，我发现了一个关于 SSL 固定的新的库。 https://pub.dev/packages/ssl_pinning_plugin 由于我的解决方案已经被移动安全渗透测试接受，我还没有测试过这个解决方案，所以我决定坚持使用旧的解决方案。它可能看起来不那么干净，但是它正如预期的那样工作，所以我称之为成功。 © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 中使用 HUD Progress 组件","date":"2021-04-27T16:00:00.000Z","path":"2021/04/28/translation/hud-progress-in-flutter/","text":"原文 https://medium.com/flutterdevs/hud-progress-in-flutter-281ed0f644d0 前言在 flutter 中，我们显示任何进度指示器，因为我们的应用程序是繁忙的或在搁置，为此，我们显示一个循环的进度指示器。覆盖加载屏幕显示一个进度指示器，也称为模态进度 HUD 或平视显示，这通常意味着应用程序正在加载或执行一些工作。 在本文中，我们将利用 HUD 进程程序包来探讨平视显示器在 flutter 方面的进展。有了这个软件包，我们可以很容易地实现平视显示的颤振进度。那么让我们开始吧。 pub.devhttps://pub.dev/packages/flutter_progress_hud https://pub.dev/packages/flutter_progress_hud/example 正文HUD ProgressFlutter HUD Progress 是一种进度指示器库，就像一个循环的进度指示器。在这里，HUD 意味着一个抬头显示器/进度弹出对话框将打开以上的屏幕，将有一个循环的进度指示器。使用这个库，我们可以使用我们的 flutter 。应用程序可以显示循环进度指示器。 属性 borderColor:边框/颜色: 边框颜色属性用于更改指示符背景边框颜色 backgroundColor:背景颜色: 背景颜色属性用于更改指示器背景的颜色 indicatorColor:标志/颜色: 背景颜色属性用于更改指示器背景的颜色 textStyle:文字样式: 属性用于指示符下面显示的文本，文本的颜色和样式可以在该属性中更改 安装 第一步: 添加依赖项 将依赖项添加到 pubspec ー yaml 文件。 12dependencies: flutter_progress_hud: ^2.0.0 第二步: 导包 1import 'package:flutter_progress_hud/flutter_progress_hud.dart'; 第三步: 启用 AndriodX 1234org.gradle.jvmargs=-Xmx1536Mandroid.enableR8=trueandroid.useAndroidX=trueandroid.enableJetifier=true 例子在 lib 目录中创建一个名为 progress_hud_demo.dart 的新 dart 文件。 在创建 Flutter HUD Progress 之前，我们包装了一个进度遮光罩的容器，其次是建设者类。在内部，我们使用了我们的小部件，并定义了进度指示器的边框颜色和背景颜色。让我们详细地了解一下这一点。 1234567891011ProgressHUD( borderColor:Colors.orange, backgroundColor:Colors.blue.shade300, child:Builder( builder:(context)=&gt;Container( height:DeviceSize.height(context), width:DeviceSize.width(context), padding:EdgeInsets.only(left:20,right:20,top:20), ), ),), 现在我们已经采取了一个按钮，在其中指示器设置持续时间 5 秒的指示器时间未来。delayed() 并显示进度的文本。 123456789101112131415Container( margin: EdgeInsets.only( left:20.0, right:20.0, top:55.0), child: CustomButton( mainButtonText:'Submit', callbackTertiary:()&#123; final progress = ProgressHUD.of(context); progress.showWithText('Loading...'); Future.delayed(Duration(seconds:5), () &#123; progress.dismiss(); &#125;); &#125;, color:Colors.blue, ),), 当我们运行应用程序时，我们应该得到屏幕的输出，就像下面的屏幕截图一样。 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778import 'package:flutter/material.dart';import 'package:progress_hud_demo/shared/custom_button.dart';import 'package:progress_hud_demo/shared/custom_text_field.dart';import 'package:progress_hud_demo/themes/device_size.dart';import 'package:flutter_progress_hud/flutter_progress_hud.dart';class ProgressHudDemo extends StatefulWidget &#123; @override _ProgressHudDemoState createState() =&gt; _ProgressHudDemoState();&#125;class _ProgressHudDemoState extends State&lt;ProgressHudDemo&gt; &#123; bool _isInAsyncCall = false; @override Widget build(BuildContext context) &#123; return Scaffold( backgroundColor:Colors.white, appBar:AppBar( backgroundColor:Colors.blue, title:Text('Flutter HUD Progress Demo'), elevation:0.0, ), body:ProgressHUD( borderColor:Colors.orange, backgroundColor:Colors.blue.shade300, child:Builder( builder:(context)=&gt;Container( height:DeviceSize.height(context), width:DeviceSize.width(context), padding:EdgeInsets.only(left:20,right:20,top:20), child:Column( crossAxisAlignment:CrossAxisAlignment.start, children: [ Column( crossAxisAlignment:CrossAxisAlignment.start, children: [ Text('Sign In',style:TextStyle(fontFamily:'Roboto Bold',fontSize:27,fontWeight:FontWeight.bold),), ], ), SizedBox(height:50,), Column( children: [ CustomTextField(hintText: 'Email', type:TextInputType.text, obscureText: false), SizedBox(height:35,), CustomTextField(hintText: 'Password', type:TextInputType.text, obscureText: true), ], ), Container( margin: EdgeInsets.only( left:20.0, right:20.0, top:55.0), child: CustomButton( mainButtonText:'Submit', callbackTertiary:()&#123; final progress = ProgressHUD.of(context); progress.showWithText('Loading...'); Future.delayed(Duration(seconds:5), () &#123; progress.dismiss(); &#125;); &#125;, color:Colors.blue, ), ), ], ), ), ), ), ); &#125;&#125; © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合译文https://ducafecat.tech/categories/%E8%AF%91%E6%96%87/ Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"flutter 交互式用户指导，以及如何在布局中创造一个洞","date":"2021-04-26T16:00:00.000Z","path":"2021/04/27/translation/flutter-interactive-user-guidanc-e-or-how-to-make-a-hole-in-layout/","text":"原文https://medium.com/litslink/flutter-interactive-user-guidanc-e-or-how-to-make-a-hole-in-layout-d72bf6eb27f9 代码https://github.com/alex-melnyk/flutter_user_guidance 正文 大家好！我想给你看一个有趣的 Flutter 特征。我们可以建立交互式的用户指导使用 blending 混合颜色。 这个简单的技巧可以让你在应用程序中建立有趣的用户指南，而不仅仅是一张图片。它可以真正与动画等互动。 布局首先，要构建覆盖，您需要将目标页面的 Scaffold 小部件包装到 Stack 小部件中，并将 Scaffold 小部件作为第一个项目保留。 12345678910111213141516171819202122232425262728293031323334353637383940@overrideWidget build(BuildContext context) &#123; final theme = Theme.of(context); return Stack( children: [ Scaffold( appBar: AppBar( title: Text('Flutter User Guidance Example'), centerTitle: false, actions: [ IconButton( icon: Icon(Icons.slideshow), onPressed: () =&gt; _userGuidanceController.show(), ), ], ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ Text( 'You have pushed the button this many times:', ), Text( '$_counter', style: theme.textTheme.headline4, ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: _handleFABPressed, tooltip: 'Increment', child: Icon(Icons.add), ), ), ], );&#125; 对于第二个地方，创建一个覆盖整个脚手架的覆盖图，使用一点透明的深/浅背景。Root ColorFiltered 具有混合模式“ source out”，内部 Container 在后台具有“ destination out”，这允许我们剪切小部件以在 root ColorFiltered 小部件中剪切它们。 123456789101112131415161718192021222324252627Positioned.fill( child: ColorFiltered( colorFilter: ColorFilter.mode( Colors.black87, BlendMode.srcOut, ), child: Stack( children: [ Positioned.fill( child: Container( decoration: BoxDecoration( color: Colors.black, backgroundBlendMode: BlendMode.dstOut, ), ), ), Center( child: Container( width: 150, height: 150, color: Colors.white, ), ), ], ), ),), 例如，在这个例子中，我们有一个容器，大小为 150x150，颜色为白色，需要混合的颜色，不应该是完全透明的，否则你不会看到它。因此，颜色是需要混合，以了解什么地区剪出来。 使用者指引当然，您需要添加一些单词或元素来引导用户浏览指南。在这种情况下，您可以将小部件放在同一个 Stack 中经过过滤的 root ColorFiltered 上。 123456789101112131415161718192021222324Align( alignment: Alignment.bottomLeft, child: Material( color: Colors.transparent, child: Container( margin: EdgeInsets.only( left: 16, bottom: 38, ), padding: EdgeInsets.symmetric( horizontal: 16, vertical: 8, ), decoration: BoxDecoration( color: Colors.white, borderRadius: BorderRadius.circular(5), ), child: Text( 'Hello Interactive User Guidance!\\n' 'Tap on + button to increase the number...' ), ), ),), 请记住，Stack 小部件来自 Scaffold 并且没有任何 Material 支持，所以用一个 Material 小部件包装它就足够了。 这里有一个完整的例子，如果你把所有这些步骤都做对了，你会看到同样的图片。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899@overrideWidget build(BuildContext context) &#123; final theme = Theme.of(context); return Stack( children: [ Scaffold( appBar: AppBar( title: Text('Flutter User Guidance Example'), centerTitle: false, actions: [ IconButton( icon: Icon(Icons.slideshow), onPressed: () =&gt; _userGuidanceController.show(), ), ], ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ Text( 'You have pushed the button this many times:', ), Text( '$_counter', style: theme.textTheme.headline4, ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: _handleFABPressed, tooltip: 'Increment', child: Icon(Icons.add), ), ), Positioned.fill( child: ColorFiltered( colorFilter: ColorFilter.mode( Colors.black87, BlendMode.srcOut, ), child: Stack( children: [ Positioned.fill( child: Container( decoration: BoxDecoration( color: Colors.black, backgroundBlendMode: BlendMode.dstOut, ), ), ), Align( alignment: Alignment.bottomRight, child: Container( margin: EdgeInsets.only( right: 9, bottom: 27, ), width: 70, height: 70, decoration: BoxDecoration( color: Colors.white, shape: BoxShape.circle, ), ), ), ], ), ), ), Align( alignment: Alignment.bottomLeft, child: Material( color: Colors.transparent, child: Container( margin: EdgeInsets.only( left: 16, bottom: 38, ), padding: EdgeInsets.symmetric( horizontal: 16, vertical: 8, ), decoration: BoxDecoration( color: Colors.white, borderRadius: BorderRadius.circular(5), ), child: Text( 'Hello Interactive User Guidance!\\n' 'Tap on + button to increase the number...' ), ), ), ), ], );&#125; 动画和步骤我准备了一个简单的例子，通过动画剪辑区域从矩形切换到圆形并移动，从一个指导切换到另一个。只要查看我的仓库，就能获得这种体验。 完整的项目源代码可以在 GitHub 上找到。 https://github.com/alex-melnyk/flutter_user_guidance © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter Getx 04 - GetConnect、StateMixin、SuperController、GetController + Dio","date":"2021-04-22T16:00:00.000Z","path":"2021/04/23/flutter-getx/flutter-getx-04-getconnect-statemixin-dio/","text":"本节目标 GetConnect StateMixin GetController + Dio SuperController 视频https://www.bilibili.com/video/BV17B4y1c7eF 代码https://github.com/ducafecat/getx_quick_start 参考 https://pub.flutter-io.cn/packages/get#getconnect 正文GetConnect 瞎聊设计模式 Provider 提供者模式 位于高层 由他来决定从哪里、提供什么 相对应的有 Consumer 消费者模式 Repository 模式，这层有 OO 面向对象的意思，用来处理拉取数据细节，这样到 Controller 控制器 这一层只要处理业务就行，可方便测试 DAO 就是纯粹的数据访问层，没有 00 的概念 Service Model Entity … 前端其实对数据加工、面向服务、领域模型偏弱，更多的是组件拆分、样式、布局，这才是要关系的，就算是测试也是 E2E 侧重不同。 E2E（End To End）即端对端测试，属于黑盒测试，通过编写测试用例，自动化模拟用户操作，确保组件间通信正常，程序流数据传递如预期。 封装 GetConnect lib/common/utils/base_provider.dart 1234567891011121314151617class BaseProvider extends GetConnect &#123; @override void onInit() &#123; httpClient.baseUrl = SERVER_API_URL; // 请求拦截 httpClient.addRequestModifier&lt;void&gt;((request) &#123; request.headers['Authorization'] = '12345678'; return request; &#125;); // 响应拦截 httpClient.addResponseModifier((request, response) &#123; return response; &#125;); &#125;&#125; Provider lib/pages/getConnect/provider.dart 12345678910111213141516171819abstract class INewsProvider &#123; Future&lt;Response&lt;NewsPageListResponseEntity&gt;&gt; getNews();&#125;class NewsProvider extends BaseProvider implements INewsProvider &#123; // 新闻分页 // @override // Future&lt;Response&lt;NewsPageListResponseEntity&gt;&gt; getNews() =&gt; get(\"/news\"); @override Future&lt;Response&lt;NewsPageListResponseEntity&gt;&gt; getNews() async &#123; var response = await get(\"/news\"); var data = NewsPageListResponseEntity.fromJson(response.body); return Response( statusCode: response.statusCode, statusText: response.statusText, body: data, ); &#125;&#125; Repository lib/pages/getConnect/repository.dart 123456789101112131415161718abstract class INewsRepository &#123; Future&lt;NewsPageListResponseEntity&gt; getNews();&#125;class NewsRepository implements INewsRepository &#123; NewsRepository(&#123;required this.provider&#125;); final INewsProvider provider; @override Future&lt;NewsPageListResponseEntity&gt; getNews() async &#123; final response = await provider.getNews(); if (response.status.hasError) &#123; return Future.error(response.statusText!); &#125; else &#123; return response.body!; &#125; &#125;&#125; Controller lib/pages/getConnect/controller.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class NewsController extends SuperController&lt;NewsPageListResponseEntity&gt; &#123; NewsController(&#123;required this.repository&#125;); final INewsRepository repository; @override void onInit() &#123; super.onInit(); //Loading, Success, Error handle with 1 line of code // append(() =&gt; repository.getNews); &#125; // 拉取新闻列表 Future&lt;void&gt; getNewsPageList() async &#123; append(() =&gt; repository.getNews); &#125; @override void onReady() &#123; print('The build method is done. ' 'Your controller is ready to call dialogs and snackbars'); super.onReady(); &#125; @override void onClose() &#123; print('onClose called'); super.onClose(); &#125; @override void didChangeMetrics() &#123; print('the window size did change'); super.didChangeMetrics(); &#125; @override void didChangePlatformBrightness() &#123; print('platform change ThemeMode'); super.didChangePlatformBrightness(); &#125; @override Future&lt;bool&gt; didPushRoute(String route) &#123; print('the route $route will be open'); return super.didPushRoute(route); &#125; @override Future&lt;bool&gt; didPopRoute() &#123; print('the current route will be closed'); return super.didPopRoute(); &#125; @override void onDetached() &#123; print('onDetached called'); &#125; @override void onInactive() &#123; print('onInative called'); &#125; @override void onPaused() &#123; print('onPaused called'); &#125; @override void onResumed() &#123; print('onResumed called'); &#125;&#125; GetView lib/pages/getConnect/view.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class NewsView extends GetView&lt;NewsController&gt; &#123; NewsView(&#123;Key? key&#125;) : super(key: key); _buildListView(NewsPageListResponseEntity? state) &#123; return ListView.separated( itemCount: state != null ? state.items!.length : 0, itemBuilder: (context, index) &#123; final NewsItem item = state!.items![index]; return ListTile( onTap: () =&gt; null, title: Text(item.title), trailing: Text(\"分类 $&#123;item.category&#125;\"), ); &#125;, separatorBuilder: (BuildContext context, int index) &#123; return Divider(); &#125;, ); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"GetConnect Page\"), ), body: controller.obx( (state) =&gt; _buildListView(state), onEmpty: Text(\"onEmpty\"), onLoading: Center( child: Column( children: [ Text(\"没有数据\"), ElevatedButton( onPressed: () &#123; controller.getNewsPageList(); &#125;, child: Text('拉取数据'), ), ], ), ), onError: (err) =&gt; Text(\"onEmpty\" + err.toString()), ), ); &#125;&#125; Bindings lib/pages/getConnect/bindings.dart 12345678class NewsBinding implements Bindings &#123; @override void dependencies() &#123; Get.lazyPut&lt;INewsProvider&gt;(() =&gt; NewsProvider()); Get.lazyPut&lt;INewsRepository&gt;(() =&gt; NewsRepository(provider: Get.find())); Get.lazyPut(() =&gt; NewsController(repository: Get.find())); &#125;&#125; 路由 lib/common/routes/app_pages.dart 12345GetPage( name: AppRoutes.GetConnect, binding: NewsBinding(), page: () =&gt; NewsView(),), StateMixin 雷同代码不再重复 控制器 Mixin 如下 lib/pages/getConnect_stateMixin/controller.dart 123456789101112131415161718192021class NewsStateMixinController extends GetxController with StateMixin&lt;NewsPageListResponseEntity&gt; &#123; final NewsStateMixinProvider provider; NewsStateMixinController(&#123;required this.provider&#125;); // 拉取新闻列表 Future&lt;void&gt; getNewsPageList() async &#123; // 获取数据 final Response response = await provider.getNews(); // 判断，如果有错误 if (response.hasError) &#123; // 改变数据，传入错误状态，在ui中会处理这些错误 change(null, status: RxStatus.error(response.statusText)); &#125; else &#123; // 否则，存储数据，改变状态为成功 var data = NewsPageListResponseEntity.fromJson(response.body); change(data, status: RxStatus.success()); &#125; &#125;&#125; 这种方式确实简化了很多代码 GetController + Dio这种方式就是之前 Flutter 新闻客户端 的写法，能复用原来的 dio 代码。 dio 基础类 lib/common/utils/http.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/* * http 操作类 * * 手册 * https://github.com/flutterchina/dio/blob/master/README-ZH.md * * 从 3 升级到 4 * https://github.com/flutterchina/dio/blob/master/migration_to_4.x.md*/class HttpUtil &#123; static HttpUtil _instance = HttpUtil._internal(); factory HttpUtil() =&gt; _instance; late Dio dio; HttpUtil._internal() &#123; // BaseOptions、Options、RequestOptions 都可以配置参数，优先级别依次递增，且可以根据优先级别覆盖参数 BaseOptions options = new BaseOptions( // 请求基地址,可以包含子路径 baseUrl: SERVER_API_URL, // baseUrl: storage.read(key: STORAGE_KEY_APIURL) ?? SERVICE_API_BASEURL, //连接服务器超时时间，单位是毫秒. connectTimeout: 10000, // 响应流上前后两次接受到数据的间隔，单位为毫秒。 receiveTimeout: 5000, // Http请求头. headers: &#123;&#125;, /// 请求的Content-Type，默认值是\"application/json; charset=utf-8\". /// 如果您想以\"application/x-www-form-urlencoded\"格式编码请求数据, /// 可以设置此选项为 `Headers.formUrlEncodedContentType`, 这样[Dio] /// 就会自动编码请求体. contentType: 'application/json; charset=utf-8', /// [responseType] 表示期望以那种格式(方式)接受响应数据。 /// 目前 [ResponseType] 接受三种类型 `JSON`, `STREAM`, `PLAIN`. /// /// 默认值是 `JSON`, 当响应头中content-type为\"application/json\"时，dio 会自动将响应内容转化为json对象。 /// 如果想以二进制方式接受响应数据，如下载一个二进制文件，那么可以使用 `STREAM`. /// /// 如果想以文本(字符串)格式接收响应数据，请使用 `PLAIN`. responseType: ResponseType.json, ); dio = new Dio(options); // Cookie管理 CookieJar cookieJar = CookieJar(); dio.interceptors.add(CookieManager(cookieJar)); &#125; /// restful get 操作 Future get( String path, &#123; dynamic? queryParameters, Options? options, &#125;) async &#123; var response = await dio.get( path, queryParameters: queryParameters, options: options, ); return response.data; &#125;&#125; api 定义 lib/common/apis/news.dart 123456789101112/// 新闻class NewsAPI &#123; /// 翻页 static Future&lt;NewsPageListResponseEntity&gt; newsPageList( &#123;NewsRecommendRequestEntity? param&#125;) async &#123; var response = await HttpUtil().get( '/news', queryParameters: param?.toJson(), ); return NewsPageListResponseEntity.fromJson(response); &#125;&#125; 控制器 lib/pages/getController_dio/controller.dart 1234567891011121314151617181920class NewsDioController extends GetxController &#123; var newsPageList = Rx&lt;NewsPageListResponseEntity&gt;(NewsPageListResponseEntity()); @override void onInit() &#123; super.onInit(); print(\"onInit\"); &#125; @override void onClose() &#123; super.onClose(); print(\"onClose\"); &#125; getPageList() async &#123; newsPageList.value = await NewsAPI.newsPageList(); &#125;&#125; © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter getx","slug":"flutter-getx","permalink":"https://blog.ducafecat.tech/tags/flutter-getx/"}]},{"title":"Flutter Getx 03 - 状态管理、依赖加载","date":"2021-04-15T16:00:00.000Z","path":"2021/04/16/flutter-getx/flutter-getx-03-state-dependency/","text":"本节目标 4 种状态管理 Obx GetX GetBuilder ValueBuilder 防抖、限流 函数 ever once debounce interval 依赖注入 Get.put Get.lazyPut 视图组件 GetView 视频https://www.bilibili.com/video/BV1PA411V7qc/ 代码https://github.com/ducafecat/getx_quick_start 参考 https://pub.flutter-io.cn/packages/get#reactive-state-manager https://dart.dev/guides/language/extension-methods 正文状态管理Obx lib/pages/state_obx/index.dart 12345678910111213141516171819202122232425262728293031class StateObxView extends StatelessWidget &#123; StateObxView(&#123;Key? key&#125;) : super(key: key); final count = 0.obs; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"Obx(...)\"), ), body: Center( child: Column( children: [ Obx(() =&gt; Text(\"count1 -&gt; \" + count.toString())), Obx(() =&gt; Text(\"count2 -&gt; \" + count.toString())), // Divider(), ElevatedButton( onPressed: () &#123; count.value++; &#125;, child: Text('add'), ), ], ), ), ); &#125;&#125; obs、extension、RxInt、Rx 1234567891011121314151617181920212223242526...extension StringExtension on String &#123; /// Returns a `RxString` with [this] `String` as initial value. RxString get obs =&gt; RxString(this);&#125;extension IntExtension on int &#123; /// Returns a `RxInt` with [this] `int` as initial value. RxInt get obs =&gt; RxInt(this);&#125;extension DoubleExtension on double &#123; /// Returns a `RxDouble` with [this] `double` as initial value. RxDouble get obs =&gt; RxDouble(this);&#125;extension BoolExtension on bool &#123; /// Returns a `RxBool` with [this] `bool` as initial value. RxBool get obs =&gt; RxBool(this);&#125;extension RxT&lt;T&gt; on T &#123; /// Returns a `Rx` instace with [this] `T` as initial value. Rx&lt;T&gt; get obs =&gt; Rx&lt;T&gt;(this);&#125; 小结 适合界面上 简单状态管理，写起来很快。 GetX 编写控制器 lib/pages/state_getx/controller.dart 123456789101112class CountController extends GetxController &#123; final _count = 0.obs; set count(value) =&gt; this._count.value = value; get count =&gt; this._count.value; final _count2 = 0.obs; set count2(value) =&gt; this._count2.value = value; get count2 =&gt; this._count2.value; add() =&gt; _count.value++; add2() =&gt; _count2.value++;&#125; 编写视图 lib/pages/state_getx/index.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485class StateGetxView extends StatelessWidget &#123; StateGetxView(&#123;Key? key&#125;) : super(key: key); final controller = CountController(); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"Getx\"), ), body: Center( child: Column( children: [ GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetX - 1\"); return Text('value 1 -&gt; $&#123;_.count&#125;'); &#125;, ), GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetX - 2\"); return Text('value 2 -&gt; $&#123;_.count&#125;'); &#125;, ), Divider(), // GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetX - 3\"); return Column( children: [ Text('value 3 -&gt; $&#123;_.count&#125;'), ElevatedButton( onPressed: () &#123; _.add(); &#125;, child: Text('count1'), ) ], ); &#125;, ), Divider(), // count2 GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetX - 4\"); return Text('value 4 -&gt; $&#123;_.count2&#125;'); &#125;, ), Divider(), // 按钮 ElevatedButton( onPressed: () &#123; controller.add(); &#125;, child: Text('count1'), ), ElevatedButton( onPressed: () &#123; controller.add2(); &#125;, child: Text('count2'), ), ], ), ), ); &#125;&#125; 小结 适合控制多控制器、多状态更新，可精细控制初始、局部渲染。 GetBuilder 控制器 lib/pages/state_getBuilder/controller.dart 同上，不再重复 视图 lib/pages/state_getBuilder/index.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110class StateGetBuilderView extends StatelessWidget &#123; StateGetBuilderView(&#123;Key? key&#125;) : super(key: key); final controller = CountController(); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"GetBuilder\"), ), body: Center( child: Column( children: [ GetBuilder&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetBuilder - 1\"); return Text('value -&gt; $&#123;_.count&#125;'); &#125;, ), GetBuilder&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetBuilder - 2\"); return Text('value -&gt; $&#123;_.count&#125;'); &#125;, ), Divider(), // GetBuilder&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetBuilder - 3\"); return Column( children: [ Text('value -&gt; $&#123;_.count&#125;'), ElevatedButton( onPressed: () &#123; _.add(); &#125;, child: Text('GetBuilder -&gt; add'), ) ], ); &#125;, ), Divider(), // count2 GetBuilder&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetBuilder - 4\"); return Text('value count2 -&gt; $&#123;_.count2&#125;'); &#125;, ), Divider(), // id2 GetBuilder&lt;CountController&gt;( id: \"id2\", init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; print(\"GetBuilder - 4\"); return Text('id2 -&gt; value count2 -&gt; $&#123;_.count2&#125;'); &#125;, ), Divider(), // 按钮 ElevatedButton( onPressed: () &#123; controller.add(); &#125;, child: Text('add'), ), ElevatedButton( onPressed: () &#123; controller.add2(); &#125;, child: Text('add2'), ), ElevatedButton( onPressed: () &#123; controller.update(); &#125;, child: Text('controller.update()'), ), ElevatedButton( onPressed: () &#123; controller.update([\"id2\"]); &#125;, child: Text('controller.update(id2)'), ), ], ), ), ); &#125;&#125; 小结 和 GetX 比起来，多了手动控制更新，有两点需要注意。 controller.update(); 触发更新 id: &quot;id2&quot;, 标记哪个 builder ，触发方式 controller.update([&quot;id2&quot;]); ，可传多个 Array 类型。 ValueBuilder lib/pages/state_valueBuilder/index.dart 123456789101112131415161718192021222324252627282930313233343536373839404142class StateValueBuilderView extends StatelessWidget &#123; StateValueBuilderView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"ValueBuilder\"), ), body: Column( children: [ Center( child: ValueBuilder&lt;int?&gt;( initialValue: 10, builder: (value, updateFn) &#123; return Column( children: [ Text(\"count -&gt; \" + value.toString()), ElevatedButton( onPressed: () &#123; updateFn(value! + 1); &#125;, child: Text('ValueBuilder -&gt; add'), ) ], ); &#125;, // builder: (value, updateFn) =&gt; Switch( // value: value, // onChanged: // updateFn, // same signature! you could use ( newValue ) =&gt; updateFn( newValue ) // ), // if you need to call something outside the builder method. onUpdate: (value) =&gt; print(\"Value updated: $value\"), onDispose: () =&gt; print(\"Widget unmounted\"), ), ), ], ), ); &#125;&#125; 小结 适合局部的状态管理，很灵活。 防抖、限流 控制器 lib/pages/state_workers/controller.dart 12345678910111213141516171819202122232425262728293031323334353637383940class CountController extends GetxController &#123; final _count = 0.obs; set count(value) =&gt; this._count.value = value; get count =&gt; this._count.value; add() =&gt; _count.value++; @override void onInit() &#123; super.onInit(); // 每次 ever(_count, (value) &#123; print(\"ever -&gt; \" + value.toString()); &#125;); // 第一次 once(_count, (value) &#123; print(\"once -&gt; \" + value.toString()); &#125;); // 防抖 2 秒内 debounce( _count, (value) &#123; print(\"debounce -&gt; \" + value.toString()); &#125;, time: Duration(seconds: 2), ); // 定时器 1 秒 interval( _count, (value) &#123; print(\"interval -&gt; \" + value.toString()); &#125;, time: Duration(seconds: 1), ); &#125;&#125; 视图 lib/pages/state_workers/index.dart 123456789101112131415161718192021222324252627282930313233343536class StateWorkersView extends StatelessWidget &#123; StateWorkersView(&#123;Key? key&#125;) : super(key: key); final controller = CountController(); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"GetBuilder\"), ), body: Center( child: Column( children: [ // 显示 GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; return Text('value -&gt; $&#123;_.count&#125;'); &#125;, ), // 按钮 ElevatedButton( onPressed: () &#123; controller.add(); &#125;, child: Text('add'), ), ], ), ), ); &#125;&#125; 小结 ever 适合做监听、日志收集 debounce 适合做搜索输入框 依赖注入Get.put 控制器 lib/pages/dependency_put_find/controller.dart 12345678910111213141516171819class CountController extends GetxController &#123; final _count = 0.obs; set count(value) =&gt; this._count.value = value; get count =&gt; this._count.value; add() =&gt; _count.value++; @override void onInit() &#123; super.onInit(); print(\"onInit\"); &#125; @override void onClose() &#123; super.onClose(); print(\"onClose\"); &#125;&#125; 第一个视图 lib/pages/dependency_put_find/index.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344class StateDependencyPutFindView extends StatelessWidget &#123; StateDependencyPutFindView(&#123;Key? key&#125;) : super(key: key); final controller = Get.put&lt;CountController&gt;(CountController()); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"Dependency\"), ), body: Center( child: Column( children: [ GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; return Text('value -&gt; $&#123;_.count&#125;'); &#125;, ), Divider(), // 按钮 ElevatedButton( onPressed: () &#123; controller.add(); &#125;, child: Text('add'), ), // 跳转 ElevatedButton( onPressed: () &#123; Get.to(NextPageView()); &#125;, child: Text('next page'), ), ], ), ), ); &#125;&#125; 第二个视图 lib/pages/dependency_put_find/next_page.dart 12345678910111213141516171819202122232425262728class NextPageView extends StatelessWidget &#123; NextPageView(&#123;Key? key&#125;) : super(key: key); final controller = Get.find&lt;CountController&gt;(); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"NextPage\"), ), body: Center( child: Column( children: [ GetX&lt;CountController&gt;( init: controller, initState: (_) &#123;&#125;, builder: (_) &#123; return Text('value -&gt; $&#123;_.count&#125;'); &#125;, ), Divider(), ], ), ), ); &#125;&#125; Get.lazyPut + GetView 懒加载 控制器 lib/pages/dependency_lazyPut/controller.dart 12345678910111213141516171819class CountController extends GetxController &#123; final _count = 0.obs; set count(value) =&gt; this._count.value = value; get count =&gt; this._count.value; add() =&gt; _count.value++; @override void onInit() &#123; super.onInit(); print(\"onInit\"); &#125; @override void onClose() &#123; super.onClose(); print(\"onClose\"); &#125;&#125; 第一个视图 lib/pages/dependency_lazyPut/index.dart 123456789101112131415161718192021222324252627282930313233343536373839404142class StateDependencyLazyPutView extends StatelessWidget &#123; StateDependencyLazyPutView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"Dependency - LazyPut\"), ), body: Center( child: Column( children: [ GetX&lt;CountController&gt;( init: Get.find&lt;CountController&gt;(), initState: (_) &#123;&#125;, builder: (_) &#123; return Text('value -&gt; $&#123;_.count&#125;'); &#125;, ), Divider(), // 按钮 ElevatedButton( onPressed: () &#123; Get.find&lt;CountController&gt;().add(); &#125;, child: Text('add'), ), // 跳转 ElevatedButton( onPressed: () &#123; Get.to(NextPageView()); &#125;, child: Text('Next GetView Page'), ), ], ), ), ); &#125;&#125; 第二个视图 lib/pages/dependency_lazyPut/next_getview_page.dart 12345678910111213141516171819202122232425262728class NextPageView extends GetView&lt;CountController&gt; &#123; NextPageView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"GetView Page\"), ), body: Center( child: Column( children: [ Obx(() =&gt; Text('value -&gt; $&#123;controller.count&#125;')), Divider(), // 按钮 ElevatedButton( onPressed: () &#123; controller.add(); &#125;, child: Text('add'), ), ], ), ), ); &#125;&#125; 绑定 lib/pages/dependency_lazyPut/bindings.dart 123456class DependencyLazyPutBinding implements Bindings &#123; @override void dependencies() &#123; Get.lazyPut&lt;CountController&gt;(() =&gt; CountController()); &#125;&#125; 路由 lib/common/routes/app_pages.dart 1234GetPage( name: AppRoutes.DependencyLazyPut, binding: DependencyLazyPutBinding(), page: () =&gt; StateDependencyLazyPutView()), © 猫哥 https://ducafecat.tech/ https://github.com/ducafecat 往期开源GetX Quick Starthttps://github.com/ducafecat/getx_quick_start 新闻客户端https://github.com/ducafecat/flutter_learn_news strapi 手册译文https://getstrapi.cn 微信讨论群 ducafecat系列集合Dart 编程语言基础https://space.bilibili.com/404904528/channel/detail?cid=111585 Flutter 零基础入门https://space.bilibili.com/404904528/channel/detail?cid=123470 Flutter 实战从零开始 新闻客户端https://space.bilibili.com/404904528/channel/detail?cid=106755 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter 组件开发https://space.bilibili.com/404904528/channel/detail?cid=144262 Flutter Blochttps://space.bilibili.com/404904528/channel/detail?cid=177519 Flutter Getx4https://space.bilibili.com/404904528/channel/detail?cid=177514 Docker Yapihttps://space.bilibili.com/404904528/channel/detail?cid=130578","tags":[{"name":"flutter getx","slug":"flutter-getx","permalink":"https://blog.ducafecat.tech/tags/flutter-getx/"}]},{"title":"Flutter Getx 02 - 空安全、更健全的代码","date":"2021-04-08T16:00:00.000Z","path":"2021/04/09/flutter-getx/flutter-getx-02-null-safety/","text":"本节目标 空安全意味着什么 如何迁移代码 如何禁用空安全 代码规范示例 视频https://www.bilibili.com/video/bv1g5411c7hF 代码https://github.com/ducafecat/getx_quick_start 参考 https://dart.cn/null-safety https://dart.cn/null-safety/migration-guide https://dart.cn/null-safety/understanding-null-safety https://dart.cn/null-safety/unsound-null-safety https://dart.cn/null-safety/faq 正文空安全意味着什么 默认不可空 1String title = 'ducafecat'; type? 操作符 1String? title = null; value! 操作符 12String? title = 'ducafecat';String newTitle = title!; value? 操作符 12String? title = 'ducafecat';bool isEmpty = title?.isEmpty(); value?? 操作符 12String? title = 'ducafecat';String newTitle = title ?? 'cat'; late 会在运行时检查。所以请您仅在确定它被使用前一定会被初始化的情况下使用 12late String? title;title = 'ducafecat'; List、泛型 类型 集合是否可空 数据项是否可空 List no no List? yes no List&lt;String?&gt; no yes List&lt;String?&gt;? yes yes Map 类型 集合是否可空 数据项是否可空 Map&lt;String, int&gt; no no* Map&lt;String, int&gt;? yes no* Map&lt;String, int?&gt; no yes Map&lt;String, int?&gt;? yes yes * 可能返回空 12345678// 有可能返回 nullint value = &lt;String, int&gt;&#123;'one': 1&#125;['one']; // ERROR// 需要加上 type?int? value = &lt;String, int&gt;&#123;'one': 1&#125;['one']; // OK// 或者 value!int value = &lt;String, int&gt;&#123;'one': 1&#125;['one']!; // OK 带来的好处 代码更健康 用户体验好 运行更快 编译文件更小 开启和迁移 pubspec.yaml 12environment: sdk: &quot;&gt;=2.12.0 &lt;3.0.0&quot; 迁移顺序 我们强烈建议您按顺序迁移代码，先迁移依赖关系中的处于最末端的依赖。例如，如果 C 依赖了 B，B 依赖了 A，那么应该按照 A -&gt; B -&gt; C 的顺序进行迁移。 检查依赖项目 12345# Dart 版本是否为 2.12 或更高&gt; dart --version# 依赖包的迁移状态&gt; dart pub outdated --mode=null-safety 升级依赖 12345# 该命令会更改您的 pubspec.yaml 文件&gt; dart pub upgrade --null-safety# 升级包&gt; dart pub upgrade 迁移工具 1&gt; dart migrate 分析 1&gt; dart analyze 禁用空安全 cli 命令 12&gt; dart --no-sound-null-safety run&gt; flutter run --no-sound-null-safety .vscode/launch.json 123456789101112131415&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"getx_quick_start\", \"request\": \"launch\", \"type\": \"dart\", \"program\": \"lib/main.dart\", \"args\": [\"--no-sound-null-safety\"] &#125; ]&#125; 范例、规范https://dart.cn/null-safety/understanding-null-safety 明确处理空状态 1234567makeCoffee(String coffee, [String? dairy]) &#123; if (dairy != null) &#123; print('$coffee with $dairy'); &#125; else &#123; print('Black $coffee'); &#125;&#125; 顶层变量和静态字段必须包含一个初始化方法。由于它们能在程序里的任何位置被访问到，编译器无法保证它们在被使用前已被赋值。唯一保险的选项是要求其本身包含初始化表达式，以确保产生匹配的类型的值。 12345int topLevel = 0;class SomeClass &#123; static int staticField = 0;&#125; 实例的字段也必须在声明时包含初始化方法，可以为常见初始化形式，也可以在实例的构造方法中进行初始化。 12345678class SomeClass &#123; int atDeclaration = 0; int initializingFormal; int initializationList; SomeClass(this.initializingFormal) : initializationList = 0;&#125; 局部变量的灵活度最高。一个非空的变量 不一定需要 一个初始化方法。 1234567891011int tracingFibonacci(int n) &#123; int result; if (n &lt; 2) &#123; result = n; &#125; else &#123; result = tracingFibonacci(n - 2) + tracingFibonacci(n - 1); &#125; print(result); return result;&#125; 流程分析，在这里 Dart 将 object 的类型从它声明的 Object 提升到了 List。在空安全引入以前，下面的程序无法运行。 12345678910111213141516// With (or without) null safety:bool isEmptyList(Object object) &#123; if (object is List) &#123; return object.isEmpty; // &lt;-- OK! &#125; else &#123; return false; &#125;&#125;-&gt;// Without null safety:bool isEmptyList(Object object) &#123; if (object is! List) return false; return object.isEmpty;&#125; 绝对的赋值分析 1234567891011int tracingFibonacci(int n) &#123; final int result; if (n &lt; 2) &#123; result = n; &#125; else &#123; result = tracingFibonacci(n - 2) + tracingFibonacci(n - 1); &#125; print(result); return result;&#125; 无用代码的警告 123456String checkList(List list) &#123; if (list?.isEmpty) &#123; return 'Got nothing'; &#125; return 'Got something';&#125; 懒加载的变量， late 修饰符是“在运行时而非编译时对变量进行约束”。这就让 late 这个词语约等于 何时 执行对变量的强制约束。 123456789101112131415161718192021// Using null safety:class Coffee &#123; String? _temperature; void heat() &#123; _temperature = 'hot'; &#125; void chill() &#123; _temperature = 'iced'; &#125; String serve() =&gt; _temperature! + ' coffee';&#125;-&gt;// Using null safety:class Coffee &#123; late String _temperature; void heat() &#123; _temperature = 'hot'; &#125; void chill() &#123; _temperature = 'iced'; &#125; String serve() =&gt; _temperature + ' coffee';&#125; late 与 final 结合使用，与普通的 final 字段不同，您不需要在声明或构造时就将其初始化。您可以稍后在运行中的某个地方加载它。但是您只能对其进行 一次 赋值，并且它在运行时会进行校验。 123456789// Using null safety:class Coffee &#123; late final String _temperature; void heat() &#123; _temperature = 'hot'; &#125; void chill() &#123; _temperature = 'iced'; &#125; String serve() =&gt; _temperature + ' coffee';&#125; 毕传参数，这里的所有参数都必须通过命名来传递。参数 a 和 c 是可选的，可以省略。参数 b 和 d 是必需的，调用时必须传递。在这里请注意，是否必需和是否可空无关。 12// Using null safety:function(&#123;int? a, required int? b, int? c, required int? d&#125;) &#123;&#125; 抽象字段 12345678910abstract class Cup &#123; Beverage get contents; set contents(Beverage);&#125;-&gt;abstract class Cup &#123; abstract Beverage contents;&#125; 一些赋值计算可以移动到静态的初始化中。 12345678910111213141516171819// Initalized without valuesListQueue _context;Float32List _buffer;dynamic _readObject;Vec2D(Map&lt;String, dynamic&gt; object) &#123; _buffer = Float32List.fromList([0.0, 0.0]); _readObject = object['container']; _context = ListQueue&lt;dynamic&gt;();&#125;-&gt;// Initalized with valuesfinal ListQueue _context = ListQueue&lt;dynamic&gt;();final Float32List _buffer = Float32List.fromList([0.0, 0.0]);final dynamic _readObject;Vec2D(Map&lt;String, dynamic&gt; object) : _readObject = object['container']; 可能返回 null 的工厂方法 12345678910111213141516171819202122factory StreamReader(dynamic data) &#123; StreamReader reader; if (data is ByteData) &#123; reader = BlockReader(data); &#125; else if (data is Map) &#123; reader = JSONBlockReader(data); &#125; return reader;&#125;-&gt;factory StreamReader(dynamic data) &#123; if (data is ByteData) &#123; // Move the readIndex forward for the binary reader. return BlockReader(data); &#125; else if (data is Map) &#123; return JSONBlockReader(data); &#125; else &#123; throw ArgumentError('Unexpected type for data'); &#125;&#125; © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter getx","slug":"flutter-getx","permalink":"https://blog.ducafecat.tech/tags/flutter-getx/"}]},{"title":"Flutter Getx 01 - 路由、中间件、鉴权、传值、跳转","date":"2021-04-04T16:00:00.000Z","path":"2021/04/05/flutter-getx/flutter-getx-01-router-middleware/","text":"Getx https://pub.flutter-io.cn/packages/get vscode 插件 Android Studio/Intellij 插件 本节目标 GetPage 对象 路由层级控制 路由中间件、鉴权 404 处理 路由跳转、替换、清除 路由传值、返回值 路由转场动画 开发环境 Flutter 2.1.0-12.1.pre Dart 2.13.0 get: ^3.26.0 参考 getx example getx_pattern GetX Snippets 视频https://www.bilibili.com/video/BV1yU4y1876r/ 代码https://github.com/ducafecat/getx_quick_start 正文初始 getx 项目 pubspec.yaml 123dependencies: ... get: ^3.26.0 lib/pages/home/index.dart 12345678910111213141516171819202122import 'package:flutter/material.dart';import 'package:get/get.dart';class HomeView extends StatelessWidget &#123; const HomeView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"首页\"), ), body: ListView( children: [ // 路由&amp;导航 Divider(), ], ), ); &#125;&#125; lib/common/routes/app_routes.dart 12345part of 'app_pages.dart';abstract class AppRoutes &#123; static const Home = '/home';&#125; lib/common/routes/app_pages.dart 1234567891011121314import 'package:get/get.dart';part 'app_routes.dart';class AppPages &#123; static const INITIAL = AppRoutes.Home; static final routes = [ GetPage( name: AppRoutes.Home, page: () =&gt; HomeView(), ), ];&#125; lib/main.dart 12345678910111213141516Future&lt;void&gt; main() async &#123; runApp(MyApp());&#125;class MyApp extends StatelessWidget &#123; const MyApp(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return GetMaterialApp( debugShowCheckedModeBanner: false, initialRoute: AppPages.INITIAL, getPages: AppPages.routes, ); &#125;&#125; 编写 GetPage 定义 lib/pages/list/index.dart 123456789101112class ListView extends StatelessWidget &#123; const ListView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"列表页\"), ), ); &#125;&#125; lib/pages/list_detail/index.dart 123456789101112131415161718192021class DetailView extends StatelessWidget &#123; const DetailView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"详情页\"), ), body: ListView( children: [ ListTile( title: Text(\"导航-返回\"), subtitle: Text('Get.back()'), onTap: () =&gt; Get.back(), ), ], ), ); &#125;&#125; lib/common/routes/app_routes.dart 1234abstract class AppRoutes &#123; static const Home = '/home'; static const List = '/list'; static const Detail = '/detail'; lib/common/routes/app_pages.dart 12345678910111213141516GetPage( name: AppRoutes.Home, page: () =&gt; HomeView(), children: [ GetPage( name: AppRoutes.List, page: () =&gt; ListView(), children: [ GetPage( name: AppRoutes.Detail, page: () =&gt; DetailView(), ), ], ), ],), 导航操作 命名、视图对象 lib/pages/home/index.dart 123456789101112131415ListTile( title: Text(\"导航-命名路由 home &gt; list\"), subtitle: Text('Get.toNamed(\"/home/list\")'), onTap: () =&gt; Get.toNamed(\"/home/list\"),),ListTile( title: Text(\"导航-命名路由 home &gt; list &gt; detail\"), subtitle: Text('Get.toNamed(\"/home/list/detail\")'), onTap: () =&gt; Get.toNamed(\"/home/list/detail\"),),ListTile( title: Text(\"导航-类对象\"), subtitle: Text(\"Get.to(DetailView())\"), onTap: () =&gt; Get.to(DetailView()),), 导航-清除上一个 lib/pages/home/index.dart 12345ListTile( title: Text(\"导航-清除上一个\"), subtitle: Text(\"Get.off(DetailView())\"), onTap: () =&gt; Get.off(DetailView()),), 导航-清除所有 lib/pages/home/index.dart 12345ListTile( title: Text(\"导航-清除所有\"), subtitle: Text(\"Get.offAll(DetailView())\"), onTap: () =&gt; Get.offAll(DetailView()),), 导航-arguments 传值+返回值 lib/pages/home/index.dart 12345678910ListTile( title: Text(\"导航-arguments传值+返回值\"), subtitle: Text( 'Get.toNamed(\"/home/list/detail\", arguments: &#123;\"id\": 999&#125;)'), onTap: () async &#123; var result = await Get.toNamed(\"/home/list/detail\", arguments: &#123;\"id\": 999&#125;); Get.snackbar(\"返回值\", \"success -&gt; \" + result[\"success\"].toString()); &#125;,), lib/pages/list_detail/index.dart 1234567891011121314151617181920212223242526272829303132_buildBackListTileRow(Map? val) &#123; return val == null ? Container() : ListTile( title: Text(\"传值 id = \" + val[\"id\"].toString()), subtitle: Text('Get.back(result: &#123;\"success\": true&#125;'), onTap: () =&gt; Get.back(result: &#123;\"success\": true&#125;), );&#125;@overrideWidget build(BuildContext context) &#123; final details = Get.arguments as Map; final parameters = Get.parameters; return Scaffold( appBar: AppBar( title: Text(\"详情页\"), ), body: ListView( children: [ ListTile( title: Text(\"导航-返回\"), subtitle: Text('Get.back()'), onTap: () =&gt; Get.back(), ), _buildBackListTileRow(details), _buildBackListTileRow(parameters), ], ), );&#125; 导航-parameters 传值+返回值 lib/pages/home/index.dart 12345678ListTile( title: Text(\"导航-parameters传值+返回值\"), subtitle: Text('Get.toNamed(\"/home/list/detail?id=666\")'), onTap: () async &#123; var result = await Get.toNamed(\"/home/list/detail?id=666\"); Get.snackbar(\"返回值\", \"success -&gt; \" + result[\"success\"].toString()); &#125;,), lib/pages/list_detail/index.dart 123@overrideWidget build(BuildContext context) &#123; final parameters = Get.parameters; 导航-参数传值+返回值 lib/common/routes/app_routes.dart 1static const Detail_ID = '/detail/:id'; lib/common/routes/app_pages.dart 12345...GetPage( name: AppRoutes.Detail_ID, page: () =&gt; DetailView(),), lib/pages/home/index.dart 12345678ListTile( title: Text(\"导航-参数传值+返回值\"), subtitle: Text('Get.toNamed(\"/home/list/detail/777\")'), onTap: () async &#123; var result = await Get.toNamed(\"/home/list/detail/777\"); Get.snackbar(\"返回值\", \"success -&gt; \" + result[\"success\"].toString()); &#125;,), 导航-not found lib/pages/notfound/index.dart 1234567891011121314151617class NotfoundView extends StatelessWidget &#123; const NotfoundView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"路由没有找到\"), ), body: ListTile( title: Text(\"返回首页\"), subtitle: Text('Get.offAllNamed(AppRoutes.Home)'), onTap: () =&gt; Get.offAllNamed(AppRoutes.Home), ), ); &#125;&#125; lib/common/routes/app_routes.dart 1static const NotFound = '/notfound'; lib/common/routes/app_pages.dart 1234static final unknownRoute = GetPage( name: AppRoutes.NotFound, page: () =&gt; NotfoundView(),); lib/main.dart 1234567@overrideWidget build(BuildContext context) &#123; return GetMaterialApp( ... unknownRoute: AppPages.unknownRoute, );&#125; 导航-中间件-认证 Auth lib/pages/login/index.dart 1234567891011121314151617class LoginView extends StatelessWidget &#123; const LoginView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"登录\"), ), body: ListTile( title: Text(\"返回首页\"), subtitle: Text('Get.offAllNamed(AppRoutes.Home)'), onTap: () =&gt; Get.offAllNamed(AppRoutes.Home), ), ); &#125;&#125; lib/pages/my/index.dart 1234567891011121314151617class MyView extends StatelessWidget &#123; const MyView(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text(\"我的\"), ), body: ListTile( title: Text(\"返回首页\"), subtitle: Text('Get.offAllNamed(AppRoutes.Home)'), onTap: () =&gt; Get.offAllNamed(AppRoutes.Home), ), ); &#125;&#125; lib/common/routes/app_routes.dart 12static const Login = '/login';static const My = '/my'; lib/common/middleware/router_auth.dart 123456789101112class RouteAuthMiddleware extends GetMiddleware &#123; @override int priority = 0; RouteAuthMiddleware(&#123;required this.priority&#125;); @override RouteSettings? redirect(String route) &#123; Future.delayed(Duration(seconds: 1), () =&gt; Get.snackbar(\"提示\", \"请先登录APP\")); return RouteSettings(name: AppRoutes.Login); &#125;&#125; lib/common/routes/app_pages.dart 12345678910111213// 白名单GetPage( name: AppRoutes.Login, page: () =&gt; LoginView(),),GetPage( name: AppRoutes.My, page: () =&gt; MyView(), middlewares: [ RouteAuthMiddleware(priority: 1), ],), lib/pages/home/index.dart 12345ListTile( title: Text(\"导航-中间件-认证Auth\"), subtitle: Text('Get.toNamed(AppRoutes.My)'), onTap: () =&gt; Get.toNamed(AppRoutes.My),), Transition 转场动画 lib/common/routes/app_pages.dart 12345GetPage( name: AppRoutes.Detail_ID, page: () =&gt; DetailView(), transition: Transition.downToUp,), © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter getx","slug":"flutter-getx","permalink":"https://blog.ducafecat.tech/tags/flutter-getx/"}]},{"title":"Flutter Bloc 03 - 基础对象 同步、异步 await yield 操作","date":"2021-03-15T16:00:00.000Z","path":"2021/03/16/flutter-bloc/flutter-bloc-03-sync-async-await-yield/","text":"本节目标 同步、异步 sync async 关键字 await yield 加上 * 的区别 视频https://www.bilibili.com/video/BV1JZ4y1w7hX/ 代码https://github.com/ducafecat/flutter-bloc-learn/tree/master/sync-async 正文在 BLOC 中常见 yield yield* Stream计算器 Bloc 代码 我们可以发现在 bloc 模块中，非常多 yield* yield async* ，如何正确使用还是很重要的，所以这篇文章把同步、异步的对应的操作符都整理出来。 12345678910111213141516171819202122232425262728class CounterBloc extends Bloc&lt;CounterEvent, CounterState&gt; &#123; CounterBloc() : super(CounterInitial(0)); int counterNum = 0; @override Stream&lt;CounterState&gt; mapEventToState( CounterEvent event, ) async* &#123; if (event is CounterIncrementEvent) &#123; yield* _mapIncrementEventToState(event); &#125; else if (event is CounterSubductionEvent) &#123; yield* _mapSubductionEventToState(event); &#125; &#125; Stream&lt;CounterState&gt; _mapIncrementEventToState( CounterIncrementEvent event) async* &#123; this.counterNum += 1; yield CounterChange(this.counterNum); &#125; Stream&lt;CounterState&gt; _mapSubductionEventToState( CounterSubductionEvent event) async* &#123; this.counterNum -= 1; yield CounterChange(this.counterNum); &#125;&#125; 同步 sync* + yield同步 sync 后返回 Iterable 可序列化对象 代码 123456789main() &#123; getList(10).forEach(print);&#125;Iterable&lt;int&gt; getList(int count) sync* &#123; for (int i = 0; i &lt; count; i++) &#123; yield i; &#125;&#125; 输出 12345678910110123456789Exited 我如果把 sync 的 * 去掉,编辑器会提示这是固定格式。 同步 sync + yield带上 * 因为 yield 返回对象是 Iterable 代码 12345678910111213main() &#123; getList(10).forEach(print);&#125;Iterable&lt;int&gt; getList(int count) sync* &#123; yield* generate(count);&#125;Iterable&lt;int&gt; generate(int count) sync* &#123; for (int i = 0; i &lt; count; i++) &#123; yield i; &#125;&#125; 输出 12345678910110123456789Exited 我把 yield 的 * 去掉后，提示返回 Iterable&lt;T&gt; 必须带上 * 异步 async + awaitFuture + async + await 经典配合 常见场景，等待异步完成，比如拉取数据、 IO 操作 代码 12345678910111213141516main() &#123; print(\"start..........\"); getList(10).then(print);&#125;Future&lt;int&gt; getList(int count) async &#123; await sleep(); for (int i = 0; i &lt; count; i++) &#123; return i; &#125; return 99;&#125;Future sleep() async &#123; return Future.delayed(Duration(seconds: 3));&#125; 输出 123start..........0Exited 这里就直接返回了, 没有后续的任何操作。 异步 async* + yield带上 * 后，yield 返回 Stream 对象 接收方用 listen(…) 代码 12345678910main() &#123; getList(10).listen(print);&#125;Stream&lt;int&gt; getList(int count) async* &#123; for (int i = 0; i &lt; count; i++) &#123; await Future.delayed(Duration(seconds: 1)); yield i; &#125;&#125; 输出 12345678910110123456789Exited yield 必须和 async* 或 sync* 配套使用 异步 async + yieldyield* 后返回的是另一个 Stream 对象 代码 1234567891011121314main() &#123; getList(10).listen(print);&#125;Stream&lt;int&gt; getList(int count) async* &#123; yield* generate(count);&#125;Stream&lt;int&gt; generate(int count) async* &#123; for (int i = 0; i &lt; count; i++) &#123; await Future.delayed(Duration(seconds: 1)); yield i; &#125;&#125; 输出 12345678910110123456789Exited 返回 Stream&lt;T&gt; 类型必须是用 yield* 的方式 © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter bloc","slug":"flutter-bloc","permalink":"https://blog.ducafecat.tech/tags/flutter-bloc/"}]},{"title":"2021 关于 Flutter v2 我整理了16个重要特性","date":"2021-03-07T16:00:00.000Z","path":"2021/03/08/flutter-daily/flutter-daily-2021-flutter2-top-engage/","text":"谷歌开发者官文https://mp.weixin.qq.com/s/EzS3dtpZB_i9p358qqlBpg 7 大平台 -&gt; windows、macos、linux、web、embedded、ios、android https://flutter.gskinner.com/ https://github.com/gskinnerTeam/flutter-folio web 平台优化、进入稳定版 3 个方向 pwa: 缓存、push 推送服务、桌面快捷、消息提示 spa: 单页程序类似 vue rect expanding mobile: 快速迁移 app、复用代码 irobot 构建基于 flutter https://edu.irobot.com/the-latest/building-a-coding-experience-for-all 技术架构 2D 3D 渲染 WebGL Skia WebAssembly Canvas 稳定的版本 性能 HTML renderer: HTML 渲染器: Uses a combination of HTML elements, CSS, Canvas elements, and SVG elements. This renderer has a smaller download size. 使用 HTML 元素、 CSS、 Canvas 元素和 SVG 元素的组合 CanvasKit renderer: CanvasKit 渲染器: This renderer is fully consistent with Flutter mobile and desktop, has faster performance with higher widget density, but adds about 2MB in download size. 试水项目 编辑器https://rive.app/ 动画https://flutterplasma.dev/ invoicehttps://www.invoiceninja.com/ canonical 支持https://medium.com/flutter/announcing-flutter-linux-alpha-with-canonical-19eb824590a9 https://canonical.com/ Canonical 公司是一个私营公司，由南非的企业家马克·沙特尔沃思创建，主要为了促进开源软件项目。 Canonical 在马恩岛登记注册，其雇员分布在世界各地，其主要办事处在伦敦，在蒙特利尔也有办事处。Canonical 公司支持并创建了几个项目，主要都是自由/开源软件（FOSS）或是一些旨在改善自由软件开发者和贡献者的工具。 why canonical 大力推 flutter !，主要以下几点 快速增长的 flutter 应用 多平台支持 设备优化的好 丰富的组件库 IDE 环境成熟 Visual Studio Code, Android Studio, and IntelliJ 简易安装 https://snapcraft.io/flutter 123$ snap install --classic flutter$ snap install --classic code$ code --install-extension dart-code.flutter 快速模板 1234567$ flutter channel dev$ flutter upgrade$ flutter config --enable-linux-desktop$ flutter create counter$ cd counter$ flutter run -d linux 现有项目升级 12$ cd my_flutter_app$ flutter create . 代码示例 https://github.com/flutter/samples/tree/master/experimental/desktop_photo_search https://github.com/flutter/gallery 教程 Write a Flutter desktop application https://codelabs.developers.google.com/codelabs/flutter-github-graphql-client/index.html#0 组件库升级、对 ios 支持加强 新增 iOS 功能 CupertinoSearchTextFieldhttps://api.flutter-io.cn/flutter/cupertino/CupertinoSearchTextField-class.html CupertinoFormSection、CupertinoFormRow 和 CupertinoTextFormFieldRowhttps://api.flutter.cn/flutter/cupertino/CupertinoFormSection-class.htmlhttps://api.flutter.cn/flutter/cupertino/CupertinoFormRow-class.htmlhttps://api.flutter.cn/flutter/cupertino/CupertinoTextFormFieldRow-class.html 整体性能优化https://github.com/flutter/flutter/issues/60267#issuecomment-762786388 新增 Widget: Autocomplete 和 ScaffoldMessenger AutocompleteCorehttps://github.com/flutter/flutter/pull/62927 ScaffoldMessengerhttps://github.com/flutter/flutter/pull/64101 Flutter for Surface Duo &amp; 折叠屏 https://docs.microsoft.com/zh-cn/dual-screen/flutter/ https://docs.microsoft.com/zh-cn/dual-screen/flutter/mediaquery 混合编程https://flutter.cn/docs/development/add-to-app 过去，额外 Flutter 实例的内存占用量与第一个 Flutter 实例相同。在 Flutter 2 中，我们将创建额外 Flutter 引擎的静态内存占用量降低了约 99%，使每个实例的占用量大约为 180kB。 Dart Null SafetyDart 是一种类型安全的语言，这意味着当开发者获取某种类型的变量时，编译器可以保证它是该类型，但是类型安全本身不能保证变量不是 null。 Null errors 非常常见的问题，在 GitHub 上 可以搜索到成千上万由于 null 导致 Dart 代码出现异常的问题，甚至有成千上万的 commits 试图解决这些问题。 https://dartpad.dev/ https://nullsafety.dartpad.dev/ 123456789void main() &#123; ps(null);&#125;void ps(List&lt;String&gt; files) &#123; for (var file in files) &#123; print(file.isEmpty()); &#125;&#125; 最后，个人的额外提醒，目前在根目录的 analysis_options.yaml 添加如下配置就可以开启 null safety，另外 Flutter 需要 dart sdk 2.9 。 123analyzer: enable-experiment: - non-nullable flutter fix 统计 1dart fix --dry-run 应用 1dart fix --apply flutter DevTools 开发工具升级 性能监控 https://flutter.dev/docs/perf/rendering/ui-performance .vscode/launch.json 12345678910111213141516171819&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"flutter_learn_news-1.0.15\", \"request\": \"launch\", \"type\": \"dart\" &#125;, &#123; \"name\": \"profile\", \"request\": \"launch\", \"type\": \"dart\", \"flutterMode\": \"profile\" &#125; ]&#125; Invert Oversized Images DevTools 的另一个新功能是能够轻松发现所显示的分辨率低于其实际分辨率的图像，这有助于追踪应用过大和内存占用过多等情况。若要启用此功能，请在 Flutter Inspector 中启用 Invert Oversized Images。 弹性布局 Android Studio/IntelliJ 扩展我们也为 IntelliJ 系列 IDE 的 Flutter 插件添加了一些适用于 Flutter 2 的新功能。首先，我们在其中新增了一个项目向导，该向导与 IntelliJ 中的新向导风格一致。 Visual Studio Code 扩展适用于 Visual Studio Code 的 Flutter 扩展也针对 Flutter 2 进行了优化，我们首先引入了一些测试增强功能，例如重新运行失败测试的能力。 经过两年的逐步发展，对 Dart 的 LSP (语言服务器协议) 支持已经成为在 Flutter 扩展中将 Dart 分析器集成到 Visual Studio Code 中的默认方式。LSP 支持为 Flutter 开发带来了许多改进，包括在当前的 Dart 文件中应用特定的所有修复，以及能够补全代码以生成完整函数调用 (包括括号和所需参数) 的能力。 LSP 支持不仅限于 Dart，它还支持 pubspec.yaml 及 analysis_options.yaml 文件中的代码补全。 sentry 升级对 flutter 的支持https://docs.sentry.io/platforms/flutter/ 整合了对设备端错误的收集 upgraded firebase plugins for flutterhttps://firebase.flutter.dev/ Flutter Community Plus Pluginshttps://plus.fluttercommunity.dev/ google mobile ads for flutter DartPad 升级到支持 Flutter 2 https://dartpad.dev/ 配置 flutter 2 下载 Dev channel (macOS) https://flutter.dev/docs/development/tools/sdk/releases?tab=macos fvm 切换 https://github.com/leoafarias/fvm 复制 sdk 到 /Users/{youname}/.fvm/versions 12fvm listfvm use 2.1.0 启用特性 123flutter config --enable-macos-desktopflutter config --enable-windows-desktopflutter config --enable-linux-desktop 编译 123456flutter run -d windowsflutter run -d macosflutter run -d linuxflutter run -d androidflutter run -d iosflutter run -d web 参考 https://flutter.gskinner.com/ https://github.com/gskinnerTeam/flutter-folio https://mp.weixin.qq.com/s/EzS3dtpZB_i9p358qqlBpg https://docs.sentry.io/platforms/flutter/ https://snapcraft.io/flutter https://plus.fluttercommunity.dev/ https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425 https://rive.app/ https://medium.com/flutter/announcing-flutter-linux-alpha-with-canonical-19eb824590a9 https://www.windowscentral.com/surface-duo © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter Bloc 02 - 基础对象 Stream 流操作","date":"2021-02-19T16:00:00.000Z","path":"2021/02/20/flutter-bloc/flutter-bloc-02-stream/","text":"本节目标 Stream 创建 StreamController 控制 StreamSubscription 订阅 StreamTransformer 转换 Sink、StreamSink、EventSink 修改数据 视频代码https://github.com/ducafecat/flutter-bloc-learn/tree/master/stream 正文核心类 名称 说明 Stream 事件流或者管道 StreamController 事件管理者 StreamSubscription 管理事件订阅，如 cacenl、pause StreamSink 流 Sink 入口，提供如 add、addStream 等 EventSink 事件 Sink 入口 StreamTransformer 流转换 准备函数12345678910111213141516// 打印流列表printStream(Stream&lt;Object&gt; stream) async &#123; await for (var val in stream) &#123; print(val); &#125;&#125;// 异步函数iFuture&lt;int&gt; funi = Future(() &#123; return 100;&#125;);// 异步函数iiFuture&lt;int&gt; funii = Future(() &#123; return 200;&#125;); stream 创建延迟间隔123456789101112periodic() async &#123; Stream&lt;int&gt; stream = Stream&lt;int&gt;.periodic(Duration(seconds: 1), (val) =&gt; val); await printStream(stream);&#125;&gt;&gt;123456 futrue 数据源12345678fromFuture() async &#123; Stream&lt;int&gt; stream = Stream&lt;int&gt;.fromFuture(funi); await printStream(stream);&#125;&gt;&gt;100 futrues 多数据源123456789101112fromFutures() async &#123; Stream&lt;int&gt; stream = Stream&lt;int&gt;.fromFutures([ funi, funii, ]); await printStream(stream);&#125;&gt;&gt;100200 stream 监听单对单12345678910111213141516171819202122listen() async &#123; Stream&lt;int&gt; stream = Stream&lt;int&gt;.periodic(Duration(seconds: 1), (val) =&gt; val); stream.listen( (event) &#123; print(event); &#125;, onError: (err) &#123; print(err); &#125;, onDone: () &#123;&#125;, cancelOnError: true, );&#125;&gt;&gt;123456 广播1234567891011121314151617181920212223boardcast() async &#123; Stream&lt;int&gt; stream = Stream&lt;int&gt;.periodic(Duration(seconds: 1), (val) =&gt; val) .asBroadcastStream(); stream.listen((event) &#123; print(event); &#125;); stream.listen((event) &#123; print(event); &#125;);&#125;&gt;&gt;1122334455 操作 task skip12345678910111213141516171819opt() async &#123; Stream&lt;int&gt; stream = Stream&lt;int&gt;.fromIterable([1, 2, 3, 4, 5]); stream = stream.take(3); // stream = stream.skip(2); stream.listen((event) &#123; print(event); &#125;);&#125;&gt;&gt; take(3)123&gt;&gt; skip(2)345 StreamController 流控制类 单点12345678910111213141516171819202122232425262728293031scListen() async &#123; StreamController sc = StreamController( onListen: () =&gt; print(\"onListen\"), onPause: () =&gt; print(\"onPause\"), onResume: () =&gt; print(\"onResume\"), onCancel: () =&gt; print(\"onCancel\"), sync: false); // 订阅对象 StreamSubscription ss = sc.stream.listen(((event) &#123; print(event); &#125;)); sc.add(100); // 暂停 ss.pause(); // 恢复 ss.resume(); // 取消 ss.cancel(); // 关闭流 sc.close();&#125;&gt;&gt;onListenonPauseonCancel 广播123456789101112131415161718192021222324scBroadcast() async &#123; StreamController sc = StreamController.broadcast(); StreamSubscription ss1 = sc.stream.listen(print); StreamSubscription ss2 = sc.stream.listen(print); sc.addStream(Stream.fromIterable([1, 2, 3, 4, 5])); await Future.delayed(Duration(seconds: 2)); sc.close();&#125;&gt;&gt;1122334455 StreamTransformer 流转换 123456789101112131415161718192021222324252627282930313233343536scTransformer() async &#123; StreamController sc = StreamController&lt;int&gt;.broadcast(); StreamTransformer stf = StreamTransformer&lt;int, double&gt;.fromHandlers( handleData: (int data, EventSink sink) &#123; sink.add((data * 2).toDouble()); &#125;, handleError: (error, stacktrace, sink) &#123; sink.addError('wrong: $error'); &#125;, handleDone: (sink) &#123; sink.close(); &#125;, ); Stream stream = sc.stream.transform(stf); stream.listen(print); stream.listen(print); sc.addStream(Stream&lt;int&gt;.fromIterable([1, 2, 3, 4, 5])); await Future.delayed(Duration(seconds: 2)); sc.close();&#125;&gt;&gt;224466881010 执行123456789101112131415161718main(List&lt;String&gt; args) async &#123; print('--- start ---'); // await periodic(); // await fromFuture(); // await fromFutures(); // await listen(); // await boardcast(); // await opt(); // await scListen(); // await scBroadcast(); // await scTransformer(); print('--- end ---');&#125; © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter bloc","slug":"flutter-bloc","permalink":"https://blog.ducafecat.tech/tags/flutter-bloc/"}]},{"title":"Flutter Bloc 01 - 快速上手 计算器","date":"2020-12-07T16:00:00.000Z","path":"2020/12/08/flutter-bloc/flutter-bloc-01-counter-quick-start/","text":"本节目标 为什么要用 bloc bloc vs provider 学习路线推荐 安装 bloc vscode 插件 配置 bloc 依赖包 编写计算器示例 视频https://www.bilibili.com/video/BV1ef4y1e79o/ 代码https://github.com/ducafecat/flutter-bloc-learn/tree/master/ducafecat_bloc_start_example 正文为什么要用 bloc 状态管理（这是必须的） 三层分离 表现层（Presentation) 业务逻辑（Business Logic) 数据层（Data) 数据源/库（Repository) 数据提供者（Data Provider) 规范组内开发 方便的 测试、记录 用户行为 123456789101112131415161718192021222324252627class SimpleBlocDelegate extends BlocDelegate &#123; @override void onEvent(Bloc bloc, Object event) &#123; super.onEvent(bloc, event); print('$&#123;bloc.runtimeType&#125; $event'); // 所有的UI事件 // 可用 umeng 这样平台 进行跟踪 &#125; @override void onError(Bloc bloc, Object error, StackTrace stacktrace) &#123; super.onError(bloc, error, stacktrace); print('$&#123;bloc.runtimeType&#125; $error'); // 所有发生的错误 // 用 sentry 记录错误 &#125; @override void onTransition(Bloc bloc, Transition transition) &#123; super.onTransition(bloc, transition); print(transition); // 所有的 State 变化 &#125;&#125; bloc vs provider bloc 是一种 mvvm 基于 事件、状态 驱动的 provider 是基于方法的 bloc 学习路线 Flutter Bloc 快速上手 -&gt; Stream -&gt; Cubit -&gt; Bloc 理解基于 mvvm 组件化拆分 安装 bloc vscode 插件bloc 创建项目 pubspec.yaml 12345678name: ducafecat_bloc_start_example...dependencies: ... bloc: ^6.1.0 flutter_bloc: ^6.1.0 equatable: ^1.2.5 目录结构 counter 计算器业务下创建 bloc view 目录，这样就分离了 编写 bloc lib/counter/bloc/counter_bloc.dart 12345678910111213141516171819202122232425262728293031323334353637import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:meta/meta.dart';part 'counter_event.dart';part 'counter_state.dart';class CounterBloc extends Bloc&lt;CounterEvent, CounterState&gt; &#123; CounterBloc() : super(CounterInitial(0)); int counterNum = 0; @override Stream&lt;CounterState&gt; mapEventToState( CounterEvent event, ) async* &#123; if (event is CounterIncrement) &#123; yield* _mapIncrementEventToState(event); &#125; else if (event is CounterSubduction) &#123; yield* _mapSubductionEventToState(event); &#125; &#125; Stream&lt;CounterState&gt; _mapIncrementEventToState( CounterIncrement event) async* &#123; this.counterNum += 1; yield CounterChange(this.counterNum); &#125; Stream&lt;CounterState&gt; _mapSubductionEventToState( CounterSubduction event) async* &#123; this.counterNum -= 1; yield CounterChange(this.counterNum); &#125;&#125; lib/counter/bloc/counter_event.dart 1234567891011part of 'counter_bloc.dart';@immutableabstract class CounterEvent extends Equatable &#123; @override List&lt;Object&gt; get props =&gt; [];&#125;class CounterIncrement extends CounterEvent &#123;&#125;class CounterSubduction extends CounterEvent &#123;&#125; lib/counter/bloc/counter_state.dart 12345678910111213141516171819part of 'counter_bloc.dart';@immutableabstract class CounterState extends Equatable &#123; final int value; const CounterState(this.value); @override List&lt;Object&gt; get props =&gt; [value];&#125;class CounterInitial extends CounterState &#123; CounterInitial(int value) : super(value);&#125;class CounterChange extends CounterState &#123; CounterChange(int value) : super(value);&#125; 编写 view lib/counter/view/page.dart 12345678910111213141516import 'package:ducafecat_bloc_start_example/counter/bloc/counter_bloc.dart';import 'package:ducafecat_bloc_start_example/counter/view/view.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';class CounterPage extends StatelessWidget &#123; const CounterPage(&#123;Key key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return BlocProvider( create: (context) =&gt; CounterBloc(), child: CounterView(), ); &#125;&#125; lib/counter/view/view.dart 12345678910111213141516171819202122232425262728293031323334353637import 'package:ducafecat_bloc_start_example/counter/bloc/counter_bloc.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';class CounterView extends StatelessWidget &#123; const CounterView(&#123;Key key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text('Counter')), body: Center( child: Column( children: [ BlocBuilder&lt;CounterBloc, CounterState&gt;( builder: (context, state) &#123; return Text('$&#123;state.value&#125;'); &#125;, ), RaisedButton( child: Text('加法'), onPressed: () &#123; BlocProvider.of&lt;CounterBloc&gt;(context).add(CounterIncrement()); &#125;, ), RaisedButton( child: Text('加法'), onPressed: () &#123; BlocProvider.of&lt;CounterBloc&gt;(context).add(CounterSubduction()); &#125;, ) ], ), ), ); &#125;&#125; 替换主程序 widget lib/main.dart 12345678910class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( ... home: CounterPage(), //MyHomePage(title: 'Flutter Demo Home Page'), ); &#125;&#125; 参考 https://bloclibrary.dev/ https://pub.flutter-io.cn/packages/bloc https://pub.flutter-io.cn/packages/flutter_bloc https://pub.flutter-io.cn/packages/equatable https://pub.flutter-io.cn/packages/provider © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter bloc","slug":"flutter-bloc","permalink":"https://blog.ducafecat.tech/tags/flutter-bloc/"}]},{"title":"Flutter 2020 开源项目推荐 第一弹","date":"2020-11-02T16:00:00.000Z","path":"2020/11/03/flutter-daily/flutter-2020-learn-opensource/","text":"视频https://www.bilibili.com/video/BV13D4y1R71r/ 关注点 目录文件结构 是否符合官方的包管理规范， 组件拆分 页面、组件、通用、业务 工具类设计 通讯、持久化、安全、字符、数字、浮点 第三方组件 流媒体、播放器、编辑器、图片、Web 视图、原生扩展 状态管理 bloc、provider 云服务 firebase、google cloud、AWS、serverless 业务完整性 可运行、业务全 ★ Prism 壁纸 ★https://github.com/Hash-Studios/Prism ★ Flutter-Movies4U 电影资讯 ★https://github.com/webaddicted/Flutter-Movies4U ★ anytime_podcast_player podcast 播放器 ★https://github.com/amugofjava/anytime_podcast_player ★ gcloud-dota-app dota 游戏资讯 全栈项目 ★flutter + react + go + firebase + google cloud https://github.com/alvarowolfx/gcloud-dota-app ★ LunaSea 多媒体网盘管理 ★https://github.com/CometTools/LunaSea ★ passwall-mobile 密码管理 全栈项目 ★flutter + electron + go https://github.com/aeosmanoglu/passwall-mobilehttps://github.com/passwall/passwall-serverhttps://github.com/passwall/passwall-desktophttps://passwall.io restofinder 美食https://github.com/yusriltakeuchi/restofinder SongTube-App 音乐播放下载https://github.com/SongTube/SongTube-App © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"2020 macbook pro 16寸 前端开发，看看我都装了哪些软件","date":"2020-10-11T16:00:00.000Z","path":"2020/10/12/flutter-daily/macbook-pro-16-tools-2020/","text":"视频https://www.bilibili.com/video/BV1854y1R7LG/ 系统Homebrew包管理工具，主要安装命令行工具 https://brew.sh/index_zh-cn homebrew-cask包管理扩展工具，主要安装 gui 工具 https://github.com/Homebrew/homebrew-cask git源码控制 1$ brew install git iTerm2shell 工具 https://www.iterm2.com/ powerline font字体 https://github.com/powerline/fonts firacode font字体 https://github.com/tonsky/FiraCode zshshell 工具 1$ brew install zsh oh-my-zshzsh 集成工具 https://ohmyz.sh/ https://github.com/ohmyzsh/ohmyzsh/wiki/themes 1$ sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; autojumpzsh 插件 快速导航目录 https://github.com/wting/autojump zsh-autosuggestionszsh 插件 快速提示历史输入 https://github.com/zsh-users/zsh-autosuggestions zsh-syntax-highlightingzsh 插件 美化显示 https://github.com/zsh-users/zsh-syntax-highlighting node &amp; nvmnode 版本管理 https://github.com/nvm-sh/nvm whistle抓包管理 https://github.com/avwo/whistle Charles抓包管理 俗称水瓶 https://www.charlesproxy.com/ Bartender 3顶部菜单项隐藏 https://www.macbartender.com/ CleanMyMac X清理电脑 https://macpaw.com/cleanmymac Docker容器管理 https://www.docker.com/ ClashX科学上网 https://github.com/yichengchen/clashX/ V2rayU科学上网 https://github.com/yanue/V2rayU/releases Keka压缩解压 https://www.keka.io/en/ Mountyntfs 磁盘读写 https://mounty.app/ 工具chrome浏览器 https://www.google.cn/chrome/ edge浏览器 https://www.microsoft.com/en-us/edge firefox浏览器 http://www.firefox.com.cn/ sourcetreegit 管理 https://www.sourcetreeapp.com/ CheatSheet快捷键提示 https://www.mediaatelier.com/CheatSheet/ alfred阿芙管家 https://www.alfredapp.com/ snipaste截图 https://docs.snipaste.com/zh-cn/ iShot截图 https://apps.apple.com/cn/app/ishot-%E6%88%AA%E5%9B%BE-%E5%BD%95%E5%B1%8F-2020%E5%85%A8%E6%96%B0%E9%AB%98%E5%BA%A6/id1485844094?mt=12 licecapgif 录制 https://www.cockos.com/licecap/ 有道笔记知识管理 http://note.youdao.com/ notion知识管理 https://www.notion.so/ trello知识管理 https://trello.com/ typoramarkdown 写作 https://typora.io/ 语雀知识管理 https://www.yuque.com/ 印象笔记知识管理 https://yinxiang.com/ securecrtssh 客户端 https://www.vandyke.com/products/securecrt/ finalshellssh 客户端 https://www.hostbuf.com/ 网页 MuMuandroid 模拟器 https://mumu.163.com/mac/index.html 百度网盘网盘 https://pan.baidu.com/ Downie 4下载油管视频 https://software.charliemonroe.net/downie/ EasyRes屏幕分辨率切换 http://easyresapp.com/ Free Download Manager下载工具 https://www.freedownloadmanager.org/zh/ iStat Menus状态管理 https://setapp.com/ pap.er壁纸管理 https://paper.meiyuan.in/ Parallels Desktop虚拟机管理 工作用 https://www.parallels.com/ virtualbox虚拟机管理 试验用 https://www.virtualbox.org/ vmware虚拟机管理 试验用 https://www.vmware.com/hk.html SwitchHosts!切换 host https://github.com/oldj/SwitchHosts Reeder 4rss 阅读器 https://apps.apple.com/cn/app/reeder-4/id1449412482?mt=12 ScreenFlow录视频 https://www.telestream.net/screenflow/overview.htm TeamViewer远程写作 https://www.teamviewer.cn draw.io画图 https://www.diagrams.net/ Foxmail轻巧邮件管理 https://www.foxmail.com/ Microsoft To Do任务管理 https://todo.microsoft.com/ Microsoft Remote Desktop远程 windows https://www.microsoft.com/en-us/download/details.aspx?id=50042 WPS Officeword ppt excel https://www.wps.cn/ 通讯QQ、微信、企业微信、Telegram 央视影音看电视 比赛 直播 https://app.cctv.com/appkhdxz/ysyymac/ IINA播放器 https://iina.io/ solarized theme多端样式配色 https://ethanschoonover.com/solarized/ 开发sublimehttp://www.sublimetext.com/ vscodehttps://code.visualstudio.com/ xcodehttps://developer.apple.com/xcode/ android stuidohttps://developer.android.com/studio HBuilderXhttps://www.dcloud.io/hbuilderx.html 微信开发者工具https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html TinyPNG4Mac图片压缩 https://github.com/kyleduo/TinyPNG4Mac/blob/master/README_ZH.md 1$ brew cask install tinypng4mac dash离线文档工具 https://kapeli.com/dash postmanapi 调试 https://www.postman.com/ adobe ps xd设计 https://www.adobe.com/cn/ sketch设计 https://www.sketch.com/ axure原型设计 https://www.axure.com/ pxcook标注工具 https://www.fancynode.com.cn/pxcook mindnode思维脑图 https://apps.apple.com/cn/app/mindnode-mind-map/id1289197285?mt=12 diffmerge文件比较 http://sourcegear.com/diffmerge RedisDesktopManagerredis 管理客户端 https://github.com/uglide/RedisDesktopManager DBeaver多数据库 客户端 https://dbeaver.io/ Navicat Premiummysql 客户端 http://www.navicat.com.cn/store/navicat-premium pdman关系数据库设计工具 https://gitee.com/robergroup/pdman GoLandhttps://www.jetbrains.com/go/ IDEAhttps://www.jetbrains.com/ © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"macbook","slug":"macbook","permalink":"https://blog.ducafecat.tech/tags/macbook/"}]},{"title":"HarmonyOS 真的是套壳么，我也好奇的玩了下","date":"2020-09-17T16:00:00.000Z","path":"2020/09/18/flutter-daily/harmonyos-2020-v2-research/","text":"上手一个 Hello Word!https://developer.harmonyos.com/cn/develop/deveco-studio#download 了解下 HUAWEIhttps://www.huawei.com 总结 华为是做基建、通讯设备的公司 行业跨度大，企事业+个人业务 趋势 IoT 设备互联是资源整合的 HarmonyOS 源码https://openharmony.gitee.com 核心 kernel_liteos_a 适用于 cpu 内存 大的 https://gitee.com/openharmony/kernel_liteos_a kernel_liteos_m 适用于建议设备 https://gitee.com/openharmony/kernel_liteos_m 基于开源项目 http://nuttx.apache.org/ 开发板卡https://device.harmonyos.com/cn/docs/start/introduce/oem_start_guide-0000001054913231https://gitee.com/openharmony/docs/blob/master/quick-start/Hi3861开发板介绍.md 引用 华为官网 开发者 开发版卡 HarmonyOS 文档 HarmonyOS 源码 © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"HarmonyOS","slug":"HarmonyOS","permalink":"https://blog.ducafecat.tech/tags/HarmonyOS/"}]},{"title":"Flutter 2020 学习心得、学习路线","date":"2020-09-02T16:00:00.000Z","path":"2020/09/03/flutter-daily/flutter-2020-how-to-learn-flutter-develop/","text":"视频https://www.bilibili.com/video/BV1CT4y1L7At/ 新人上手情况 语言基础 数据结构 网络通信 前端布局 动画 优化点 前端遇到的最大问题 原生调试 原生组件开发 聊聊学习动机 单位工作需要 自己兴趣开发 APP 毕业设计 漫无目的、漫无目的的学习 学习路线https://github.com/olexale/flutter_roadmap 资源 官网 darthttps://dart.dev/guides/language/language-tour 官网 flutterhttps://flutter.dev/https://flutter.cn/ juejinhttps://juejin.im/tag/Flutter mediumhttps://medium.com/tag/flutter flutter awesome githubhttps://github.com/Solido/awesome-flutterhttps://github.com/crazycodeboy/awesome-flutter-cn flutter awesome webhttps://flutterawesome.com/ otherhttps://twitter.com/search?q=flutterdevhttps://www.facebook.com/search/groups/?q=flutter%20dev 总结最快的学习方式有个目标、看优秀源代码，完成你的作品、上线！ © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 混合开发 - 03 百度地图定位功能 ios 篇","date":"2020-08-20T16:00:00.000Z","path":"2020/08/21/flutter-daily/flutter-plugins-03-baidu-map-ios/","text":"本节目标 创建 ios flutter 插件流程 集成百度定位功能 视频https://www.bilibili.com/video/BV1HT4y1L73i/ 代码https://github.com/ducafecat/flutter_baidu_plugin_ducafecat/releases/tag/v1.0.3 百度平台部分设置 AKhttps://lbsyun.baidu.com/apiconsole/key#/home 添加应用 查看 Bundle Identifier IOS 部分自动部署 CocoaPods 安装工具 1sudo gem install cocoapods ios/flutter_baidu_plugin_ducafecat.podspec 123456789 ... s.dependency &apos;Flutter&apos; s.platform = :ios, &apos;8.0&apos; s.dependency &apos;BMKLocationKit&apos; # Flutter.framework does not contain a i386 slice. Only x86_64 simulators are supported. s.pod_target_xcconfig = &#123; &apos;DEFINES_MODULE&apos; =&gt; &apos;YES&apos;, &apos;VALID_ARCHS[sdk=iphonesimulator*]&apos; =&gt; &apos;x86_64&apos; &#125;end 安装百度 sdk 包 1pod install 升级 1pod repo update pod search 无法搜索到类库的解决办法（找不到类库） 1234567891011（1）执行pod setup（2）删除~/Library/Caches/CocoaPods目录下的search_index.json文件 pod setup成功后会生成~/Library/Caches/CocoaPods/search_index.json文件 终端输入rm ~/Library/Caches/CocoaPods/search_index.json 删除成功后再执行pod search（3）执行pod search Info.plist 定位授权example/ios/Runner/Info.plist 123&lt;dict&gt; &lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt; &lt;string&gt;需要定位&lt;/string&gt; 消息通知 BdmapFlutterStreamManager ios/Classes/BdmapFlutterStreamManager.h 123456789101112131415161718192021222324//// Header.h// bdmap_location_flutter_plugin//// Created by Wang,Shengzhan on 2020/2/4.//#import &lt;Foundation/Foundation.h&gt;#import &lt;Flutter/Flutter.h&gt;NS_ASSUME_NONNULL_BEGIN@class BdmapFlutterStreamHandler;@interface BdmapFlutterStreamManager : NSObject+ (instancetype)sharedInstance ;@property (nonatomic, strong) BdmapFlutterStreamHandler* streamHandler;@end@interface BdmapFlutterStreamHandler : NSObject&lt;FlutterStreamHandler&gt;@property (nonatomic, strong) FlutterEventSink eventSink;@endNS_ASSUME_NONNULL_END ios/Classes/BdmapFlutterStreamManager.m 123456789101112131415161718192021222324252627282930313233343536373839//// BdmapFlutterStreamManager.m// bdmap_location_flutter_plugin//// Created by Wang,Shengzhan on 2020/2/4.//#import \"BdmapFlutterStreamManager.h\"@implementation BdmapFlutterStreamManager+ (instancetype)sharedInstance &#123; static dispatch_once_t onceToken; static BdmapFlutterStreamManager *manager = nil; dispatch_once(&amp;onceToken, ^&#123; manager = [[BdmapFlutterStreamManager alloc] init]; BdmapFlutterStreamHandler * streamHandler = [[BdmapFlutterStreamHandler alloc] init]; manager.streamHandler = streamHandler; &#125;); return manager;&#125;@end@implementation BdmapFlutterStreamHandler- (FlutterError*)onListenWithArguments:(id)arguments eventSink:(FlutterEventSink)eventSink &#123; self.eventSink = eventSink; return nil;&#125;- (FlutterError*)onCancelWithArguments:(id)arguments &#123; return nil;&#125;@end 地图接口业务 FlutterBaiduPluginDucafecatPlugin ios/Classes/FlutterBaiduPluginDucafecatPlugin.h 1234#import &lt;Flutter/Flutter.h&gt;@interface FlutterBaiduPluginDucafecatPlugin : NSObject&lt;FlutterPlugin&gt;@end ios/Classes/FlutterBaiduPluginDucafecatPlugin.m 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358#import \"FlutterBaiduPluginDucafecatPlugin.h\"#import \"BMKLocationkit/BMKLocationComponent.h\"#import \"BdmapFlutterStreamManager.h\"@interface FlutterBaiduPluginDucafecatPlugin()&lt;BMKLocationManagerDelegate&gt;@property (nonatomic,strong) BMKLocationManager *locManager;@property (nonatomic, copy) FlutterResult flutterResult;@end@implementation FlutterBaiduPluginDucafecatPlugin+ (void)registerWithRegistrar:(NSObject&lt;FlutterPluginRegistrar&gt;*)registrar &#123; // FlutterMethodChannel* channel = [FlutterMethodChannel // methodChannelWithName:@\"flutter_baidu_plugin_ducafecat\" // binaryMessenger:[registrar messenger]]; // FlutterBaiduPluginDucafecatPlugin* instance = [[FlutterBaiduPluginDucafecatPlugin alloc] init]; // [registrar addMethodCallDelegate:instance channel:channel]; FlutterMethodChannel* channel = [FlutterMethodChannel methodChannelWithName:@\"flutter_baidu_plugin_ducafecat\" binaryMessenger:[registrar messenger]]; FlutterBaiduPluginDucafecatPlugin* instance = [[FlutterBaiduPluginDucafecatPlugin alloc] init]; [registrar addMethodCallDelegate:instance channel:channel]; FlutterEventChannel *eventChanel = [FlutterEventChannel eventChannelWithName:@\"flutter_baidu_plugin_ducafecat_stream\" binaryMessenger:[registrar messenger]]; [eventChanel setStreamHandler:[[BdmapFlutterStreamManager sharedInstance] streamHandler]];&#125;// - (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result &#123;// if ([@\"getPlatformVersion\" isEqualToString:call.method]) &#123;// result([@\"iOS \" stringByAppendingString:[[UIDevice currentDevice] systemVersion]]);// &#125;// else if ([@\"duAddOne\" isEqualToString:call.method]) &#123;// NSInteger val = 100;// val += [[call.arguments objectForKey:@\"num\"] intValue];// result([NSNumber numberWithLong:val]);// &#125;// else &#123;// result(FlutterMethodNotImplemented);// &#125;// &#125;- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result &#123; if ([@\"getPlatformVersion\" isEqualToString:call.method]) &#123; result([@\"iOS \" stringByAppendingString:[[UIDevice currentDevice] systemVersion]]); &#125; else if ([@\"startLocation\" isEqualToString:call.method])&#123; // 开始定位// NSLog((@\"\\n[bdmap_loc_flutter_plugin:%s]\"), \"startLocation...\"); [self startLocation:result]; &#125;else if ([@\"stopLocation\" isEqualToString:call.method])&#123; // 停止定位// NSLog((@\"\\n[bdmap_loc_flutter_plugin:%s]\"), \"stopLocation...\"); [self stopLocation]; result(@YES); &#125; else if ([@\"updateOption\" isEqualToString:call.method] ) &#123; // 设置定位参数 result(@([self updateOption:call.arguments])); &#125; else if ([@\"setApiKey\" isEqualToString:call.method])&#123; // 设置ios端ak// NSLog((@\"\\n[bdmap_loc_flutter_plugin:%s]\"), \"setApiKey...\"); [[BMKLocationAuth sharedInstance] checkPermisionWithKey:call.arguments authDelegate:self]; result(@YES); &#125; else &#123; result(FlutterMethodNotImplemented); &#125;&#125;/** 获取设置的期望定位精度 */-(double)getDesiredAccuracy:(NSString*)str&#123; if([@\"kCLLocationAccuracyBest\" isEqualToString:str]) &#123; return kCLLocationAccuracyBest; &#125; else if ([@\"kCLLocationAccuracyNearestTenMeters\" isEqualToString:str]) &#123; return kCLLocationAccuracyNearestTenMeters; &#125; else if ([@\"kCLLocationAccuracyHundredMeters\" isEqualToString:str]) &#123; return kCLLocationAccuracyHundredMeters; &#125; else if ([@\"kCLLocationAccuracyKilometer\" isEqualToString:str]) &#123; return kCLLocationAccuracyKilometer; &#125; else &#123; return kCLLocationAccuracyBest; &#125;&#125;/** 获取设置的经纬度坐标系类型 */-(int)getCoordinateType:(NSString*)str&#123; if([@\"BMKLocationCoordinateTypeBMK09LL\" isEqualToString:str]) &#123; return BMKLocationCoordinateTypeBMK09LL; &#125; else if ([@\"BMKLocationCoordinateTypeBMK09MC\" isEqualToString:str]) &#123; return BMKLocationCoordinateTypeBMK09MC; &#125; else if ([@\"BMKLocationCoordinateTypeWGS84\" isEqualToString:str]) &#123; return BMKLocationCoordinateTypeWGS84; &#125; else if ([@\"BMKLocationCoordinateTypeGCJ02\" isEqualToString:str]) &#123; return BMKLocationCoordinateTypeGCJ02; &#125; else &#123; return BMKLocationCoordinateTypeGCJ02; &#125;&#125;/** 获取设置的应用位置类型 */-(int)getActivityType:(NSString*)str&#123; if ([@\"CLActivityTypeOther\" isEqualToString:str]) &#123; return CLActivityTypeOther; &#125; else if ([@\"CLActivityTypeAutomotiveNavigation\" isEqualToString:str]) &#123; return CLActivityTypeAutomotiveNavigation; &#125; else if ([@\"CLActivityTypeFitness\" isEqualToString:str]) &#123; return CLActivityTypeFitness; &#125; else if ([@\"CLActivityTypeOtherNavigation\" isEqualToString:str]) &#123; return CLActivityTypeOtherNavigation; &#125; else &#123; return CLActivityTypeAutomotiveNavigation; &#125;&#125;/** 解析flutter端所设置的定位SDK参数 */-(BOOL)updateOption:(NSDictionary*)args &#123; if(self.locManager) &#123;// NSLog(@\"定位参数配置:%@\",args); self.locManager.isNeedNewVersionReGeocode = YES; // 设置期望定位精度 if ([[args allKeys] containsObject:@\"desiredAccuracy\"]) &#123; [self.locManager setDesiredAccuracy:[ self getDesiredAccuracy: args[@\"desiredAccuracy\"]]]; &#125; // 设置定位的最小更新距离 if ([[args allKeys] containsObject:@\"distanceFilter\"]) &#123; self.locManager.distanceFilter = [args[@\"distanceFilter\"] doubleValue];// NSLog(@\"最小更新距离值:%f\", [args[@\"distanceFilter\"] doubleValue]); &#125; // 设置返回位置坐标系类型 if ([[args allKeys] containsObject:@\"BMKLocationCoordinateType\"]) &#123; [self.locManager setCoordinateType:[ self getCoordinateType: args[@\"desiredAccuracy\"]]]; &#125; // 设置应用位置类型 if ([[args allKeys] containsObject:@\"activityType\"]) &#123; [self.locManager setActivityType:[ self getActivityType: args[@\"desiredAccuracy\"]]]; &#125; // 设置是否需要返回新版本rgc信息 if ([[args allKeys] containsObject:@\"isNeedNewVersionRgc\"]) &#123; if ((bool)args[@\"desiredAccuracy\"]) &#123;// NSLog(@\"需要返回新版本rgc信息\"); self.locManager.isNeedNewVersionReGeocode = YES; &#125; else &#123;// NSLog(@\"不需要返回新版本rgc信息\"); self.locManager.isNeedNewVersionReGeocode = NO; &#125; &#125; // 指定定位是否会被系统自动暂停 if ([[args allKeys] containsObject:@\"pausesLocationUpdatesAutomatically\"]) &#123; if ((bool)args[@\"pausesLocationUpdatesAutomatically\"]) &#123;// NSLog(@\"设置定位被系统自动暂停\"); self.locManager.isNeedNewVersionReGeocode = YES; &#125; else &#123;// NSLog(@\"设置定位不能被系统自动暂停\"); self.locManager.isNeedNewVersionReGeocode = NO; &#125; &#125; // 设置是否允许后台定位 if ([[args allKeys] containsObject:@\"allowsBackgroundLocationUpdates\"]) &#123; if ((bool)args[@\"allowsBackgroundLocationUpdates\"]) &#123;// NSLog(@\"设置允许后台定位\"); self.locManager.isNeedNewVersionReGeocode = YES; &#125; else &#123;// NSLog(@\"设置不允许后台定位\"); self.locManager.isNeedNewVersionReGeocode = NO; self.locManager.distanceFilter = kCLDistanceFilterNone; &#125; &#125; // 设置定位超时时间 if ([[args allKeys] containsObject:@\"locationTimeout\"]) &#123; [self.locManager setLocationTimeout:[args[@\"locationTimeout\"] integerValue]]; self.locManager.coordinateType = BMKLocationCoordinateTypeGCJ02; &#125; // 设置逆地理超时时间 if ([[args allKeys] containsObject:@\"reGeocodeTimeout\"]) &#123; [self.locManager setReGeocodeTimeout:[args[@\"reGeocodeTimeout\"] integerValue]]; &#125; return YES; &#125; return NO;&#125;/** 启动定位 */- (void)startLocation:(FlutterResult)result&#123; self.flutterResult = result; [self.locManager startUpdatingLocation];&#125;/** 停止定位 */- (void)stopLocation&#123; self.flutterResult = nil; [self.locManager stopUpdatingLocation];&#125;- (BMKLocationManager *)locManager &#123; if (!_locManager) &#123; _locManager = [[BMKLocationManager alloc] init]; _locManager.locatingWithReGeocode = YES; _locManager.delegate = self; &#125; return _locManager;&#125;/** * @brief 连续定位回调函数 * @param manager 定位 BMKLocationManager 类。 * @param location 定位结果。 */- (void)BMKLocationManager:(BMKLocationManager * _Nonnull)manager didUpdateLocation:(BMKLocation * _Nullable)location orError:(NSError * _Nullable)error&#123; if (error) &#123;// NSLog(@\"locError:&#123;%ld - %@&#125;;\", (long)error.code, error.localizedDescription); &#125; if (location) &#123; // 得到定位信息，添加annotation NSMutableDictionary *dic = [NSMutableDictionary dictionaryWithCapacity:1]; if (location) &#123; if (location.location.timestamp) &#123; [dic setObject:[self getFormatTime:location.location.timestamp] forKey:@\"locTime\"]; // 定位时间 &#125; if (location.location.horizontalAccuracy) &#123; [dic setObject:@(location.location.horizontalAccuracy) forKey:@\"radius\"]; // 定位精度 &#125; if (location.location.coordinate.latitude) &#123; [dic setObject:@(location.location.coordinate.latitude) forKey:@\"latitude\"]; // 纬度 &#125; if (location.location.coordinate.longitude) &#123; [dic setObject:@(location.location.coordinate.longitude) forKey:@\"longitude\"]; // 经度 &#125; if (location.location.altitude) &#123;// NSLog(@\"返回海拔高度信息\"); [dic setObject:@(location.location.altitude) forKey:@\"altitude\"];// 高度 &#125; if (location.rgcData) &#123; [dic setObject:[location.rgcData country] forKey:@\"country\"]; // 国家 [dic setObject:[location.rgcData province] forKey:@\"province\"]; // 省份 [dic setObject:[location.rgcData city] forKey:@\"city\"]; // 城市 if (location.rgcData.district) &#123; [dic setObject:[location.rgcData district] forKey:@\"district\"]; // 区县 &#125; if (location.rgcData.street) &#123; [dic setObject:[location.rgcData street] forKey:@\"street\"]; // 街道 &#125; if (location.rgcData.description) &#123; // 地址信息 [dic setObject:[location.rgcData description] forKey:@\"address\"]; &#125; if (location.rgcData.poiList) &#123; NSString* poilist; if (location.rgcData.poiList.count == 1) &#123; for (BMKLocationPoi * poi in location.rgcData.poiList) &#123; poilist = [[poi name] stringByAppendingFormat:@\",%@,%@\", [poi tags], [poi addr]]; &#125; &#125; else &#123; for (int i = 0; i &lt; location.rgcData.poiList.count - 1 ; i++) &#123; poilist = [poilist stringByAppendingFormat:@\"%@,%@,%@|\", location.rgcData.poiList[i].name,location.rgcData.poiList[i].tags,location.rgcData.poiList[i].addr]; &#125; poilist = [poilist stringByAppendingFormat:@\"%@,%@,%@\", location.rgcData.poiList[location.rgcData.poiList.count-1].name,location.rgcData.poiList[location.rgcData.poiList.count-1].tags,location.rgcData.poiList[location.rgcData.poiList.count-1].addr]; &#125; [dic setObject: poilist forKey:@\"poiList\"]; // 周边poi信息 &#125; &#125; &#125; else &#123; [dic setObject: @1 forKey:@\"errorCode\"]; // 定位结果错误码 [dic setObject:@\"location is null\" forKey:@\"errorInfo\"]; // 定位错误信息 &#125; // 定位结果回调时间 [dic setObject:[self getFormatTime:[NSDate date]] forKey:@\"callbackTime\"]; [[BdmapFlutterStreamManager sharedInstance] streamHandler].eventSink(dic);// NSLog(@\"x=%f,y=%f\",location.location.coordinate.latitude,location.location.coordinate.longitude); &#125;&#125;/** 格式化时间 */- (NSString *)getFormatTime:(NSDate*)date&#123; NSDateFormatter *formatter = [[NSDateFormatter alloc] init]; [formatter setDateFormat:@\"YYYY-MM-dd HH:mm:ss\"]; NSString *timeString = [formatter stringFromDate:date]; return timeString;&#125;@end Flutter 部分设置 AK12345678910@overridevoid initState() &#123; super.initState(); _requestPermission(); // 执行权限请求 if (Platform.isIOS == true) &#123; FlutterBaiduPluginDucafecat.setApiKeyForIOS( \"dkYT07blcAj3drBbcN1eGFYqt16HP1pR\"); &#125;&#125; 其它代码和 android 同接口 无影响 参考 https://lbsyun.baidu.com/apiconsole/key#/home https://flutter.dev/docs/development/packages-and-plugins/developing-packages#step-2c-add-ios-platform-code-swifthm http://lbsyun.baidu.com/index.php?title=ios-locsdk/guide/create-project/cocoapods-create http://lbsyun.baidu.com/index.php?title=ios-locsdk © 猫哥 https://ducafecat.tech https://ducafecat.gitee.io","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 混合开发 - 02 百度地图定位功能 android 篇","date":"2020-08-03T16:00:00.000Z","path":"2020/08/04/flutter-daily/flutter-plugins-02-baidu-map-android/","text":"本节目标 百度地图业务 百度组件初始 编写定位代码 android 篇 环境1234567$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel stable, 1.20.1, on Mac OS X 10.15.6 19G73, locale zh-Hans-CN)[✓] Android toolchain - develop for Android devices (Android SDK version 29.0.2)[✓] Xcode - develop for iOS and macOS (Xcode 11.6)[✓] Android Studio (version 4.0)[✓] VS Code (version 1.47.3) 视频https://www.bilibili.com/video/BV1iK411T7LC/ 代码https://github.com/ducafecat/flutter_baidu_plugin_ducafecat/releases/tag/v1.0.2 可以直接用 👇 v1.0.3 https://github.com/ducafecat/flutter_baidu_plugin_ducafecat/releases/tag/v1.0.3 正文创建组件的几种方式现成轮子直接用 官方仓库搜索 https://pub.dev/flutter/packages https://pub.flutter-io.cn/flutter/packages 可参考的组件代码 通过仓库，查找 github 代码仓 网站、客服索取代码 参考官方集成文档编写组件 官网文档 http://lbsyun.baidu.com/index.php?title=flutter/loc 组件代码百度应用管理，创建 AK 应用管理 https://lbsyun.baidu.com/apiconsole/key#/home 查询 SHA1 http://lbsyun.baidu.com/index.php?title=FAQ/SHA1 1keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey 设置 AK example/android/app/src/main/AndroidManifest.xml 12345678910... &lt;!-- 在这里设置android端ak--&gt; &lt;meta-data android:name=\"com.baidu.lbsapi.API_KEY\" android:value=\"aCUtcLDufllGi4nEaKgU8FmBqufFyekh\" /&gt; &lt;/application&gt;&lt;/manifest&gt; 设置 Android 权限 文档 http://lbsyun.baidu.com/index.php?title=android-locsdk/guide/create-project/android-studio android/src/main/AndroidManifest.xml 1234567891011121314151617181920212223242526272829303132&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"tech.ducafecat.flutter_baidu_plugin_ducafecat\"&gt; &lt;!-- 这个权限用于进行网络定位--&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"&gt;&lt;/uses-permission&gt; &lt;!-- 这个权限用于访问GPS定位--&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"&gt;&lt;/uses-permission&gt; &lt;!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"&gt;&lt;/uses-permission&gt; &lt;!-- 获取运营商信息，用于支持提供运营商信息相关的接口--&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"&gt;&lt;/uses-permission&gt; &lt;!-- 这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt; &lt;uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"&gt;&lt;/uses-permission&gt; &lt;!-- 用于读取手机当前的状态--&gt; &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"&gt;&lt;/uses-permission&gt; &lt;!-- 写入扩展存储，向扩展卡写入数据，用于写入离线定位数据--&gt; &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"&gt;&lt;/uses-permission&gt; &lt;!-- 访问网络，网络定位需要上网--&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; &lt;!-- 读取系统信息，包含系统版本等信息，用作统计--&gt; &lt;uses-permission android:name=\"com.android.launcher.permission.READ_SETTINGS\" /&gt; &lt;!-- 程序在手机屏幕关闭后后台进程仍然运行--&gt; &lt;uses-permission android:name=\"android.permission.WAKE_LOCK\" /&gt; &lt;application&gt; &lt;!-- 声明service组件 --&gt; &lt;service android:name=\"com.baidu.location.f\" android:enabled=\"true\" android:process=\":remote\" &gt; &lt;/service&gt; &lt;/application&gt;&lt;/manifest&gt; 添加 android libs 库文件 目录 android/libs android/build.gradle 123456789101112131415161718192021...android &#123; compileSdkVersion 28 sourceSets &#123; main &#123; jniLibs.srcDir 'libs' &#125; &#125; defaultConfig &#123; minSdkVersion 16 &#125; lintOptions &#123; disable 'InvalidPackage' &#125;&#125;dependencies &#123; implementation files('libs/BaiduLBS_Android.jar')&#125; 编写 Flutter 组件代码 目录 lib 地理信息 lib/entity/flutter_baidu_location.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119/// 百度定位结果类，用于存储各类定位结果信息class BaiduLocation &#123; /// 定位成功时间 final String locTime; /// 定位结果类型 final int locType; /// 半径 final double radius; /// 纬度 final double latitude; /// 经度 final double longitude; /// 海拔 final double altitude; /// 国家 final String country; /// 省份 final String province; /// 城市 final String city; /// 区县 final String district; /// 街道 final String street; /// 地址 final String address; /// 位置语义化描述，例如\"在百度大厦附近\" final String locationDetail; /// 周边poi信息，每个poi之间用\"|\"隔开 final String poiList; /// 定位结果回调时间 final String callbackTime; /// 错误码 final int errorCode; /// 定位失败描述信息 final String errorInfo; BaiduLocation( &#123;this.locTime, this.locType, this.radius, this.latitude, this.longitude, this.altitude, this.country, this.province, this.city, this.district, this.street, this.address, this.locationDetail, this.poiList, this.callbackTime, this.errorCode, this.errorInfo&#125;); /// 根据传入的map生成BaiduLocation对象 factory BaiduLocation.fromMap(dynamic value) &#123; return new BaiduLocation( locTime: value['locTime'], locType: value['locType'], radius: value['radius'], latitude: value['latitude'], longitude: value['longitude'], altitude: value['altitude'], country: value['country'], province: value['province'], city: value['city'], district: value['district'], street: value['street'], address: value['address'], locationDetail: value['locationDetail'], poiList: value['poiList'], callbackTime: value['callbackTime'], errorCode: value['errorCode'], errorInfo: value['errorInfo'], ); &#125; /// 获取对本类所有变量赋值后的map键值对 Map getMap() &#123; return &#123; \"locTime\": locTime, \"locType\": locType, \"radius\": radius, \"latitude\": latitude, \"longitude\": longitude, \"altitude\": altitude, \"country\": country, \"province\": province, \"city\": city, \"district\": district, \"street\": street, \"address\": address, \"locationDescribe\": locationDetail, \"poiList\": poiList, \"callbackTime\": callbackTime, \"errorCode\": errorCode, \"errorInfo\": errorInfo, &#125;; &#125;&#125; android 配置项 lib/entity/flutter_baidu_location_android_option.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172/// 设置android端定位参数类class BaiduLocationAndroidOption &#123; /// 坐标系类型 String coorType; /// 是否需要返回地址信息 bool isNeedAddres; /// 是否需要返回海拔高度信息 bool isNeedAltitude; /// 是否需要返回周边poi信息 bool isNeedLocationPoiList; /// 是否需要返回新版本rgc信息 bool isNeedNewVersionRgc; /// 是否需要返回位置描述信息 bool isNeedLocationDescribe; /// 是否使用gps bool openGps; /// 可选，设置发起定位请求的间隔，int类型，单位ms /// 如果设置为0，则代表单次定位，即仅定位一次，默认为0 /// 如果设置非0，需设置1000ms以上才有效 int scanspan; /// 设置定位模式，可选的模式有高精度、仅设备、仅网络。默认为高精度模式 int locationMode; /// 可选，设置场景定位参数，包括签到场景、运动场景、出行场景 int locationPurpose; /// 可选，设置返回经纬度坐标类型，默认GCJ02 /// GCJ02：国测局坐标； /// BD09ll：百度经纬度坐标； /// BD09：百度墨卡托坐标； /// 海外地区定位，无需设置坐标类型，统一返回WGS84类型坐标 void setCoorType(String coorType) &#123; this.coorType = coorType; &#125; /// 是否需要返回地址信息 void setIsNeedAddres(bool isNeedAddres) &#123; this.isNeedAddres = isNeedAddres; &#125; /// 是否需要返回海拔高度信息 void setIsNeedAltitude(bool isNeedAltitude) &#123; this.isNeedAltitude = isNeedAltitude; &#125; /// 是否需要返回周边poi信息 void setIsNeedLocationPoiList(bool isNeedLocationPoiList) &#123; this.isNeedLocationPoiList = isNeedLocationPoiList; &#125; /// 是否需要返回位置描述信息 void setIsNeedLocationDescribe(bool isNeedLocationDescribe) &#123; this.isNeedLocationDescribe = isNeedLocationDescribe; &#125; /// 是否需要返回新版本rgc信息 void setIsNeedNewVersionRgc(bool isNeedNewVersionRgc) &#123; this.isNeedNewVersionRgc = isNeedNewVersionRgc; &#125; /// 是否使用gps void setOpenGps(bool openGps) &#123; this.openGps = openGps; &#125; /// 可选，设置发起定位请求的间隔，int类型，单位ms /// 如果设置为0，则代表单次定位，即仅定位一次，默认为0 /// 如果设置非0，需设置1000ms以上才有效 void setScanspan(int scanspan) &#123; this.scanspan = scanspan; &#125; /// 设置定位模式，可选的模式有高精度、仅设备、仅网络，默认为高精度模式 void setLocationMode(LocationMode locationMode) &#123; if (locationMode == LocationMode.Hight_Accuracy) &#123; this.locationMode = 1; &#125; else if (locationMode == LocationMode.Device_Sensors) &#123; this.locationMode = 2; &#125; else if (locationMode == LocationMode.Battery_Saving) &#123; this.locationMode = 3; &#125; &#125; /// 可选，设置场景定位参数，包括签到场景、运动场景、出行场景 void setLocationPurpose(BDLocationPurpose locationPurpose) &#123; if (locationPurpose == BDLocationPurpose.SignIn) &#123; this.locationPurpose = 1; &#125; else if (locationPurpose == BDLocationPurpose.Transport) &#123; this.locationPurpose = 2; &#125; else if (locationPurpose == BDLocationPurpose.Sport) &#123; this.locationPurpose = 3; &#125; &#125; BaiduLocationAndroidOption( &#123;this.coorType, this.isNeedAddres, this.isNeedAltitude, this.isNeedLocationPoiList, this.isNeedNewVersionRgc, this.openGps, this.isNeedLocationDescribe, this.scanspan, this.locationMode, this.locationPurpose&#125;); /// 根据传入的map生成BaiduLocationAndroidOption对象 factory BaiduLocationAndroidOption.fromMap(dynamic value) &#123; return new BaiduLocationAndroidOption( coorType: value['coorType'], isNeedAddres: value['isNeedAddres'], isNeedAltitude: value['isNeedAltitude'], isNeedLocationPoiList: value['isNeedLocationPoiList'], isNeedNewVersionRgc: value['isNeedNewVersionRgc'], openGps: value['openGps'], isNeedLocationDescribe: value[''], scanspan: value['scanspan'], locationMode: value['locationMode'], locationPurpose: value['LocationPurpose'], ); &#125; /// 获取对本类所有变量赋值后的map键值对 Map getMap() &#123; return &#123; \"coorType\": coorType, \"isNeedAddres\": isNeedAddres, \"isNeedAltitude\": isNeedAltitude, \"isNeedLocationPoiList\": isNeedLocationPoiList, \"isNeedNewVersionRgc\": isNeedNewVersionRgc, \"openGps\": openGps, \"isNeedLocationDescribe\": isNeedLocationDescribe, \"scanspan\": scanspan, \"locationMode\": locationMode, &#125;; &#125;&#125;/// 定位模式枚举类enum LocationMode &#123; /// 高精度模式 Hight_Accuracy, /// 低功耗模式 Battery_Saving, /// 仅设备(Gps)模式 Device_Sensors&#125;/// 场景定位枚举类enum BDLocationPurpose &#123; /// 签到场景 /// 只进行一次定位返回最接近真实位置的定位结果（定位速度可能会延迟1-3s） SignIn, /// 出行场景 /// 高精度连续定位，适用于有户内外切换的场景，卫星定位和网络定位相互切换，卫星定位成功之后网络定位不再返回，卫星信号断开之后一段时间才会返回网络结果 Sport, /// 运动场景 /// 高精度连续定位，适用于有户内外切换的场景，卫星定位和网络定位相互切换，卫星定位成功之后网络定位不再返回，卫星信号断开之后一段时间才会返回网络结果 Transport&#125; ios 配置项 lib/entity/flutter_baidu_location_ios_option.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139/// 设置ios端定位参数类class BaiduLocationIOSOption &#123; /// 设置位置获取超时时间 int locationTimeout; /// 设置获取地址信息超时时间 int reGeocodeTimeout; /// 设置应用位置类型 String activityType; /// 设置返回位置的坐标系类型 String BMKLocationCoordinateType; /// 设置预期精度参数 String desiredAccuracy; /// 是否需要最新版本rgc数据 bool isNeedNewVersionRgc; /// 指定定位是否会被系统自动暂停 bool pausesLocationUpdatesAutomatically; /// 指定是否允许后台定位 bool allowsBackgroundLocationUpdates; /// 设定定位的最小更新距离 double distanceFilter; /// 指定是否允许后台定位 /// allowsBackgroundLocationUpdates为true则允许后台定位 /// allowsBackgroundLocationUpdates为false则不允许后台定位 void setAllowsBackgroundLocationUpdates( bool allowsBackgroundLocationUpdates) &#123; this.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates; &#125; /// 指定定位是否会被系统自动暂停 /// pausesLocationUpdatesAutomatically为true则定位会被系统自动暂停 /// pausesLocationUpdatesAutomatically为false则定位不会被系统自动暂停 void setPauseLocUpdateAutomatically(bool pausesLocationUpdatesAutomatically) &#123; this.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically; &#125; /// 设置位置获取超时时间 void setLocationTimeout(int locationTimeout) &#123; this.locationTimeout = locationTimeout; &#125; /// 设置获取地址信息超时时间 void setReGeocodeTimeout(int reGeocodeTimeout) &#123; this.reGeocodeTimeout = reGeocodeTimeout; &#125; /// 设置应用位置类型 /// activityType可选值包括: /// \"CLActivityTypeOther\" /// \"CLActivityTypeAutomotiveNavigation\" /// \"CLActivityTypeFitness\" /// \"CLActivityTypeOtherNavigation\" void setActivityType(String activityType) &#123; this.activityType = activityType; &#125; /// 设置返回位置的坐标系类型 /// BMKLocationCoordinateType可选值包括: /// \"BMKLocationCoordinateTypeBMK09LL\" /// \"BMKLocationCoordinateTypeBMK09MC\" /// \"BMKLocationCoordinateTypeWGS84\" /// \"BMKLocationCoordinateTypeGCJ02\" void setBMKLocationCoordinateType(String BMKLocationCoordinateType) &#123; this.BMKLocationCoordinateType = BMKLocationCoordinateType; &#125; /// 设置预期精度参数 /// desiredAccuracy可选值包括: /// \"kCLLocationAccuracyBest\" /// \"kCLLocationAccuracyNearestTenMeters\" /// \"kCLLocationAccuracyHundredMeters\" /// \"kCLLocationAccuracyKilometer\" void setDesiredAccuracy(String desiredAccuracy) &#123; this.desiredAccuracy = desiredAccuracy; &#125; /// 设定定位的最小更新距离 void setDistanceFilter(double distanceFilter) &#123; this.distanceFilter = distanceFilter; &#125; /// 是否需要最新版本rgc数据 /// isNeedNewVersionRgc为true则需要返回最新版本rgc数据 /// isNeedNewVersionRgc为false则不需要返回最新版本rgc数据 void setIsNeedNewVersionRgc(bool isNeedNewVersionRgc) &#123; this.isNeedNewVersionRgc = isNeedNewVersionRgc; &#125; BaiduLocationIOSOption( &#123;this.locationTimeout, this.reGeocodeTimeout, this.activityType, this.BMKLocationCoordinateType, this.desiredAccuracy, this.isNeedNewVersionRgc, this.pausesLocationUpdatesAutomatically, this.allowsBackgroundLocationUpdates, this.distanceFilter&#125;); /// 根据传入的map生成BaiduLocationIOSOption对象 factory BaiduLocationIOSOption.fromMap(dynamic value) &#123; return new BaiduLocationIOSOption( locationTimeout: value['locationTimeout'], reGeocodeTimeout: value['reGeocodeTimeout'], activityType: value['activityType'], BMKLocationCoordinateType: value['BMKLocationCoordinateType'], desiredAccuracy: value['desiredAccuracy'], isNeedNewVersionRgc: value['isNeedNewVersionRgc'], pausesLocationUpdatesAutomatically: value['pausesLocationUpdatesAutomatically'], allowsBackgroundLocationUpdates: value['allowsBackgroundLocationUpdates'], distanceFilter: value['distanceFilter'], ); &#125; /// 获取对本类所有变量赋值后的map键值对 Map getMap() &#123; return &#123; \"locationTimeout\": locationTimeout, \"reGeocodeTimeout\": reGeocodeTimeout, \"activityType\": activityType, \"BMKLocationCoordinateType\": BMKLocationCoordinateType, \"desiredAccuracy\": desiredAccuracy, \"isNeedNewVersionRgc\": isNeedNewVersionRgc, \"pausesLocationUpdatesAutomatically\": pausesLocationUpdatesAutomatically, \"allowsBackgroundLocationUpdates\": allowsBackgroundLocationUpdates, \"distanceFilter\": distanceFilter, &#125;; &#125;&#125; 接口 lib/flutter_baidu_plugin_ducafecat.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import 'dart:async';import 'dart:io';import 'package:flutter/services.dart';class FlutterBaiduPluginDucafecat &#123; /// flutter端主动调用原生端方法 static const MethodChannel _channel = const MethodChannel('flutter_baidu_plugin_ducafecat'); /// 原生端主动回传结果数据到flutter端 static const EventChannel _stream = const EventChannel(\"flutter_baidu_plugin_ducafecat_stream\"); /// ios 下设置 key /// android 在 AndroidManifest.xml 中设置 static Future&lt;bool&gt; setApiKey(String key) async &#123; return await _channel.invokeMethod(\"setApiKey\", key); &#125; /// 设置定位参数 void prepareLoc(Map androidMap, Map iosMap) &#123; Map map; if (Platform.isAndroid) &#123; map = androidMap; &#125; else &#123; map = iosMap; &#125; _channel.invokeMethod(\"updateOption\", map); return; &#125; /// 启动定位 void startLocation() &#123; _channel.invokeMethod('startLocation'); return; &#125; /// 停止定位 void stopLocation() &#123; _channel.invokeMethod('stopLocation'); return; &#125; /// 原生端回传键值对map到flutter端 /// map中key为isInChina对应的value，如果为1则判断是在国内，为0则判断是在国外 /// map中存在key为nearby则判断为已到达设置监听位置附近 Stream&lt;Map&lt;String, Object&gt;&gt; onResultCallback() &#123; Stream&lt;Map&lt;String, Object&gt;&gt; _resultMap; if (_resultMap == null) &#123; _resultMap = _stream.receiveBroadcastStream().map&lt;Map&lt;String, Object&gt;&gt;( (element) =&gt; element.cast&lt;String, Object&gt;()); &#125; return _resultMap; &#125;&#125; 触发 registerWith 的方式，老项目 // This static function is optional and equivalent to onAttachedToEngine. It supports the old// pre-Flutter-1.12 Android projects. You are encouraged to continue supporting// plugin registration via this function while apps migrate to use the new Android APIs// post-flutter-1.12 via https://flutter.dev/go/android-project-migration. android 组件代码 android/src/main/java/tech/ducafecat/flutter_baidu_plugin_ducafecat/FlutterBaiduPluginDucafecatPlugin.java 123public static void registerWith(Registrar registrar) &#123; ......&#125; example android 注册组件 example/android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java 123456789101112131415161718public final class GeneratedPluginRegistrant &#123; public static void registerWith(PluginRegistry registry) &#123; if (alreadyRegisteredWith(registry)) &#123; return; &#125; LocationFlutterPlugin.registerWith(registry.registrarFor(\"com.baidu.bdmap_location_flutter_plugin.LocationFlutterPlugin\")); PermissionHandlerPlugin.registerWith(registry.registrarFor(\"com.baseflow.permissionhandler.PermissionHandlerPlugin\")); &#125; private static boolean alreadyRegisteredWith(PluginRegistry registry) &#123; final String key = GeneratedPluginRegistrant.class.getCanonicalName(); if (registry.hasPlugin(key)) &#123; return true; &#125; registry.registrarFor(key); return false; &#125;&#125; 成员变量、同步、异步处理MethodChannel 请求方法后，同步返回结果 EventChannel 组件主动推消息到 Flutter android/src/main/java/tech/ducafecat/flutter_baidu_plugin_ducafecat/FlutterBaiduPluginDucafecatPlugin.java 用到的成员变量先定义下 123456789101112131415161718public class FlutterBaiduPluginDucafecatPlugin implements FlutterPlugin, MethodCallHandler, EventChannel.StreamHandler &#123; // 通道名称 private static final String CHANNEL_METHOD_LOCATION = \"flutter_baidu_plugin_ducafecat\"; private static final String CHANNEL_STREAM_LOCATION = \"flutter_baidu_plugin_ducafecat_stream\"; private Context mContext = null; // flutter view context private LocationClient mLocationClient = null; // 定位对象 private EventChannel.EventSink mEventSink = null; // 事件对象 private BDNotifyListener mNotifyListener; // 位置提醒对象 private boolean isPurporseLoc = false; // 签到场景 private boolean isInChina = false; // 是否启用国内外位置判断功能 private boolean isNotify = false; // 位置提醒 // 通道对象 private MethodChannel channel = null; private EventChannel eventChannel = null; 组件生命周期 文件 android/src/main/java/tech/ducafecat/flutter_baidu_plugin_ducafecat/FlutterBaiduPluginDucafecatPlugin.java 组件注册 onAttachedToEngine 1234567891011121314151617@Overridepublic void onAttachedToEngine(@NonNull FlutterPluginBinding flutterPluginBinding) &#123; this.mContext = flutterPluginBinding.getApplicationContext(); /** * 开始、停止定位 */ channel = new MethodChannel(flutterPluginBinding.getBinaryMessenger(), CHANNEL_METHOD_LOCATION); channel.setMethodCallHandler(this); /** * 监听位置变化 */ eventChannel = new EventChannel(flutterPluginBinding.getBinaryMessenger(), CHANNEL_STREAM_LOCATION); eventChannel.setStreamHandler(this);&#125; 老项目 组件注册 registerWith 1234567891011121314151617181920 public static void registerWith(Registrar registrar) &#123; FlutterBaiduPluginDucafecatPlugin plugin = new FlutterBaiduPluginDucafecatPlugin(); plugin.mContext = registrar.context(); /** * 开始、停止定位 */ final MethodChannel channel = new MethodChannel(registrar.messenger(), CHANNEL_METHOD_LOCATION); channel.setMethodCallHandler(plugin); /** * 监听位置变化 */ final EventChannel eventChannel = new EventChannel(registrar.messenger(), CHANNEL_STREAM_LOCATION); eventChannel.setStreamHandler(plugin);// final MethodChannel channel = new MethodChannel(registrar.messenger(), \"flutter_baidu_plugin_ducafecat\");// channel.setMethodCallHandler(new FlutterBaiduPluginDucafecatPlugin()); &#125; 注销组件 onCancel 12345678910@Overridepublic void onCancel(Object arguments) &#123; stopLocation(); if (isNotify) &#123; if (null != mLocationClient) &#123; mLocationClient.removeNotifyEvent(mNotifyListener); &#125; mNotifyListener = null; &#125;&#125; 销毁组件 onDetachedFromEngine 12345@Overridepublic void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) &#123; channel.setMethodCallHandler(null); eventChannel.setStreamHandler(null);&#125; 方法调用 onMethodCall 123456789101112131415161718@Overridepublic void onMethodCall(@NonNull MethodCall call, @NonNull Result result) &#123; if (\"startLocation\".equals(call.method)) &#123; startLocation(); // 启动定位 &#125; else if (\"stopLocation\".equals(call.method)) &#123; stopLocation(); // 停止定位 &#125; else if(\"updateOption\".equals(call.method)) &#123; // 设置定位参数 try &#123; updateOption((Map) call.arguments); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; else if ((\"getPlatformVersion\").equals(call.method)) &#123; result.success(\"Android \" + android.os.Build.VERSION.RELEASE); &#125; else &#123; result.notImplemented(); &#125;&#125; flutter onListen 回调对象 1234@Overridepublic void onListen(Object arguments, EventChannel.EventSink events) &#123; mEventSink = events;&#125; 地图业务参数 更新参数 updateOption 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * 准备定位 * @param arguments */private void updateOption(Map arguments) &#123; if (null == mLocationClient) &#123; mLocationClient = new LocationClient(mContext); &#125; // 判断是否启用位置提醒功能 if (arguments.containsKey(\"isNotify\")) &#123; isNotify = true; if (null == mNotifyListener) &#123; mNotifyListener = new MyNotifyLister(); &#125; mLocationClient.registerNotify(mNotifyListener); double lat = 0; double lon = 0; float radius = 0; if (arguments.containsKey(\"latitude\")) &#123; lat = (double)arguments.get(\"latitude\"); &#125; if (arguments.containsKey(\"longitude\")) &#123; lon = (double)arguments.get(\"longitude\"); &#125; if (arguments.containsKey(\"radius\")) &#123; double radius1 = (double)arguments.get(\"radius\"); radius = Float.parseFloat(String.valueOf(radius1)); &#125; String coorType = mLocationClient.getLocOption().getCoorType(); mNotifyListener.SetNotifyLocation(lat, lon, radius, coorType); return; &#125; else &#123; isNotify = false; &#125; mLocationClient.registerLocationListener(new CurrentLocationListener()); // 判断是否启用国内外位置判断功能 if (arguments.containsKey(\"isInChina\")) &#123; isInChina = true; return; &#125; else &#123; isInChina =false; &#125; LocationClientOption option = new LocationClientOption(); parseOptions(option, arguments); option.setProdName(\"flutter\"); mLocationClient.setLocOption(option);&#125; 解析定位参数 parseOptions 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/** * 解析定位参数 * @param option * @param arguments */private void parseOptions(LocationClientOption option,Map arguments) &#123; if (arguments != null) &#123; // 可选，设置是否返回逆地理地址信息。默认是true if (arguments.containsKey(\"isNeedAddres\")) &#123; if (((boolean)arguments.get(\"isNeedAddres\"))) &#123; option.setIsNeedAddress(true); &#125; else &#123; option.setIsNeedAddress(false); &#125; &#125; // 可选，设置定位模式，可选的模式有高精度、仅设备、仅网络。默认为高精度模式 if (arguments.containsKey(\"locationMode\")) &#123; if (((int)arguments.get(\"locationMode\")) == 1) &#123; option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy); // 高精度模式 &#125; else if (((int)arguments.get(\"locationMode\")) == 2) &#123; option.setLocationMode(LocationClientOption.LocationMode.Device_Sensors); // 仅设备模式 &#125; else if (((int)arguments.get(\"locationMode\")) == 3) &#123; option.setLocationMode(LocationClientOption.LocationMode.Battery_Saving); // 仅网络模式 &#125; &#125; // 可选，设置场景定位参数，包括签到场景、运动场景、出行场景 if ((arguments.containsKey(\"LocationPurpose\"))) &#123; isPurporseLoc = true; if (((int)arguments.get(\"LocationPurpose\")) == 1) &#123; option.setLocationPurpose(LocationClientOption.BDLocationPurpose.SignIn); // 签到场景 &#125; else if (((int)arguments.get(\"LocationPurpose\")) == 2) &#123; option.setLocationPurpose(LocationClientOption.BDLocationPurpose.Transport); // 运动场景 &#125; else if (((int)arguments.get(\"LocationPurpose\")) == 3) &#123; option.setLocationPurpose(LocationClientOption.BDLocationPurpose.Sport); // 出行场景 &#125; &#125; else &#123; isPurporseLoc = false; &#125; // 可选，设置需要返回海拔高度信息 if (arguments.containsKey(\"isNeedAltitude\")) &#123; if (((boolean)arguments.get(\"isNeedAltitude\"))) &#123; option.setIsNeedAddress(true); &#125; else &#123; option.setIsNeedAltitude(false); &#125; &#125; // 可选，设置是否使用gps，默认false if (arguments.containsKey(\"openGps\")) &#123; if(((boolean)arguments.get(\"openGps\"))) &#123; option.setOpenGps(true); &#125; else &#123; option.setOpenGps(false); &#125; &#125; // 可选，设置是否允许返回逆地理地址信息，默认是true if (arguments.containsKey(\"isNeedLocationDescribe\")) &#123; if(((boolean)arguments.get(\"isNeedLocationDescribe\"))) &#123; option.setIsNeedLocationDescribe(true); &#125; else &#123; option.setIsNeedLocationDescribe(false); &#125; &#125; // 可选，设置发起定位请求的间隔，int类型，单位ms // 如果设置为0，则代表单次定位，即仅定位一次，默认为0 // 如果设置非0，需设置1000ms以上才有效 if (arguments.containsKey(\"scanspan\")) &#123; option.setScanSpan((int)arguments.get(\"scanspan\")); &#125; // 可选，设置返回经纬度坐标类型，默认GCJ02 // GCJ02：国测局坐标； // BD09ll：百度经纬度坐标； // BD09：百度墨卡托坐标； // 海外地区定位，无需设置坐标类型，统一返回WGS84类型坐标 if (arguments.containsKey(\"coorType\")) &#123; option.setCoorType((String)arguments.get(\"coorType\")); &#125; // 设置是否需要返回附近的poi列表 if (arguments.containsKey(\"isNeedLocationPoiList\")) &#123; if (((boolean)arguments.get(\"isNeedLocationPoiList\"))) &#123; option.setIsNeedLocationPoiList(true); &#125; else &#123; option.setIsNeedLocationPoiList(false); &#125; &#125; // 设置是否需要最新版本rgc数据 if (arguments.containsKey(\"isNeedNewVersionRgc\")) &#123; if (((boolean)arguments.get(\"isNeedNewVersionRgc\"))) &#123; option.setIsNeedLocationPoiList(true); &#125; else &#123; option.setIsNeedLocationPoiList(false); &#125; &#125; &#125;&#125; 编写启动、停止功能 开始定位 123456private void startLocation() &#123; if(null != mLocationClient) &#123; mLocationClient.start(); &#125;&#125; 停止定位 1234567private void stopLocation() &#123; if (null != mLocationClient) &#123; mLocationClient.stop(); mLocationClient = null; &#125;&#125; 百度定位回调 CurrentLocationListener 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116 /** * 格式化时间 * * @param time * @param strPattern * @return */ private String formatUTC(long time, String strPattern) &#123; if (TextUtils.isEmpty(strPattern)) &#123; strPattern = \"yyyy-MM-dd HH:mm:ss\"; &#125; SimpleDateFormat sdf = null; try &#123; sdf = new SimpleDateFormat(strPattern, Locale.CHINA); sdf.applyPattern(strPattern); &#125; catch (Throwable e) &#123; e.printStackTrace(); &#125; return sdf == null ? \"NULL\" : sdf.format(time); &#125; class CurrentLocationListener extends BDAbstractLocationListener &#123; @Override public void onReceiveLocation(BDLocation bdLocation) &#123; if (null == mEventSink) &#123; return; &#125; Map&lt;String, Object&gt; result = new LinkedHashMap&lt;&gt;(); // 判断国内外获取结果 if (isInChina) &#123; if (bdLocation.getLocationWhere() == BDLocation.LOCATION_WHERE_IN_CN) &#123; result.put(\"isInChina\", 1); // 在国内 &#125; else &#123; result.put(\"isInChina\", 0); // 在国外 &#125; mEventSink.success(result); return; &#125; // 场景定位获取结果 if (isPurporseLoc) &#123; result.put(\"latitude\", bdLocation.getLatitude()); // 纬度 result.put(\"longitude\", bdLocation.getLongitude()); // 经度 mEventSink.success(result); return; &#125; result.put(\"callbackTime\", formatUTC(System.currentTimeMillis(), \"yyyy-MM-dd HH:mm:ss\")); if (null != bdLocation) &#123; if (bdLocation.getLocType() == BDLocation.TypeGpsLocation || bdLocation.getLocType() == BDLocation.TypeNetWorkLocation || bdLocation.getLocType() == BDLocation.TypeOffLineLocation) &#123; result.put(\"locType\", bdLocation.getLocType()); // 定位结果类型 result.put(\"locTime\", bdLocation.getTime()); // 定位成功时间 result.put(\"latitude\", bdLocation.getLatitude()); // 纬度 result.put(\"longitude\", bdLocation.getLongitude()); // 经度 if (bdLocation.hasAltitude()) &#123; result.put(\"altitude\", bdLocation.getAltitude()); // 高度 &#125; result.put(\"radius\", Double.parseDouble(String.valueOf(bdLocation.getRadius()))); // 定位精度 result.put(\"country\", bdLocation.getCountry()); // 国家 result.put(\"province\", bdLocation.getProvince()); // 省份 result.put(\"city\", bdLocation.getCity()); // 城市 result.put(\"district\", bdLocation.getDistrict()); // 区域 result.put(\"town\", bdLocation.getTown()); // 城镇 result.put(\"street\", bdLocation.getStreet()); // 街道 result.put(\"address\", bdLocation.getAddrStr()); // 地址 result.put(\"locationDetail\", bdLocation.getLocationDescribe()); // 位置语义化描述 if (null != bdLocation.getPoiList() &amp;&amp; !bdLocation.getPoiList().isEmpty()) &#123; List&lt;Poi&gt; pois = bdLocation.getPoiList(); StringBuilder stringBuilder = new StringBuilder(); if (pois.size() == 1) &#123; stringBuilder.append(pois.get(0).getName()).append(\",\").append(pois.get(0).getTags()) .append(pois.get(0).getAddr()); &#125; else &#123; for (int i = 0; i &lt; pois.size() - 1; i++) &#123; stringBuilder.append(pois.get(i).getName()).append(\",\").append(pois.get(i).getTags()) .append(pois.get(i).getAddr()).append(\"|\"); &#125; stringBuilder.append(pois.get(pois.size()-1).getName()).append(\",\").append(pois.get(pois.size()-1).getTags()) .append(pois.get(pois.size()-1).getAddr()); &#125; result.put(\"poiList\",stringBuilder.toString()); // 周边poi信息// &#125; if (bdLocation.getFloor() != null) &#123; // 当前支持高精度室内定位 String buildingID = bdLocation.getBuildingID();// 百度内部建筑物ID String buildingName = bdLocation.getBuildingName();// 百度内部建筑物缩写 String floor = bdLocation.getFloor();// 室内定位的楼层信息，如 f1,f2,b1,b2 StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(buildingID).append(\"-\").append(buildingName).append(\"-\").append(floor); result.put(\"indoor\", stringBuilder.toString()); // 室内定位结果信息 mLocationClient.startIndoorMode();// 开启室内定位模式（重复调用也没问题），开启后，定位SDK会融合各种定位信息（GPS,WI-FI，蓝牙，传感器等）连续平滑的输出定位结果； &#125; else &#123; mLocationClient.stopIndoorMode(); // 处于室外则关闭室内定位模式 &#125; &#125; else &#123; result.put(\"errorCode\", bdLocation.getLocType()); // 定位结果错误码 result.put(\"errorInfo\", bdLocation.getLocTypeDescription()); // 定位失败描述信息 &#125; &#125; else &#123; result.put(\"errorCode\", -1); result.put(\"errorInfo\", \"location is null\"); &#125; mEventSink.success(result); // android端实时检测位置变化，将位置结果发送到flutter端 &#125; &#125; 位置提醒服务123456789101112public class MyNotifyLister extends BDNotifyListener &#123; // 已到达设置监听位置附近 public void onNotify(BDLocation mlocation, float distance)&#123; if (null == mEventSink) &#123; return; &#125; Map&lt;String, Object&gt; result = new LinkedHashMap&lt;&gt;(); result.put(\"nearby\", \"已到达设置监听位置附近\"); // 1为已经到达 0为未到达 mEventSink.success(result); &#125;&#125; Example 代码动态授权 example/pubspec.yaml 1234567dependencies: flutter: sdk: flutter ... permission_handler: ^5.0.1+1 example/lib/main.dart 12345678910111213141516171819class _MyAppState extends State&lt;MyApp&gt; &#123; @override void initState() &#123; super.initState(); _requestPermission(); // 执行权限请求 &#125; // 动态申请定位权限 Future&lt;bool&gt; _requestPermission() async &#123; Map&lt;Permission, PermissionStatus&gt; statuses = await [ Permission.location, Permission.storage, ].request(); return statuses[Permission.location].isGranted &amp;&amp; statuses[Permission.storage].isGranted; &#125;&#125; 主界面代码 example/lib/main.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import 'dart:io';import 'package:flutter/material.dart';import 'dart:async';import 'package:flutter_baidu_plugin_ducafecat/flutter_baidu_plugin_ducafecat.dart';import 'package:flutter_baidu_plugin_ducafecat_example/views/location-view.dart';import 'package:permission_handler/permission_handler.dart';void main() &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; @override _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override void initState() &#123; super.initState(); _requestPermission(); // 执行权限请求 if (Platform.isIOS == true) &#123; FlutterBaiduPluginDucafecat.setApiKeyForIOS( \"dkYT07blcAj3drBbcN1eGFYqt16HP1pR\"); &#125; &#125; @override void dispose() &#123; super.dispose(); &#125; // 动态申请定位权限 Future&lt;bool&gt; _requestPermission() async &#123; Map&lt;Permission, PermissionStatus&gt; statuses = await [ Permission.location, Permission.storage, ].request(); return statuses[Permission.location].isGranted &amp;&amp; statuses[Permission.storage].isGranted; &#125; @override Widget build(BuildContext context) &#123; return MaterialApp( routes: &#123; \"location_view\": (context) =&gt; LocationView(), &#125;, home: MyHome(), ); &#125;&#125;class MyHome extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: Text('地图插件')), body: SingleChildScrollView( child: Column( children: [ ListTile( title: Text('定位信息'), subtitle: Text('点击开始后，百度地图实时推送经纬度信息'), leading: Icon(Icons.location_searching), trailing: Icon(Icons.keyboard_arrow_right), onTap: () &#123; Navigator.pushNamed(context, \"location_view\"); &#125;, ) ], ), ), ); &#125;&#125; 定位服务代码 example/lib/views/location-view.dartimport 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_baidu_plugin_ducafecat/entity/flutter_baidu_location.dart';import 'package:flutter_baidu_plugin_ducafecat/entity/flutter_baidu_location_android_option.dart';import 'package:flutter_baidu_plugin_ducafecat/entity/flutter_baidu_location_ios_option.dart';import 'package:flutter_baidu_plugin_ducafecat/flutter_baidu_plugin_ducafecat.dart';class LocationView extends StatefulWidget &#123; LocationView(&#123;Key key&#125;) : super(key: key); @override _LocationViewState createState() =&gt; _LocationViewState();&#125;class _LocationViewState extends State&lt;LocationView&gt; &#123; FlutterBaiduPluginDucafecat _locationPlugin = FlutterBaiduPluginDucafecat(); StreamSubscription&lt;Map&lt;String, Object&gt;&gt; _locationListener; // 事件监听 BaiduLocation _baiduLocation; // 经纬度信息 // Map&lt;String, Object&gt; _loationResult; // 返回格式数据 @override void dispose() &#123; super.dispose(); // 取消监听 if (null != _locationListener) &#123; _locationListener.cancel(); &#125; &#125; // 返回定位信息 void _setupListener() &#123; if (_locationListener != null) &#123; return; &#125; _locationListener = _locationPlugin.onResultCallback().listen((Map&lt;String, Object&gt; result) &#123; setState(() &#123; // _loationResult = result; try &#123; _baiduLocation = BaiduLocation.fromMap(result); print(_baiduLocation); &#125; catch (e) &#123; print(e); &#125; &#125;); &#125;); &#125; // 设置android端和ios端定位参数 void _setLocOption() &#123; // android 端设置定位参数 BaiduLocationAndroidOption androidOption = new BaiduLocationAndroidOption(); androidOption.setCoorType(\"bd09ll\"); // 设置返回的位置坐标系类型 androidOption.setIsNeedAltitude(true); // 设置是否需要返回海拔高度信息 androidOption.setIsNeedAddres(true); // 设置是否需要返回地址信息 androidOption.setIsNeedLocationPoiList(true); // 设置是否需要返回周边poi信息 androidOption.setIsNeedNewVersionRgc(true); // 设置是否需要返回最新版本rgc信息 androidOption.setIsNeedLocationDescribe(true); // 设置是否需要返回位置描述 androidOption.setOpenGps(true); // 设置是否需要使用gps androidOption.setLocationMode(LocationMode.Hight_Accuracy); // 设置定位模式 androidOption.setScanspan(1000); // 设置发起定位请求时间间隔 Map androidMap = androidOption.getMap(); // ios 端设置定位参数 BaiduLocationIOSOption iosOption = new BaiduLocationIOSOption(); iosOption.setIsNeedNewVersionRgc(true); // 设置是否需要返回最新版本rgc信息 iosOption.setBMKLocationCoordinateType( \"BMKLocationCoordinateTypeBMK09LL\"); // 设置返回的位置坐标系类型 iosOption.setActivityType(\"CLActivityTypeAutomotiveNavigation\"); // 设置应用位置类型 iosOption.setLocationTimeout(10); // 设置位置获取超时时间 iosOption.setDesiredAccuracy(\"kCLLocationAccuracyBest\"); // 设置预期精度参数 iosOption.setReGeocodeTimeout(10); // 设置获取地址信息超时时间 iosOption.setDistanceFilter(100); // 设置定位最小更新距离 iosOption.setAllowsBackgroundLocationUpdates(true); // 是否允许后台定位 iosOption.setPauseLocUpdateAutomatically(true); // 定位是否会被系统自动暂停 Map iosMap = iosOption.getMap(); _locationPlugin.prepareLoc(androidMap, iosMap); &#125; // 启动定位 void _handleStartLocation() &#123; if (null != _locationPlugin) &#123; _setupListener(); _setLocOption(); _locationPlugin.startLocation(); &#125; &#125; // 停止定位 void _handleStopLocation() &#123; if (null != _locationPlugin) &#123; _locationPlugin.stopLocation(); setState(() &#123; _baiduLocation = null; &#125;); &#125; &#125; //////////////////////////////////////////////////////////// // 显示地理信息 Widget _buildLocationView() &#123; return _baiduLocation != null ? Table( children: [ TableRow(children: [ TableCell(child: Text('经度')), TableCell(child: Text(_baiduLocation.longitude.toString())), ]), TableRow(children: [ TableCell(child: Text('纬度')), TableCell(child: Text(_baiduLocation.latitude.toString())), ]), TableRow(children: [ TableCell(child: Text('国家')), TableCell( child: Text(_baiduLocation.country != null ? _baiduLocation.country : \"\")), ]), TableRow(children: [ TableCell(child: Text('省份')), TableCell( child: Text(_baiduLocation.province != null ? _baiduLocation.province : \"\")), ]), TableRow(children: [ TableCell(child: Text('城市')), TableCell( child: Text(_baiduLocation.city != null ? _baiduLocation.city : \"\")), ]), TableRow(children: [ TableCell(child: Text('区县')), TableCell( child: Text(_baiduLocation.district != null ? _baiduLocation.district : \"\")), ]), TableRow(children: [ TableCell(child: Text('街道')), TableCell( child: Text(_baiduLocation.street != null ? _baiduLocation.street : \"\")), ]), TableRow(children: [ TableCell(child: Text('地址')), TableCell( child: Text(_baiduLocation.address != null ? _baiduLocation.address : \"\")), ]), TableRow(children: [ TableCell(child: Text('位置语义化描述')), TableCell( child: Text(_baiduLocation.locationDetail != null ? _baiduLocation.locationDetail : \"\")), ]), TableRow(children: [ TableCell(child: Text('周边poi信息')), TableCell( child: Text(_baiduLocation.poiList != null ? _baiduLocation.poiList : \"\")), ]), TableRow(children: [ TableCell(child: Text('错误码')), TableCell( child: Text(_baiduLocation.errorCode != null ? _baiduLocation.errorCode.toString() : \"\")), ]), TableRow(children: [ TableCell(child: Text('定位失败描述信息')), TableCell( child: Text(_baiduLocation.errorInfo != null ? _baiduLocation.errorInfo : \"\")), ]), ], ) : Container(); &#125; // 控制面板 Widget _buildControlPlan() &#123; return Row( mainAxisAlignment: MainAxisAlignment.center, children: [ MaterialButton( color: Colors.blue, textColor: Colors.white, onPressed: _baiduLocation == null ? _handleStartLocation : null, child: Text('开始定位'), ), MaterialButton( color: Colors.blue, textColor: Colors.white, onPressed: _baiduLocation != null ? _handleStopLocation : null, child: Text('暂停定位'), ) ], ); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: Text('定位信息'), ), body: SingleChildScrollView( child: Column( children: [ _buildControlPlan(), Divider(), _buildLocationView(), ], ), ), ); &#125;&#125; 参考 https://lbsyun.baidu.com/apiconsole/key#/home http://lbsyun.baidu.com/index.php?title=android-locsdk © 猫哥 https://ducafecat.techhttps://ducafecat.gitee.io","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 混合开发 - 01 编写设备端组件的正确姿势!","date":"2020-07-29T16:00:00.000Z","path":"2020/07/30/flutter-daily/flutter-plugins-01-developing-packages-plugins/","text":"本节目标 闲鱼手册中提到的混合开发 编写到使用一个 flutter 组件的完整过程 视频https://www.bilibili.com/video/bv1iT4y1j72t 代码https://github.com/ducafecat/flutter_baidu_plugin_ducafecat/releases/tag/1.0.1 正文从古至今、移动开发不可回避的问题 flutter、weex、React Native、Cordova 开发模式 聊聊 Flutter in Action 闲鱼最佳实践电子书下载 https://c.tb.cn/I3.ZZpRl 第二代混合技术方案 FlutterBoost 项目开源地址 https://github.com/alibaba/flutter_boost 架构图 Native 层概念 ● Container：Native 容器，平台 Controller，Activity，ViewController● Container Manager：容器的管理者● Adaptor：Flutter 是适配层● Messaging：基于 Channel 的消息通信 Dart 层概念 ● Container：Flutter 用来容纳 Widget 的容器，具体实现为 Navigator 的派生类● Container Manager：Flutter 容器的管理，提供 show，remove 等 Api● Coordinator: 协调器，接受 Messaging 消息，负责调用 Container Manager 的状态管理。● Messaging：基于 Channel 的消息通信 Flutter &amp; FaaS 云端一体化 Flutter 会为以下团队带来较大的收益 Flutter Redux 混合工程下的 Flutter 研发结构 动手写第一个 Flutter 组件创建 flutter 组件工程1$ flutter create --org tech.ducafecat --template=plugin -a java -i objc flutter-baidu-plugin-ducafecat 加入 加法 函数 dart 代码 lib/flutter_baidu_plugin_ducafecat.dart 123456789101112131415161718import 'dart:async';import 'package:flutter/services.dart';class FlutterBaiduPluginDucafecat &#123; static const MethodChannel _channel = const MethodChannel('flutter_baidu_plugin_ducafecat'); static Future&lt;String&gt; get platformVersion async &#123; final String version = await _channel.invokeMethod('getPlatformVersion'); return version; &#125; static Future&lt;int&gt; duAddOne(int num) async &#123; final int val = await _channel.invokeMethod('duAddOne', &#123;\"num\": num&#125;); return val; &#125;&#125; android 代码 android/src/main/java/tech/ducafecat/flutter_baidu_plugin_ducafecat/FlutterBaiduPluginDucafecatPlugin.java 1234567891011121314@Overridepublic void onMethodCall(@NonNull MethodCall call, @NonNull Result result) &#123; if (call.method.equals(\"getPlatformVersion\")) &#123; result.success(\"Android \" + android.os.Build.VERSION.RELEASE); &#125; else if (call.method.equals(\"duAddOne\")) &#123; int val = 100; val += Integer.valueOf(call.argument(\"num\").toString()); result.success(val); &#125; else &#123; result.notImplemented(); &#125;&#125; ios 代码 ios/Classes/FlutterBaiduPluginDucafecatPlugin.m 1234567891011121314151617181920212223242526#import \"FlutterBaiduPluginDucafecatPlugin.h\"@implementation FlutterBaiduPluginDucafecatPlugin+ (void)registerWithRegistrar:(NSObject&lt;FlutterPluginRegistrar&gt;*)registrar &#123; FlutterMethodChannel* channel = [FlutterMethodChannel methodChannelWithName:@\"flutter_baidu_plugin_ducafecat\" binaryMessenger:[registrar messenger]]; FlutterBaiduPluginDucafecatPlugin* instance = [[FlutterBaiduPluginDucafecatPlugin alloc] init]; [registrar addMethodCallDelegate:instance channel:channel];&#125;- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result &#123; if ([@\"getPlatformVersion\" isEqualToString:call.method]) &#123; result([@\"iOS \" stringByAppendingString:[[UIDevice currentDevice] systemVersion]]); &#125; else if ([@\"duAddOne\" isEqualToString:call.method]) &#123; NSInteger val = 100; val += [[call.arguments objectForKey:@\"num\"] intValue]; result([NSNumber numberWithLong:val]); &#125; else &#123; result(FlutterMethodNotImplemented); &#125;&#125;@end 新建工程调用 pubspec.yaml 1234flutter_baidu_plugin_ducafecat: git: url: https://github.com/ducafecat/flutter_baidu_plugin_ducafecat version: ^0.0.1 调用 加法 1234void _incrementCounter() async &#123; _counter = await FlutterBaiduPluginDucafecat.duAddOne(20); setState(() &#123;&#125;);&#125; 参考 https://cordova.apache.org/ https://reactnative.dev/ https://flutter.dev/ https://weex.apache.org/ © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 17 headless strapi centos 发布部署 + jmeter 压测","date":"2020-07-20T16:00:00.000Z","path":"2020/07/21/flutter-project/flutter-project-news-17-strapi-docker-compose-deploy-jmeter/","text":"本节目标 上传代码到生产环境 配置发布环境代码 docker-compose 方式启动项目 jmeter 做基线测试 调优服务器配置 视频https://www.bilibili.com/video/BV15v411q7CK/ strapi 运行环境网盘下载 网盘 链接:https://pan.baidu.com/s/13Ujy2hzXp8tSqxCx_4IhVQ密码:yu82 运行 本节下载 strapi-docker-compose-16.zip 这个文件 需要用 docker-compose 启动账号 admin密码 123456 12345# 启动docker-compose up -d --remove-orphans# 关闭docker-compose down 正文打包上传服务器 服务器配置 考虑到基线压测优化，所以一开始低些 服务器 cpu1 核心 2G 内存 如何配置 centos 服务器 参考我之前的文章 https://ducafecat.tech/2020/05/29/docker/docker-02-windows-vmware-centos-setup/ https://youtu.be/NJIwbs8qmDY 把所有文件 tar、zip 打包后上传 123&gt; yum install -y zip unzip&gt; unzip filename.zip 修改 graphql 配置 文件 ./config/plugins.js 1234567891011module.exports = &#123; // graphql: &#123; endpoint: \"/graphql\", tracing: false, shadowCRUD: true, playgroundAlways: false, depthLimit: 7, amountLimit: 100, &#125;,&#125;; 名称 说明 endpoint 对外路径 tracing 反馈性能报告 shadowCRUD 支持 CRUD 操作 playgroundAlways 显示调试界面 depthLimit 查询深度限制 amountLimit 查询项目个数 参数说明 修改 admin 面板地址 文件 ./config/server.js 1234567module.exports = (&#123; env &#125;) =&gt; (&#123; host: env(\"HOST\", \"0.0.0.0\"), port: env.int(\"PORT\", 1337), admin: &#123; url: \"/dashboard\", &#125;,&#125;); 默认 admin 不安全，可以改成奇怪的路径 dfasdx97s7 这种 strapi build 编译 安装 portainer 12345docker run -d -p 9000:9000 \\ --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ --name portainer-local \\ portainer/portainer 用工具 portainer 进入容器 1&gt; strapi build 修改 docker-compose 命令12345678910...strapi-app: image: strapi/strapi container_name: strapi-app restart: always ports: - 1337:1337 command: strapi start environment: ... jmeter 压第一轮 - 服务器 cpu1 核心 2G 内存 测试工具 https://jmeter.apache.org/download_jmeter.cgi 需要安装 java 运行环境 jre 1.8 测试内容 新闻首页 123post /graphql&#123;&quot;operationName&quot;:&quot;pageIndex&quot;,&quot;variables&quot;:&#123;&#125;,&quot;query&quot;:&quot;query pageIndex &#123;\\n dictCategories(sort: \\&quot;sortNum:desc\\&quot;) &#123;\\n code\\n title\\n &#125;\\n dictChannels(sort: \\&quot;sortNum:desc\\&quot;) &#123;\\n code\\n title\\n icon &#123;\\n url\\n &#125;\\n &#125;\\n busNews(where: &#123;dict_categories: &#123;code: \\&quot;news_hot\\&quot;&#125;&#125;) &#123;\\n title\\n dict_channel &#123;\\n code\\n title\\n icon &#123;\\n url\\n &#125;\\n &#125;\\n dict_categories &#123;\\n code\\n title\\n &#125;\\n author\\n url\\n addtime\\n thumbnail &#123;\\n url\\n &#125;\\n &#125;\\n&#125;\\n&quot;&#125; 测试环境 压测机: 8 核心 32G 本机 macos，发起线程数 1000~2000 官方建议单机数量服务器: 1 核心 2G 虚拟机 centos 服务器信息监控 12345678910111213141516171819202122&gt; toptop - 23:41:47 up 45 min, 2 users, load average: 0.12, 2.10, 2.09Tasks: 160 total, 1 running, 159 sleeping, 0 stopped, 0 zombie%Cpu(s): 2.2 us, 1.2 sy, 0.0 ni, 96.3 id, 0.0 wa, 0.0 hi, 0.2 si, 0.0 stKiB Mem : 1877360 total, 424344 free, 746224 used, 706792 buff/cacheKiB Swap: 6713340 total, 6713340 free, 0 used. 963492 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND31814 root 20 0 2099204 91620 23620 S 3.7 4.9 3:03.04 node 977 root 20 0 820140 47944 14876 S 2.0 2.6 0:40.63 containerd 9 root 20 0 0 0 0 S 0.3 0.0 0:01.84 rcu_sched 445 root 20 0 0 0 0 S 0.3 0.0 0:01.07 xfsaild/dm-0 995 root 20 0 783740 91376 29532 S 0.3 4.9 0:08.46 dockerd 1675 polkitd 20 0 1659672 119912 18932 S 0.3 6.4 2:15.62 mongod31570 root 20 0 633704 38776 15156 S 0.3 2.1 0:13.24 node 1 root 20 0 191036 3940 2572 S 0.0 0.2 0:00.60 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kthreadd 4 root 0 -20 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0H 6 root 20 0 0 0 0 S 0.0 0.0 0:01.15 ksoftirqd/0 7 root rt 0 0 0 0 S 0.0 0.0 0:00.09 migration/0 8 root 20 0 0 0 0 S 0.0 0.0 0:00.00 rcu_bh ctrl + c 停止 GUI 压测 1000 个请求 10 秒内 命令行 压测 1jmeter -n -t strapi.jmx -l report/result.csv -j report/log.log -e -o report_html jmeter 压第二轮 - 服务器 cpu4 核心 2G 内存 测试环境 压测机: 8 核心 32G 本机 macos，发起线程数 1000~2000服务器: 4 核心 2G 虚拟机 centos 1000 个请求 5 秒内 压测报告 1jmeter -n -t strapi.jmx -l report/result.csv -j report/log.log -e -o report_html strapi 优化线程数 安装 pm2 工具 https://pm2.keymetrics.io/docs/usage/quick-start/ 编写 启动代码 server.js 12const strapi = require(\"strapi\");strapi().start(); 编写 配置文件 strapi.config.js 12345678910module.exports = &#123; apps: [ &#123; name: \"strapi-app\", script: \"./server.js\", instances: 4, exec_mode: \"cluster\", &#125;, ],&#125;; instances 等于你的核心数 修改 docker-compose.yml 123456789101112131415161718 ...strapi-app: image: strapi/strapi container_name: strapi-app restart: always ports: - 1337:1337 # command: strapi build # command: strapi start command: - /bin/bash - -c - | npm install pm2@latest -g cd /srv/app pm2-runtime start strapi.config.js environment: ... jmeter 压第三轮 - 服务器 cpu4 核心 2G 内存 2000 个请求 1 秒内 主要服务器指标 名称 说明 CPU &lt;= 40% 内存 &lt;= 70% 其它主要指标 连接数、本机进出流量、内网带宽、外网带宽 总结 strapi 服务器部署配置 jmetre 基线测试方法、主要指标查看 参考 strapi 插件配置 https://strapi.io/documentation/v3.x/plugins/graphql.html strapi 命令行 https://strapi.io/documentation/v3.x/cli/CLI.html#strapi-new strapi 部署说明 https://strapi.io/documentation/v3.x/admin-panel/deploy.html pm2 安装 https://pm2.keymetrics.io/docs/usage/quick-start/ pm2 配置文件 https://pm2.keymetrics.io/docs/usage/application-declaration/ jmeter https://jmeter.apache.org/download_jmeter.cgi jmeter 分布式 https://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html 资源设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 16 headless strapi + graphql 用户注册、登录、异常处理","date":"2020-07-13T16:00:00.000Z","path":"2020/07/14/flutter-project/flutter-project-news-16-strapi-graphql-login-register/","text":"本节目标 编写 mutation 操作，登录、注册 graphql 操作类加入异常处理 视频https://www.bilibili.com/video/BV1vt4y1Q7i3/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.16 strapi 运行环境网盘下载 网盘 链接:https://pan.baidu.com/s/13Ujy2hzXp8tSqxCx_4IhVQ密码:yu82 运行 需要用 docker-compose 启动账号 admin密码 123456 12345# 启动docker-compose up -d --remove-orphans# 关闭docker-compose down 正文 调试地址 http://localhost:1337/graphql 注册 graphql mutation 123456789101112131415161718mutation UserRegister($username: String!, $email: String!, $password: String!) &#123; register(input: &#123; username: $username, email: $email, password: $password &#125;) &#123; jwt user &#123; id username email role &#123; id name description type &#125; blocked confirmed &#125; &#125;&#125; variables 12345&#123; \"username\": \"dbuser\", \"email\": \"dbuser@ducafecat.tech\", \"password\": \"12345678\"&#125; 登录 graphql123456789101112131415161718mutation UserLogin($identifier: String!, $password: String!) &#123; login(input: &#123; identifier: $identifier, password: $password &#125;) &#123; jwt user &#123; id username email role &#123; id name description type &#125; blocked confirmed &#125; &#125;&#125; variables 1234&#123; \"identifier\": \"dbuser\", \"password\": \"12345678\"&#125; identifier 可以是 username、email ，都是唯一的 Graphql 请求类加入异常处理 lib/common/utils/graphql_client.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';import 'package:flutter_ducafecat_news/global.dart';import 'package:graphql/client.dart';class GraphqlClientUtil &#123; static OptimisticCache cache = OptimisticCache( dataIdFromObject: typenameDataIdFromObject, ); static client() &#123; HttpLink _httpLink = HttpLink( uri: '$SERVER_STRAPI_GRAPHQL_URL/graphql', ); if (Global.profile?.jwt != null) &#123; final AuthLink _authLink = AuthLink( getToken: () =&gt; 'Bearer $&#123;Global.profile.jwt&#125;', ); final Link _link = _authLink.concat(_httpLink); return GraphQLClient( cache: cache, link: _link, ); &#125; else &#123; return GraphQLClient( cache: cache, link: _httpLink, ); &#125; &#125; /// 错误处理 static _formatException(BuildContext context, OperationException exception) &#123; var statusCode = ''; try &#123; statusCode = exception .graphqlErrors[0]?.extensions[\"exception\"][\"output\"][\"statusCode\"] .toString(); if (statusCode == '') &#123; statusCode = exception.graphqlErrors[0]?.extensions[\"exception\"][\"code\"] .toString(); &#125; &#125; catch (e) &#123;&#125; switch (statusCode) &#123; case '400': // 重新登录 toastInfo(msg: \"错误请求，提交数据错误！\"); break; case '401': // 没有认证 case '403': // 没有授权 toastInfo(msg: \"账号无效、服务没有授权，请重新登录！\"); return goLoginPage(context); // break; default: toastInfo(msg: exception.toString()); &#125; throw exception; &#125; // 查询 static Future query(&#123; @required BuildContext context, @required String schema, Map&lt;String, dynamic&gt; variables, &#125;) async &#123; QueryOptions options = QueryOptions( documentNode: gql(schema), variables: variables, ); QueryResult result = await client().query(options); if (result.hasException) &#123; _formatException(context, result.exception); &#125; return result; &#125; // 操作 static Future mutate(&#123; @required BuildContext context, @required String schema, Map&lt;String, dynamic&gt; variables, &#125;) async &#123; MutationOptions options = MutationOptions( documentNode: gql(schema), variables: variables, ); QueryResult result = await client().mutate(options); if (result.hasException) &#123; _formatException(context, result.exception); &#125; return result; &#125;&#125; 常见错误码: 400 数据提交时间401 需要登录认证403 功能需要授权 Entity 用户 lib/common/entitys/gql_user.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159// 用户登录 - requestclass GqlUserLoginRequestEntity &#123; GqlUserLoginRequestEntity(&#123; this.identifier, this.password, &#125;); String identifier; String password; factory GqlUserLoginRequestEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlUserLoginRequestEntity( identifier: json[\"identifier\"], password: json[\"password\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"identifier\": identifier, \"password\": password, &#125;;&#125;// 用户登录 - requestclass GqlUserRegisterRequestEntity &#123; GqlUserRegisterRequestEntity(&#123; this.username, this.email, this.password, &#125;); String username; String email; String password; factory GqlUserRegisterRequestEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlUserRegisterRequestEntity( username: json[\"username\"], email: json[\"email\"], password: json[\"password\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"username\": username, \"email\": email, \"password\": password, &#125;;&#125;//////////////////////////////////////////////////////////////////// 用户登录 - responseclass GqlUserLoginResponseEntity &#123; GqlUserLoginResponseEntity(&#123; this.jwt, this.user, &#125;); String jwt; UserEntity user; factory GqlUserLoginResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlUserLoginResponseEntity( jwt: json[\"jwt\"], user: UserEntity.fromJson(json[\"user\"]), ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"jwt\": jwt, \"user\": user.toJson(), &#125;;&#125;// 注册新用户 - responseclass GqlUserRegisterResponseEntity &#123; GqlUserRegisterResponseEntity(&#123; this.jwt, this.user, &#125;); String jwt; UserEntity user; factory GqlUserRegisterResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlUserRegisterResponseEntity( jwt: json[\"jwt\"], user: UserEntity.fromJson(json[\"user\"]), ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"jwt\": jwt, \"user\": user.toJson(), &#125;;&#125;// 用户class UserEntity &#123; UserEntity(&#123; this.id, this.username, this.email, this.role, this.blocked, this.confirmed, &#125;); String id; String username; String email; RoleEntity role; bool blocked; bool confirmed; factory UserEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; UserEntity( id: json[\"id\"], username: json[\"username\"], email: json[\"email\"], role: RoleEntity.fromJson(json[\"role\"]), blocked: json[\"blocked\"], confirmed: json[\"confirmed\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"id\": id, \"username\": username, \"email\": email, \"role\": role.toJson(), \"blocked\": blocked, \"confirmed\": confirmed, &#125;;&#125;// 角色class RoleEntity &#123; RoleEntity(&#123; this.id, this.name, this.description, this.type, &#125;); String id; String name; String description; String type; factory RoleEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; RoleEntity( id: json[\"id\"], name: json[\"name\"], description: json[\"description\"], type: json[\"type\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"id\": id, \"name\": name, \"description\": description, \"type\": type, &#125;;&#125; API 用户注册、登录 lib/common/apis/gql_user.dart 12345678910111213141516171819202122232425262728293031323334import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/graphql/graphql.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:graphql/client.dart';/// 新闻class GqlUserAPI &#123; /// 登录 static Future&lt;GqlUserLoginResponseEntity&gt; login(&#123; @required BuildContext context, @required GqlUserLoginRequestEntity variables, &#125;) async &#123; QueryResult response = await GraphqlClientUtil.mutate( context: context, schema: GQL_USER_LOGIN, variables: variables.toJson()); return GqlUserLoginResponseEntity.fromJson(response.data[\"login\"]); &#125; /// 注册 static Future&lt;GqlUserRegisterResponseEntity&gt; register(&#123; @required BuildContext context, @required GqlUserRegisterRequestEntity variables, &#125;) async &#123; QueryResult response = await GraphqlClientUtil.mutate( context: context, schema: GQL_USER_REGISTER, variables: variables.toJson()); return GqlUserRegisterResponseEntity.fromJson(response.data[\"register\"]); &#125;&#125; 资源设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 15 headless strapi 数据建模 graphql 条件查询排序","date":"2020-07-08T16:00:00.000Z","path":"2020/07/09/flutter-project/flutter-project-news-15-strapi-graphql-data-model/","text":"本节目标 portainer 容器管理工具 数据库设计过程 数据库设计目标、规范、习惯 graphql 条件查询、排序 flutter 代码实现 视频https://www.bilibili.com/video/BV1jD4y1S7Mu/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.15 strapi 运行环境网盘下载 网盘 链接:https://pan.baidu.com/s/13Ujy2hzXp8tSqxCx_4IhVQ密码:yu82 文件 名称 说明 strapi-docker-compose-00.zip 干净环境，已安装 graphql 插件 strapi-docker-compose-15.zip 15 课内容 运行 需要用 docker-compose 启动账号 admin密码 123456 12345# 启动docker-compose up -d --remove-orphans# 关闭docker-compose down 工具 https://www.portainer.io https://www.draw.io https://app.quicktype.io 正文安装 portainer https://www.portainer.io 12345docker run -d -p 9000:9000 \\ --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ --name portainer-local \\ portainer/portainer 设计数据模型 https://www.draw.io 标准数据库设计 ER 图 -&gt; 设计范式 -&gt; 数据库物理表 ER 范式 https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96 设计规范 表前缀 sys 系统、用户、权限dict 字典表bus_ 业务 设计数据 对象、属性、关系 创建 strapi 数据类型 创建外键表 新闻分类 创建外键表 新闻频道 创建业务表 新闻内容 创建链接外键 新闻内容、分类、频道 编写 graphql 查询 新闻 12345678910111213141516171819202122query News($category_code: String) &#123; busNews(where: &#123; dict_categories: &#123; code: $category_code &#125; &#125;) &#123; title dict_channel &#123; code title icon &#123; url &#125; &#125; dict_categories &#123; code title &#125; author url addtime thumbnail &#123; url &#125; &#125;&#125; 首页 123456789101112131415161718192021222324252627282930313233343536query pageIndex &#123; # 分类 dictCategories(sort: &quot;sortNum:desc&quot;) &#123; code title &#125; # 频道 dictChannels(sort: &quot;sortNum:desc&quot;) &#123; code title icon &#123; url &#125; &#125; # 热点 busNews(where: &#123; dict_categories: &#123; code: &quot;news_hot&quot; &#125; &#125;) &#123; title dict_channel &#123; code title icon &#123; url &#125; &#125; dict_categories &#123; code title &#125; author url addtime thumbnail &#123; url &#125; &#125;&#125; 编写 flutter 代码 实例 entity lib/common/entitys/gql_news.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// 首页class GqlIndexResponseEntity &#123; GqlIndexResponseEntity(&#123; this.dictCategories, this.dictChannels, this.busNews, &#125;); List&lt;DictCategoryEntity&gt; dictCategories; List&lt;DictChannelEntity&gt; dictChannels; List&lt;GqlNewsResponseEntity&gt; busNews; factory GqlIndexResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlIndexResponseEntity( dictCategories: List&lt;DictCategoryEntity&gt;.from( json[\"dictCategories\"].map((x) =&gt; DictCategoryEntity.fromJson(x))), dictChannels: List&lt;DictChannelEntity&gt;.from( json[\"dictChannels\"].map((x) =&gt; DictChannelEntity.fromJson(x))), busNews: List&lt;GqlNewsResponseEntity&gt;.from( json[\"busNews\"].map((x) =&gt; GqlNewsResponseEntity.fromJson(x))), ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"dictCategories\": List&lt;dynamic&gt;.from(dictCategories.map((x) =&gt; x.toJson())), \"dictChannels\": List&lt;dynamic&gt;.from(dictChannels.map((x) =&gt; x.toJson())), \"busNews\": List&lt;dynamic&gt;.from(busNews.map((x) =&gt; x.toJson())), &#125;;&#125;// 新闻class GqlNewsResponseEntity &#123; GqlNewsResponseEntity(&#123; this.title, this.dictChannel, this.dictCategories, this.author, this.url, this.addtime, this.thumbnail, &#125;); String title; DictChannelEntity dictChannel; List&lt;DictCategoryEntity&gt; dictCategories; String author; String url; DateTime addtime; ThumbnailEntity thumbnail; factory GqlNewsResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlNewsResponseEntity( title: json[\"title\"], dictChannel: DictChannelEntity.fromJson(json[\"dict_channel\"]), dictCategories: List&lt;DictCategoryEntity&gt;.from( json[\"dict_categories\"].map((x) =&gt; DictCategoryEntity.fromJson(x))), author: json[\"author\"], url: json[\"url\"], addtime: DateTime.parse(json[\"addtime\"]), thumbnail: ThumbnailEntity.fromJson(json[\"thumbnail\"]), ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"title\": title, \"dict_channel\": dictChannel.toJson(), \"dict_categories\": List&lt;dynamic&gt;.from(dictCategories.map((x) =&gt; x.toJson())), \"author\": author, \"url\": url, \"addtime\": \"$&#123;addtime.year.toString().padLeft(4, '0')&#125;-$&#123;addtime.month.toString().padLeft(2, '0')&#125;-$&#123;addtime.day.toString().padLeft(2, '0')&#125;\", \"ThumbnailEntity\": thumbnail.toJson(), &#125;;&#125;// 分类class DictCategoryEntity &#123; DictCategoryEntity(&#123; this.code, this.title, &#125;); String code; String title; factory DictCategoryEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; DictCategoryEntity( code: json[\"code\"], title: json[\"title\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"code\": code, \"title\": title, &#125;;&#125;// 频道class DictChannelEntity &#123; DictChannelEntity(&#123; this.code, this.title, this.icon, &#125;); String code; String title; ThumbnailEntity icon; factory DictChannelEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; DictChannelEntity( code: json[\"code\"], title: json[\"title\"], icon: ThumbnailEntity.fromJson(json[\"icon\"]), ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"code\": code, \"title\": title, \"icon\": icon.toJson(), &#125;;&#125;// 图class ThumbnailEntity &#123; ThumbnailEntity(&#123; this.url, &#125;); String url; factory ThumbnailEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; ThumbnailEntity( url: json[\"url\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"url\": url, &#125;;&#125; api lib/common/apis/gql_news.dart 123456789101112131415161718192021222324252627/// 新闻class GqlNewsAPI &#123; /// 首页 static Future&lt;GqlIndexResponseEntity&gt; indexPageInfo(&#123; @required BuildContext context, Map&lt;String, dynamic&gt; params, &#125;) async &#123; QueryResult response = await GraphqlClientUtil.query(context: context, schema: GQL_INDEX_PAGE); return GqlIndexResponseEntity.fromJson(response.data); &#125; /// 翻页 static Future&lt;List&lt;GqlNewsResponseEntity&gt;&gt; newsPageList(&#123; @required BuildContext context, Map&lt;String, dynamic&gt; params, &#125;) async &#123; QueryResult response = await GraphqlClientUtil.query( context: context, schema: GQL_NEWS_LIST, variables: params); return response.data['busNews'] .map&lt;GqlNewsResponseEntity&gt;( (item) =&gt; GqlNewsResponseEntity.fromJson(item)) .toList(); &#125;&#125; 界面业务代码 lib/pages/main/main.dart 123456789101112131415161718192021222324252627GqlIndexResponseEntity _indexPageData; // 首页数据// 读取所有数据_loadAllData() async &#123; _indexPageData = await GqlNewsAPI.indexPageInfo(context: context); ... if (mounted) &#123; setState(() &#123;&#125;); &#125;&#125;// 拉取推荐、新闻_loadNewsData( categoryCode, &#123; bool refresh = false,&#125;) async &#123; _selCategoryCode = categoryCode; _newsPageList = await GqlNewsAPI.newsPageList( context: context, params: &#123;\"category_code\": categoryCode&#125;); if (mounted) &#123; setState(() &#123;&#125;); &#125;&#125;... 详见 git 资源设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 14 headless strapi + graphql 快速构建新闻后台","date":"2020-07-02T16:00:00.000Z","path":"2020/07/03/flutter-project/flutter-project-news-14-headless-strapi-graphql/","text":"本节目标 strapi + graphql 插件 + docker 安装 strapi 管理数据结构、内容 flutter + graphql 插件 实现查询 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.14 正文后台开发步骤 采用 strapi + nodejs + 网关 的方案 1. strapi 安装1.1 docker-compose 方式安装 .env 1PASSWORD=123456 docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152version: \"3\"services: mongo: image: mongo container_name: mongo restart: always ports: - 27017:27017 environment: - TZ=Asia/Shanghai - MONGO_INITDB_ROOT_USERNAME=root - MONGO_INITDB_ROOT_PASSWORD=$&#123;PASSWORD&#125; volumes: - ./docker-data/mongo:/data/db networks: docker_net: ipv4_address: 172.22.0.11 # starpi # admin / 123456 / admin@ducafecat.tech strapi-app: image: strapi/strapi container_name: strapi-app restart: always ports: - 1337:1337 # command: strapi build # command: strapi start environment: - TZ=Asia/Shanghai - DATABASE_CLIENT=mongo - DATABASE_HOST=mongo - DATABASE_PORT=27017 - DATABASE_NAME=strapi - DATABASE_USERNAME=root - DATABASE_PASSWORD=$&#123;PASSWORD&#125; - DATABASE_AUTHENTICATION_DATABASE=strapi # - NODE_ENV=production depends_on: - mongo volumes: - ./docker-data/strapi-app:/srv/app networks: docker_net: ipv4_address: 172.22.0.12networks: docker_net: driver: bridge ipam: config: - subnet: 172.22.0.0/16 http://localhost:1337/admin 1.2 安装 graphql 插件 2. 构建新闻数据结构2.1 创建数据类型 添加类型 添加字段 字段列表 2.2 调整数据编辑界面 2.3 调整数据列表界面 2.4 维护数据 列表 添加 3. 调试 graphql 请求3.3 graphql 语法 类型 query 查询 mutate 操作 3.4 调试新闻列表http://localhost:1337/graphql 4. 编写 flutter 代码4.1 加入 graphql 插件https://pub.flutter-io.cn/packages/graphql pubspec.yaml 123dependencies: # graphql graphql: ^3.0.2 4.2 封装 graphql client 工具类 lib/common/utils/graphql_client.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';import 'package:graphql/client.dart';class GraphqlClientUtil &#123; static OptimisticCache cache = OptimisticCache( dataIdFromObject: typenameDataIdFromObject, ); static client() &#123; HttpLink _httpLink = HttpLink( uri: '$SERVER_STRAPI_GRAPHQL_URL/graphql', ); // final AuthLink _authLink = AuthLink( // getToken: () =&gt; // 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVlZmMzNDdhYzgzOTVjMDAwY2ViYzE5NyIsImlhdCI6MTU5MzY1NDcwNiwiZXhwIjoxNTk2MjQ2NzA2fQ.RYDmNSDJxcZLLPHAf4u59IER7Bs5VoWfBo1_t-TR5yY', // ); // final Link _link = _authLink.concat(_httpLink); return GraphQLClient( cache: cache, link: _httpLink, ); &#125; // 查询 static Future query(&#123; @required BuildContext context, @required String schema, Map&lt;String, dynamic&gt; variables, &#125;) async &#123; QueryOptions options = QueryOptions( documentNode: gql(schema), variables: variables, ); QueryResult result = await client().query(options); if (result.hasException) &#123; toastInfo(msg: result.exception.toString()); throw result.exception; &#125; return result; &#125; // 操作 static Future mutate(&#123; @required BuildContext context, @required String schema, Map&lt;String, dynamic&gt; variables, &#125;) async &#123; QueryOptions options = QueryOptions( documentNode: gql(schema), variables: variables, ); QueryResult result = await client().mutate(options); if (result.hasException) &#123; toastInfo(msg: result.exception.toString()); throw result.exception; &#125; return result; &#125;&#125; 4.3 编写 graphql 查询请求 lib/common/graphql/news_content.dart 1234567891011121314const String GQL_NEWS_LIST = r''' query News &#123; newsContents &#123; title category author url addtime thumbnail &#123; url &#125; &#125; &#125;'''; 4.4 编写数据实体lib/common/entitys/gql_news.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class GqlNewsResponseEntity &#123; GqlNewsResponseEntity(&#123; this.id, this.title, this.category, this.author, this.url, this.addtime, this.thumbnail, &#125;); String id; String title; String category; String author; String url; DateTime addtime; Thumbnail thumbnail; factory GqlNewsResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; GqlNewsResponseEntity( id: json[\"id\"], title: json[\"title\"], category: json[\"category\"], author: json[\"author\"], url: json[\"url\"], addtime: DateTime.parse(json[\"addtime\"]), thumbnail: Thumbnail.fromJson(json[\"thumbnail\"]), ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"id\": id, \"title\": title, \"category\": category, \"author\": author, \"url\": url, \"addtime\": \"$&#123;addtime.year.toString().padLeft(4, '0')&#125;-$&#123;addtime.month.toString().padLeft(2, '0')&#125;-$&#123;addtime.day.toString().padLeft(2, '0')&#125;\", \"thumbnail\": thumbnail.toJson(), &#125;;&#125;class Thumbnail &#123; Thumbnail(&#123; this.url, &#125;); String url; factory Thumbnail.fromJson(Map&lt;String, dynamic&gt; json) =&gt; Thumbnail( url: json[\"url\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"url\": url, &#125;;&#125; 4.5 编写 API 访问 lib/common/apis/gql_news.dart 12345678910111213141516171819202122import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/graphql/graphql.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:graphql/client.dart';/// 新闻class GqlNewsAPI &#123; /// 翻页 static Future&lt;List&lt;GqlNewsResponseEntity&gt;&gt; newsPageList(&#123; @required BuildContext context, Map&lt;String, dynamic&gt; params, &#125;) async &#123; QueryResult response = await GraphqlClientUtil.query(context: context, schema: GQL_NEWS_LIST); return response.data['newsContents'] .map&lt;GqlNewsResponseEntity&gt;( (item) =&gt; GqlNewsResponseEntity.fromJson(item)) .toList(); &#125;&#125; 4.6 修改新闻列表页 lib/pages/main/main.dartimport 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/apis/apis.dart';import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';import 'package:flutter_ducafecat_news/pages/main/ad_widget.dart';import 'package:flutter_ducafecat_news/pages/main/categories_widget.dart';import 'package:flutter_ducafecat_news/pages/main/channels_widget.dart';import 'package:flutter_ducafecat_news/pages/main/news_item_widget.dart';import 'package:flutter_ducafecat_news/pages/main/newsletter_widget.dart';import 'package:flutter_ducafecat_news/pages/main/recommend_widget.dart';import 'package:flutter_easyrefresh/easy_refresh.dart';class MainPage extends StatefulWidget &#123; MainPage(&#123;Key key&#125;) : super(key: key); @override _MainPageState createState() =&gt; _MainPageState();&#125;class _MainPageState extends State&lt;MainPage&gt; &#123; EasyRefreshController _controller; // EasyRefresh控制器 // NewsPageListResponseEntity _newsPageList; // 新闻翻页 List&lt;GqlNewsResponseEntity&gt; _newsPageList; // 新闻翻页 NewsItem _newsRecommend; // 新闻推荐 List&lt;CategoryResponseEntity&gt; _categories; // 分类 List&lt;ChannelResponseEntity&gt; _channels; // 频道 String _selCategoryCode; // 选中的分类Code @override void initState() &#123; super.initState(); _controller = EasyRefreshController(); _loadAllData(); _loadLatestWithDiskCache(); &#125; // 如果有磁盘缓存，延迟3秒拉取更新档案 _loadLatestWithDiskCache() &#123; if (CACHE_ENABLE == true) &#123; var cacheData = StorageUtil().getJSON(STORAGE_INDEX_NEWS_CACHE_KEY); if (cacheData != null) &#123; Timer(Duration(seconds: 3), () &#123; _controller.callRefresh(); &#125;); &#125; &#125; &#125; // 读取所有数据 _loadAllData() async &#123; _categories = await NewsAPI.categories( context: context, cacheDisk: true, ); _channels = await NewsAPI.channels( context: context, cacheDisk: true, ); // _newsRecommend = await NewsAPI.newsRecommend( // context: context, // cacheDisk: true, // ); // _newsPageList = await NewsAPI.newsPageList( // context: context, // cacheDisk: true, // ); _newsPageList = await GqlNewsAPI.newsPageList( context: context, ); _selCategoryCode = _categories.first.code; if (mounted) &#123; setState(() &#123;&#125;); &#125; &#125; // 拉取推荐、新闻 _loadNewsData( categoryCode, &#123; bool refresh = false, &#125;) async &#123; _selCategoryCode = categoryCode; _newsRecommend = await NewsAPI.newsRecommend( context: context, params: NewsRecommendRequestEntity(categoryCode: categoryCode), refresh: refresh, cacheDisk: true, ); // _newsPageList = await NewsAPI.newsPageList( // context: context, // params: NewsPageListRequestEntity(categoryCode: categoryCode), // refresh: refresh, // cacheDisk: true, // ); _newsPageList = await GqlNewsAPI.newsPageList( context: context, ); if (mounted) &#123; setState(() &#123;&#125;); &#125; &#125; // 分类菜单 Widget _buildCategories() &#123; return _categories == null ? Container() : newsCategoriesWidget( categories: _categories, selCategoryCode: _selCategoryCode, onTap: (CategoryResponseEntity item) &#123; _loadNewsData(item.code); &#125;, ); &#125; // 推荐阅读 Widget _buildRecommend() &#123; return _newsRecommend == null // 数据没到位，可以用骨架图展示 ? Container() : recommendWidget(_newsRecommend); &#125; // 频道 Widget _buildChannels() &#123; return _channels == null ? Container() : newsChannelsWidget( channels: _channels, onTap: (ChannelResponseEntity item) &#123;&#125;, ); &#125; // 新闻列表 Widget _buildNewsList() &#123; return _newsPageList == null ? Container( height: duSetHeight(161 * 5 + 100.0), ) : Column( children: _newsPageList.map((item) &#123; // 新闻行 List&lt;Widget&gt; widgets = &lt;Widget&gt;[ newsItem(item), Divider(height: 1), ]; // 每 5 条 显示广告 int index = _newsPageList.indexOf(item); if (((index + 1) % 5) == 0) &#123; widgets.addAll(&lt;Widget&gt;[ adWidget(), Divider(height: 1), ]); &#125; // 返回 return Column( children: widgets, ); &#125;).toList(), ); &#125; // ad 广告条 // 邮件订阅 Widget _buildEmailSubscribe() &#123; return newsletterWidget(); &#125; @override Widget build(BuildContext context) &#123; return _newsPageList == null ? cardListSkeleton() : EasyRefresh( enableControlFinishRefresh: true, controller: _controller, header: ClassicalHeader(), onRefresh: () async &#123; await _loadNewsData( _selCategoryCode, refresh: true, ); _controller.finishRefresh(); &#125;, child: SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildCategories(), Divider(height: 1), _buildRecommend(), Divider(height: 1), _buildChannels(), Divider(height: 1), _buildNewsList(), Divider(height: 1), _buildEmailSubscribe(), ], ), ), ); &#125;&#125; 4.7 修改新闻详情页 lib/pages/main/news_item_widget.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141import 'package:auto_route/auto_route.dart';import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';import 'package:flutter_ducafecat_news/common/router/router.gr.dart';/// 新闻行 ItemWidget newsItem(GqlNewsResponseEntity item) &#123; return Container( height: duSetHeight(161), padding: EdgeInsets.all(duSetWidth(20)), child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 图 InkWell( onTap: () &#123; ExtendedNavigator.rootNavigator.pushNamed( Routes.detailsPageRoute, arguments: DetailsPageArguments(item: item), ); &#125;, child: imageCached( '$SERVER_STRAPI_GRAPHQL_URL$&#123;item.thumbnail.url&#125;', width: duSetWidth(121), height: duSetWidth(121), ), ), // 右侧 SizedBox( width: duSetWidth(194), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 作者 Container( margin: EdgeInsets.all(0), child: Text( item.author, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), ), ), // 标题 InkWell( onTap: () &#123; ExtendedNavigator.rootNavigator.pushNamed( Routes.detailsPageRoute, arguments: DetailsPageArguments(item: item), ); &#125;, child: Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Text( item.title, style: TextStyle( fontFamily: 'Montserrat', fontWeight: FontWeight.w500, color: AppColors.primaryText, fontSize: duSetFontSize(16), height: 1, ), overflow: TextOverflow.clip, maxLines: 3, ), ), ), // Spacer Spacer(), // 一行 3 列 Container( child: Row( crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ // 分类 ConstrainedBox( constraints: BoxConstraints( maxWidth: duSetWidth(60), ), child: Text( item.category, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.secondaryElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 添加时间 Container( width: duSetWidth(15), ), ConstrainedBox( constraints: BoxConstraints( maxWidth: duSetWidth(100), ), child: Text( '• $&#123;duTimeLineFormat(item.addtime)&#125;', style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 更多 Spacer(), InkWell( child: Icon( Icons.more_horiz, color: AppColors.primaryText, size: 24, ), onTap: () &#123;&#125;, ), ], ), ), ], ), ), ], ), );&#125; 资源设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 参考 https://pub.flutter-io.cn/packages/graphql https://strapi.io/documentation/v3.x/getting-started/quick-start.html © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 13 使用 supernova、imgcook 导入 sketch psd xd 自动生成用户中心代码","date":"2020-06-17T16:00:00.000Z","path":"2020/06/18/flutter-project/flutter-project-news-13-code-generate-supernova/","text":"本节目标 了解 supernova 代码生成器作用 导入 xd 设计稿 如何高效使用生成代码 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.13 正文代码生成器 supernova imgcook 有潜力加入代码生成功能 lanhuapp mockplus supernova 代码生成器https://supernova.io/ 导入 xd 设计稿，生成代码 商业设计稿不好直接分享, 可以加微信联系 ducafecat 编写用户中心界面代码组织代码结构123456789101112131415161718192021class _AccountPageState extends State&lt;AccountPage&gt; &#123; // 个人页面 头部 Widget _buildUserHeader() &#123;&#125; // 列表项 Widget _buildCell() &#123;&#125; @override Widget build(BuildContext context) &#123; final appState = Provider.of&lt;AppState&gt;(context); return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildUserHeader(), _buildCell(), ], ), ); &#125;&#125; 直接使用生成的代码 个人页面 头部 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133Widget _buildUserHeader() &#123; return Container( height: 333, child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, right: 0, child: Container( height: 333, decoration: BoxDecoration( color: AppColors.primaryBackground, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: 2, decoration: BoxDecoration( color: AppColors.primaryElement, ), child: Container(), ), ], ), ), ), Positioned( left: 20, top: 40, right: 20, bottom: 21, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: 198, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Align( alignment: Alignment.topCenter, child: Container( width: 108, height: 108, child: Stack( alignment: Alignment.center, children: [ Positioned( top: 0, child: Container( width: 108, height: 108, decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: Radii.k54pxRadius, ), child: Container(), ), ), Positioned( top: 10, child: Image.asset( \"assets/images/image.png\", fit: BoxFit.none, ), ), ], ), ), ), Spacer(), Container( margin: EdgeInsets.only(bottom: 9), child: Text( \"Cameron Rogers\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 24, ), ), ), Text( \"@boltrogers\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: 16, ), ), ], ), ), Spacer(), Container( height: 44, child: FlatButton( onPressed: () =&gt; this.onButtonPressed(context), color: Color.fromARGB(255, 41, 103, 255), shape: RoundedRectangleBorder( borderRadius: BorderRadius.all(Radius.circular(6)), ), textColor: Color.fromARGB(255, 255, 255, 255), padding: EdgeInsets.all(0), child: Text( \"Get Premium - \\$9.99\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.secondaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), ), ], ), ), ], ), );&#125; 列表项 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990Widget _buildCell() &#123; return Container( height: 60, child: Stack( alignment: Alignment.centerLeft, children: [ Positioned( left: 0, right: 0, child: Container( height: 60, decoration: BoxDecoration( color: AppColors.secondaryElement, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: 1, decoration: BoxDecoration( color: AppColors.primaryElement, ), child: Container(), ), ], ), ), ), Positioned( right: 0, child: Row( mainAxisAlignment: MainAxisAlignment.end, children: [ Container( margin: EdgeInsets.only(right: 11), child: Text( \"12\", textAlign: TextAlign.right, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), Container( width: 24, height: 24, margin: EdgeInsets.only(right: 20), child: Image.asset( \"assets/images/icon.png\", fit: BoxFit.none, ), ), ], ), ), Positioned( left: 0, child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, right: 19, child: Container(), ), Positioned( left: 20, right: 0, child: Text( \"Favorite channels\", textAlign: TextAlign.left, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), ], ), ), ], ), );&#125; 抽取代码 lib/common/widgets/app.dart123456789/// 10像素 DividerWidget divider10Px(&#123;Color bgColor = AppColors.secondaryElement&#125;) &#123; return Container( height: duSetWidth(10), decoration: BoxDecoration( color: bgColor, ), );&#125; 修改代码 _buildUserHeader123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141// 个人页面 头部Widget _buildUserHeader() &#123; return Container( height: duSetWidth(333), child: Stack( alignment: Alignment.center, children: [ // 背景 Positioned( left: 0, right: 0, child: Container( height: duSetWidth(333), decoration: BoxDecoration( color: AppColors.primaryBackground, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: duSetWidth(2), decoration: BoxDecoration( color: AppColors.tabCellSeparator, ), child: Container(), ), ], ), ), ), Positioned( left: 20, top: 40, right: 20, bottom: 21, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ // 头像 Container( height: duSetWidth(198), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Align( alignment: Alignment.topCenter, child: Container( width: duSetWidth(108), height: duSetWidth(108), child: Stack( alignment: Alignment.center, children: [ Positioned( top: 0, child: Container( width: duSetWidth(108), height: duSetWidth(108), decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: BorderRadius.all( Radius.circular(duSetWidth(108) / 2)), ), child: Container(), ), ), Positioned( top: 10, child: Image.asset( \"assets/images/account_header.png\", height: duSetWidth(88), width: duSetWidth(88), fit: BoxFit.fill, ), ), ], ), ), ), // 文字 Spacer(), Container( margin: EdgeInsets.only(bottom: 9), child: Text( Global.profile.displayName, textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 24, ), ), ), Text( \"@boltrogers\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: 16, ), ), ], ), ), // 按钮 Spacer(), Container( height: 44, child: FlatButton( onPressed: () =&gt; &#123;&#125;, color: Color.fromARGB(255, 41, 103, 255), shape: RoundedRectangleBorder( borderRadius: BorderRadius.all(Radius.circular(6)), ), textColor: Color.fromARGB(255, 255, 255, 255), padding: EdgeInsets.all(0), child: Text( \"Get Premium - \\$9.99\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryElementText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), ), ], ), ), ], ), );&#125; 修改代码 _buildCell123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117// 列表项Widget _buildCell(&#123; String title, String subTitle, int number, bool hasArrow = false, VoidCallback onTap,&#125;) &#123; return GestureDetector( onTap: onTap, child: Container( height: duSetWidth(60), color: Colors.white, child: Stack( alignment: Alignment.centerLeft, children: [ // 背景 Positioned( left: 0, right: 0, child: Container( height: duSetWidth(60), decoration: BoxDecoration( color: AppColors.primaryBackground, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: duSetWidth(1), decoration: BoxDecoration( color: AppColors.tabCellSeparator, ), child: Container(), ), ], ), ), ), // 右侧 Positioned( right: 0, child: Row( mainAxisAlignment: MainAxisAlignment.end, children: [ // 数字 number == null ? Container() : Container( margin: EdgeInsets.only(right: 11), child: Text( number.toString(), textAlign: TextAlign.right, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), ), ), // 箭头 hasArrow == false ? Container() : Container( width: duSetWidth(24), height: duSetWidth(24), margin: EdgeInsets.only(right: 20), child: Icon( Icons.arrow_forward_ios, color: AppColors.primaryText, ), ), ], ), ), // 标题 title == null ? Container() : Positioned( left: 20, child: Text( title, textAlign: TextAlign.left, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), ), ), // 子标题 subTitle == null ? Container() : Positioned( right: 20, child: Text( subTitle, textAlign: TextAlign.left, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), ), ), ], ), ), );&#125; 修改代码 build12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455@overrideWidget build(BuildContext context) &#123; final appState = Provider.of&lt;AppState&gt;(context); return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildUserHeader(), divider10Px(), _buildCell( title: \"Email\", subTitle: \"boltrogers@gmail.com\", ), divider10Px(), _buildCell( title: \"Favorite channels\", number: 12, hasArrow: true, ), _buildCell( title: \"Bookmarks\", number: 294, hasArrow: true, ), _buildCell( title: \"Popular categories\", number: 7, hasArrow: true, ), divider10Px(), _buildCell( title: \"Newsletter\", hasArrow: true, ), _buildCell( title: \"Settings\", hasArrow: true, ), divider10Px(), _buildCell( title: \"Switch Gray Filter\", hasArrow: true, onTap: () =&gt; appState.switchGrayFilter(), ), _buildCell( title: \"Log out\", hasArrow: true, onTap: () =&gt; goLoginPage(context), ), divider10Px(), ], ), );&#125; 技巧 vscode 固定代码 总结 资源设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 12 采用 sentry 平台收集错误","date":"2020-06-04T16:00:00.000Z","path":"2020/06/05/flutter-project/flutter-project-news-12-error-sentry/","text":"本节目标 使用 sentry 平台 flutter 集成 android 集成 ios 集成 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.12 正文错误收集策略 sentry 平台https://sentry.io 收集 flutter 参考 https://docs.sentry.io/platforms/flutter/ pubspec.yaml 12dependencies: sentry: ^3.0.1 lib/main.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// 创建 SentryClient 用于将异常日志上报给 sentry 平台final SentryClient _sentry = new SentryClient( dsn: 'https://xxxxxxxxxx',);// 是否开发环境bool get isInDebugMode &#123; return false; // false 开始上传 sentry&#125;// 上报异常的函数Future&lt;void&gt; _reportError(dynamic error, dynamic stackTrace) async &#123; print('Caught error: $error'); if (isInDebugMode) &#123; print(stackTrace); &#125; else &#123; final SentryResponse response = await _sentry.captureException( exception: error, stackTrace: stackTrace, ); if (response.isSuccessful) &#123; print('Success! Event ID: $&#123;response.eventId&#125;'); &#125; else &#123; print('Failed to report to Sentry.io: $&#123;response.error&#125;'); &#125; &#125;&#125;Future&lt;Null&gt; main() async &#123; // 捕获并上报 Flutter 异常 FlutterError.onError = (FlutterErrorDetails details) async &#123; if (isInDebugMode == true) &#123; FlutterError.dumpErrorToConsole(details); &#125; else &#123; Zone.current.handleUncaughtError(details.exception, details.stack); &#125; &#125;; // 捕获并上报 Dart 异常 runZonedGuarded(() async &#123; await Global.init(); runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;.value( value: Global.appState, ), ], child: Consumer&lt;AppState&gt;(builder: (context, appState, _) &#123; if (appState.isGrayFilter) &#123; return ColorFiltered( colorFilter: ColorFilter.mode(Colors.white, BlendMode.color), child: NewsApp(), ); &#125; else &#123; return NewsApp(); &#125; &#125;), ), ); &#125;, (Object error, StackTrace stack) &#123; _reportError(error, stack); &#125;);&#125; 收集 android 参考 https://docs.sentry.io/platforms/android/ 集成 sdk 123456789101112131415161718// ADD JCENTER REPOSITORYrepositories &#123; jcenter()&#125;// ADD COMPATIBILITY OPTIONS TO BE COMPATIBLE WITH JAVA 1.8android &#123; compileOptions &#123; sourceCompatibility = JavaVersion.VERSION_1_8 targetCompatibility = JavaVersion.VERSION_1_8 &#125;&#125;// ADD SENTRY ANDROID AS A DEPENDENCYdependencies &#123; // https://github.com/getsentry/sentry-android/releases implementation &apos;io.sentry:sentry-android:&#123;version&#125;&apos;&#125; android/app/src/main/AndroidManifest.xml 12345678910&lt;application android:name=\"io.flutter.app.FlutterApplication\" android:label=\"猫哥新闻\" android:icon=\"@mipmap/launcher_icon\"&gt; ... &lt;!-- sentry --&gt; &lt;meta-data android:name=\"io.sentry.dsn\" android:value=\"xxxxxxxxxxxxxxxxx\" /&gt;&lt;/application&gt; android/app/src/main/kotlin/com/example/flutterducafecatnews/CrashHandler.java 1234567public class CrashHandler implements UncaughtExceptionHandler &#123; @Override public void uncaughtException(Thread t, Throwable e) &#123; Sentry.captureException(e); &#125;&#125; android/app/src/main/kotlin/com/example/flutterducafecatnews/MainActivity.kt 123456789import io.sentry.core.Sentryclass MainActivity: FlutterActivity() &#123; override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) &#123; val crashHandler = CrashHandler() Thread.setDefaultUncaughtExceptionHandler(crashHandler) GeneratedPluginRegistrant.registerWith(flutterEngine) &#125;&#125; 收集 ios 资料 https://docs.sentry.io/platforms/cocoa/?_ga=2.17974013.534595501.1591172359-228174411.1591172359&amp;_gac=1.12380800.1591172359.EAIaIQobChMIrICd9Jrl6QIVCj5gCh2zFw8lEAAYASAAEgJwyfD_BwE&amp;platform=javascript 集成 CocoaPods 123456platform :ios, &apos;8.0&apos;use_frameworks! # This is importanttarget &apos;YourApp&apos; do pod &apos;Sentry&apos;, :git =&gt; &apos;https://github.com/getsentry/sentry-cocoa.git&apos;, :tag =&gt; &apos;5.1.2&apos;end ios/Runner/AppDelegate.swift 123456789101112131415161718&#123; SentrySDK.start(options: [ \"dsn\": \"https://xxxxxxxxxxxxxxxxxxx\", \"debug\": true, // Enabled debug when first installing is always helpful \"enableAutoSessionTracking\": true ]) NSSetUncaughtExceptionHandler &#123; exception in print(exception) SentrySDK.capture(message: exception.description) SentrySDK.capture(exception: exception) &#125; GeneratedPluginRegistrant.register(with: self) return super.application(application, didFinishLaunchingWithOptions: launchOptions) &#125; 资源参考 https://docs.sentry.io/platforms/flutter/ https://docs.sentry.io/platforms/android/ https://docs.sentry.io/platforms/cocoa/?_ga=2.17974013.534595501.1591172359-228174411.1591172359&amp;_gac=1.12380800.1591172359.EAIaIQobChMIrICd9Jrl6QIVCj5gCh2zFw8lEAAYASAAEgJwyfD_BwE&amp;platform=javascript 设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Docker - 02 前端全栈 windows 从零安装 vmware + centos + docker + yapi","date":"2020-05-28T16:00:00.000Z","path":"2020/05/29/docker/docker-02-windows-vmware-centos-setup/","text":"本节目标 前端全栈主力操作系统选哪个 ? windows 下使用 docker 为什么不行 ? VMWare 安装 centos 远程 centos 系统 centos 配置 docker 环境 视频https://youtu.be/NJIwbs8qmDY 正文1. 主力操作系统分析从前端全栈角度考虑 windows macos ubuntu nodejs、java、go、python ok ok ok vue、react、electron、rn ok ok ok 小程序 ok ok ok ios ok android ok ok ok 办公 office wps ps 微信 QQ XD VSCode ok ok ok macos 专属 safri sketch ok 程序编译、文件名大小写严格 ok ok 2. windows 直接用 docker 存在的问题问题： https://docs.docker.com/get-started/overview/https://docs.docker.com/get-started/https://docs.microsoft.com/en-us/windows/wsl/about 容器架构不同 切到 linux 容器架构，频繁遇到存储驱动兼容问题 WSL 2 的路还很长 总结 开发环境与线上环境不一致，引发不必要的联调成本。 3. windows 下 vmware 安装 centos3.1 下载 centos 7http://isoredirect.centos.org/centos/7/isos/x86_64/ 3.2 安装 centos 7操作见视频 3.3 配置 centos 网卡操作见视频 指令记录 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 修改配置$ cd /etc/sysconfig/network-scripts$ ll$ vi ifcfg-eth0ONBOOT=yes# vi 文件编辑# cd 进入目录# ll 目录列表------------------------------# 重启网卡$ service network restart# service 管理系统服务------------------------------# 安装工具$ yum install -y net-tools# yum 软件包管理------------------------------# 查看ip$ ifconfig------------------------------# 固定ip、dns$ vi ifcfg-eth0BOOTPROTO=staticIPADDR=10.211.55.5NETMASK=255.255.255.0GATEWAY=10.211.55.1DNS1=223.5.5.5DNS2=223.6.6.6------------------------------# 重启服务、查看dns$ service network restart$ cat /etc/resolv.conf 3.4 远程 ssh 工具 finalshellhttp://www.hostbuf.com xshell、sftphttps://www.netsarang.com/zh/xshell/ puttyhttps://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html cmderhttp://cmder.net/ 3.6 安装 docker卸载旧版12345678$ sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine sudo root 用户可以不用 原生安装1234567891011121314151617181920212223242526272829# 系统工具$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 加仓库$ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo# 安装 docker ce cli$ sudo yum install -y docker-ce docker-ce-cli containerd.io# 启动服务$ sudo systemctl start docker# 开机启动$ sudo systemctl enable docker# 安装 docker-compose$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose# 阿里云加速$ sudo mkdir -p /etc/docker$ sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123; \"registry-mirrors\": [\"https://8stycbeq.mirror.aliyuncs.com\"]&#125;EOF$ sudo systemctl daemon-reload$ sudo systemctl restart docker 4. 运行 yapi4.1 docker-compose 配置这次修改了数据持久化在指定目录 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253version: \"3\"services: mongo-yapi: image: mongo container_name: mongo-ypai restart: always # ports: # - 27017:27017 environment: - TZ=Asia/Shanghai - MONGO_INITDB_DATABASE=yapi # - MONGO_INITDB_ROOT_USERNAME=root # - MONGO_INITDB_ROOT_PASSWORD=$&#123;PASSWORD&#125; volumes: - ./docker-data/mongo-yapi:/data/db networks: docker_net: ipv4_address: 172.22.0.11 # https://github.com/fjc0k/docker-YApi web-yapi: image: jayfong/yapi:latest container_name: web-ypai restart: always ports: - 3000:3000 depends_on: - mongo-yapi links: - mongo-yapi environment: - TZ=Asia/Shanghai - YAPI_ADMIN_ACCOUNT=admin@ducafecat.tech - YAPI_ADMIN_PASSWORD=$&#123;PASSWORD&#125; - YAPI_CLOSE_REGISTER=true - YAPI_DB_SERVERNAME=mongo-yapi - YAPI_DB_PORT=27017 - YAPI_DB_DATABASE=yapi # - YAPI_DB_USER=root # - YAPI_DB_PASS=$&#123;PASSWORD&#125; - YAPI_MAIL_ENABLE=false - YAPI_LDAP_LOGIN_ENABLE=false - YAPI_PLUGINS=[] networks: docker_net: ipv4_address: 172.22.0.12networks: docker_net: driver: bridge ipam: config: - subnet: 172.22.0.0/16 4.2 运行 yapi12345# 启动$ docker-compose up -d# 卸载$ docker-compose down 4.3 修改本地解析C:\\Windows\\System32\\drivers\\etc\\hosts 1127.0.0.1 api.news.ducafecat.tech 问题整理VMware Workstation 与 Device/Credential Guard 不兼容。网上说卸载 Hyper-V， 没必要卸载 管理员方式运行 cmd 执行 1bcdedit /set hypervisorlaunchtype off 然后重启电脑 参考 install docker https://docs.docker.com/engine/install/centos/ install docker-compose https://github.com/docker/compose/releases 阿里镜像 https://cr.console.aliyun.com/cn-beijing/instances/mirrors © 猫哥 https://ducafecat.tech","tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.ducafecat.tech/tags/Docker/"}]},{"title":"Docker - 01 windows 下安装 docker 并运行 yapi 服务","date":"2020-05-20T16:00:00.000Z","path":"2020/05/21/docker/docker-01-install-yapi/","text":"本节目标 安装 docker 启动 yapi 备份、恢复 yapi 正文安装 Windows 10 专业工作站版 i tell you https://msdn.itellyou.cn/ 选用 business 镜像 安装 docker 官网 https://www.docker.com/ 启用 Hyper-V 切换 linunx container 阿里镜像加速 阿里镜像加速 https://cr.console.aliyun.com/cn-zhangjiakou/instances/mirrors 123456&#123; \"registry-mirrors\": [\"https://你的代码.mirror.aliyuncs.com\"], \"insecure-registries\": [], \"debug\": true, \"experimental\": true&#125; docker-compose 配置 yapi .env 1PASSWORD=$V7iTNk5N8#AkOeiwO@BywzBFte2^WsAuI$eJ4k9CKV0riqe docker-compose.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657version: \"3\"services: mongo-yapi: image: mongo container_name: mongo-ypai restart: always # ports: # - 27017:27017 environment: - TZ=Asia/Shanghai - MONGO_INITDB_DATABASE=yapi # - MONGO_INITDB_ROOT_USERNAME=root # - MONGO_INITDB_ROOT_PASSWORD=$&#123;PASSWORD&#125; volumes: # - ./docker-data/mongo-yapi:/data/db - mongo-data:/data/db networks: docker_net: ipv4_address: 172.22.0.11 # https://github.com/fjc0k/docker-YApi web-yapi: image: jayfong/yapi:latest container_name: web-ypai restart: always ports: - 3000:3000 depends_on: - mongo-yapi links: - mongo-yapi environment: - TZ=Asia/Shanghai - YAPI_ADMIN_ACCOUNT=admin@ducafecat.tech - YAPI_ADMIN_PASSWORD=$&#123;PASSWORD&#125; - YAPI_CLOSE_REGISTER=true - YAPI_DB_SERVERNAME=mongo-yapi - YAPI_DB_PORT=27017 - YAPI_DB_DATABASE=yapi # - YAPI_DB_USER=root # - YAPI_DB_PASS=$&#123;PASSWORD&#125; - YAPI_MAIL_ENABLE=false - YAPI_LDAP_LOGIN_ENABLE=false - YAPI_PLUGINS=[] networks: docker_net: ipv4_address: 172.22.0.12volumes: mongo-data:networks: docker_net: driver: bridge ipam: config: - subnet: 172.22.0.0/16 启动、卸载 ypai 服务 启动 1$ docker-compose up -d 卸载 1$ docker-compose down 本地域名解析 C:\\Windows\\System32\\drivers\\etc\\hosts 1127.0.0.1 api.news.ducafecat.tech 查询 volume12345$ docker volume lsDRIVER VOLUME NAMElocal 2fc91e2fd47a7110c2ecc5c8b88b997c4e6ddcf471a1df04f3fb618238ffd8aalocal 26e58cd678a97108f6dcd2cab33b9de341f992ceedacb7fd772c196bec908306local yapi-volumes_mongo-data 备份数据1$ docker run --rm --volumes-from mongo-ypai -v c:\\backup:/backup ubuntu tar cvf /backup/backup.tar -C /data/db . 还原数据1$ docker run --rm --volumes-from mongo-ypai -v c:\\backup:/backup ubuntu bash -c \"cd /data/db &amp;&amp; tar xvf /backup/backup.tar -C /data/db \" 资源参考 https://github.com/fjc0k/docker-YApi https://cr.console.aliyun.com/cn-zhangjiakou/instances/mirrors https://docs.docker.com/storage/volumes/#backup-restore-or-migrate-data-volumes 视频代码https://github.com/ducafecat/docker-yapi.git © 猫哥 https://ducafecat.tech","tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.ducafecat.tech/tags/Docker/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 11 APP升级、android动态授权","date":"2020-05-15T16:00:00.000Z","path":"2020/05/16/flutter-project/flutter-project-news-11-update-permission/","text":"本节目标 app 升级策略 android 动态授权 android 设备目录 ios 支持 swift 语言 快速提示框 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.11 正文ios 支持 swift 语言 出发点 社区第三方包都在用 swift 开发，打包的时候需要加入 swift 语言包。 操作 创建一个支持 swift 的新项目，然后把 lib assets pubspec.yaml 覆盖即可。 app 升级策略 代码实现定义接口 post /app/update 加入依赖包 pubspec.yaml 123456789101112131415161718dependencies: # 设备信息 device_info: ^0.4.2+3 # 包信息 package_info: ^0.4.0+18 # 路径查询 path_provider: ^1.6.8 # permission 权限 permission_handler: ^5.0.0+hotfix.6 # 安装 install_plugin: ^2.0.1 # 对话框 easy_dialog: ^1.0.5 升级工具类 lib/common/utils/update.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import 'dart:io';import 'package:dio/dio.dart';import 'package:easy_dialog/easy_dialog.dart';import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/apis/app.dart';import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/widgets/toast.dart';import 'package:flutter_ducafecat_news/global.dart';import 'package:install_plugin/install_plugin.dart';import 'package:path_provider/path_provider.dart';/// app 升级class AppUpdateUtil &#123; static AppUpdateUtil _instance = AppUpdateUtil._internal(); factory AppUpdateUtil() =&gt; _instance; BuildContext _context; AppUpdateResponseEntity _appUpdateInfo; AppUpdateUtil._internal(); /// 获取更新信息 Future run(BuildContext context) async &#123; _context = context; // 提交 设备类型、发行渠道、架构、机型 AppUpdateRequestEntity requestDeviceInfo = AppUpdateRequestEntity( device: Global.isIOS == true ? \"ios\" : \"android\", channel: Global.channel, architecture: Global.isIOS == true ? Global.iosDeviceInfo.utsname.machine : Global.androidDeviceInfo.device, model: Global.isIOS == true ? Global.iosDeviceInfo.name : Global.androidDeviceInfo.brand, ); _appUpdateInfo = await AppApi.update(context: context, params: requestDeviceInfo); _runAppUpdate(); &#125; /// 检查是否有新版 Future _runAppUpdate() async &#123; // 比较版本 final isNewVersion = (_appUpdateInfo.latestVersion.compareTo(Global.packageInfo.version) == 1); // 安装 if (isNewVersion == true) &#123; _appUpdateConformDialog(() &#123; Navigator.of(_context).pop(); if (Global.isIOS == true) &#123; // 去苹果店 InstallPlugin.gotoAppStore(_appUpdateInfo.shopUrl); &#125; else &#123; // apk 下载安装 toastInfo(msg: \"开始下载升级包\"); _downloadAPKAndSetup(_appUpdateInfo.fileUrl); &#125; &#125;); &#125; &#125; /// 下载文件 &amp; 安装 Future _downloadAPKAndSetup(String fileUrl) async &#123; // 下载 Directory externalDir = await getExternalStorageDirectory(); String fullPath = externalDir.path + \"/release.apk\"; Dio dio = Dio(BaseOptions( responseType: ResponseType.bytes, followRedirects: false, validateStatus: (status) &#123; return status &lt; 500; &#125;)); Response response = await dio.get( fileUrl, ); File file = File(fullPath); var raf = file.openSync(mode: FileMode.write); raf.writeFromSync(response.data); await raf.close(); // 安装 await InstallPlugin.installApk(fullPath, Global.packageInfo.packageName); &#125; /// 升级确认对话框 void _appUpdateConformDialog(VoidCallback onPressed) &#123; EasyDialog( title: Text( \"发现新版本 $&#123;_appUpdateInfo.latestVersion&#125;\", style: TextStyle(fontWeight: FontWeight.bold), textScaleFactor: 1.2, ), description: Text( _appUpdateInfo.latestDescription, textScaleFactor: 1.1, textAlign: TextAlign.center, ), height: 220, contentList: [ Row( mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: onPressed, child: new Text( \"同意\", textScaleFactor: 1.2, ), ), new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: () &#123; Navigator.of(_context).pop(); &#125;, child: new Text( \"取消\", textScaleFactor: 1.2, ), ), ], ) ]).show(_context); &#125;&#125; 读取设备信息 插件 https://pub.flutter-io.cn/packages/device_info 全局信息 lib/global.dart 12345678910111213141516171819202122232425262728/// 是否 iosstatic bool isIOS = Platform.isIOS;/// android 设备信息static AndroidDeviceInfo androidDeviceInfo;/// ios 设备信息static IosDeviceInfo iosDeviceInfo;/// 包信息static PackageInfo packageInfo;/// initstatic Future init() async &#123; ... // 读取设备信息 DeviceInfoPlugin deviceInfoPlugin = DeviceInfoPlugin(); if (Global.isIOS) &#123; Global.iosDeviceInfo = await deviceInfoPlugin.iosInfo; &#125; else &#123; Global.androidDeviceInfo = await deviceInfoPlugin.androidInfo; &#125; // 包信息 Global.packageInfo = await PackageInfo.fromPlatform(); ... 定义升级信息 entity lib/common/entitys/app.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class AppUpdateRequestEntity &#123; String device; String channel; String architecture; String model; AppUpdateRequestEntity(&#123; this.device, this.channel, this.architecture, this.model, &#125;); factory AppUpdateRequestEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; AppUpdateRequestEntity( device: json[\"device\"], channel: json[\"channel\"], architecture: json[\"architecture\"], model: json[\"model\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"device\": device, \"channel\": channel, \"architecture\": architecture, \"model\": model, &#125;;&#125;class AppUpdateResponseEntity &#123; String shopUrl; String fileUrl; String latestVersion; String latestDescription; AppUpdateResponseEntity(&#123; this.shopUrl, this.fileUrl, this.latestVersion, this.latestDescription, &#125;); factory AppUpdateResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; AppUpdateResponseEntity( shopUrl: json[\"shopUrl\"], fileUrl: json[\"fileUrl\"], latestVersion: json[\"latestVersion\"], latestDescription: json[\"latestDescription\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"shopUrl\": shopUrl, \"fileUrl\": fileUrl, \"latestVersion\": latestVersion, \"latestDescription\": latestDescription, &#125;;&#125; api 请求 lib/common/apis/app.dart 123456789101112131415/// 系统相关class AppApi &#123; /// 获取最新版本信息 static Future&lt;AppUpdateResponseEntity&gt; update(&#123; @required BuildContext context, AppUpdateRequestEntity params, &#125;) async &#123; var response = await HttpUtil().post( '/app/update', context: context, params: params, ); return AppUpdateResponseEntity.fromJson(response); &#125;&#125; 提交信息 获取版本 lib/common/utils/update.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243/// 获取更新信息Future run(BuildContext context) async &#123; _context = context; // 提交 设备类型、发行渠道、架构、机型 AppUpdateRequestEntity requestDeviceInfo = AppUpdateRequestEntity( device: Global.isIOS == true ? \"ios\" : \"android\", channel: Global.channel, architecture: Global.isIOS == true ? Global.iosDeviceInfo.utsname.machine : Global.androidDeviceInfo.device, model: Global.isIOS == true ? Global.iosDeviceInfo.name : Global.androidDeviceInfo.brand, ); _appUpdateInfo = await AppApi.update(context: context, params: requestDeviceInfo); _runAppUpdate();&#125;/// 检查是否有新版Future _runAppUpdate() async &#123; // 比较版本 final isNewVersion = (_appUpdateInfo.latestVersion.compareTo(Global.packageInfo.version) == 1); // 安装 if (isNewVersion == true) &#123; _appUpdateConformDialog(() &#123; Navigator.of(_context).pop(); if (Global.isIOS == true) &#123; // 去苹果店 InstallPlugin.gotoAppStore(_appUpdateInfo.shopUrl); &#125; else &#123; // apk 下载安装 toastInfo(msg: \"开始下载升级包\"); _downloadAPKAndSetup(_appUpdateInfo.fileUrl); &#125; &#125;); &#125;&#125; android 动态授权 插件 https://pub.flutter-io.cn/packages/permission_handler 官方文章 https://developer.android.com/training/permissions/requesting https://developer.android.com/training/permissions/usage-notes AndroidManifest.xml 中加入权限 android/app/src/main/AndroidManifest.xml 123&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt; flutter 启动页中执行授权 lib/pages/index/index.dart 在 initState 是执行 延迟 3 秒，用户体验好些 123456789101112131415161718192021class _IndexPageState extends State&lt;IndexPage&gt; &#123; @override void initState() &#123; super.initState(); if (Global.isRelease == true) &#123; doAppUpdate(); &#125; &#125; Future doAppUpdate() async &#123; await Future.delayed(Duration(seconds: 3), () async &#123; if (Global.isIOS == false &amp;&amp; await Permission.storage.isGranted == false) &#123; await [Permission.storage].request(); &#125; if (await Permission.storage.isGranted) &#123; AppUpdateUtil().run(context); &#125; &#125;); &#125; android 目录权限 插件 https://pub.flutter-io.cn/packages/path_providerhttps://pub.flutter-io.cn/packages/install_plugin 文章 https://developer.android.com/reference/androidx/core/content/FileProvider.html lib/common/utils/update.dart 123456789101112131415161718192021222324/// 下载文件 &amp; 安装Future _downloadAPKAndSetup(String fileUrl) async &#123; // 下载 Directory externalDir = await getExternalStorageDirectory(); String fullPath = externalDir.path + \"/release.apk\"; Dio dio = Dio(BaseOptions( responseType: ResponseType.bytes, followRedirects: false, validateStatus: (status) &#123; return status &lt; 500; &#125;)); Response response = await dio.get( fileUrl, ); File file = File(fullPath); var raf = file.openSync(mode: FileMode.write); raf.writeFromSync(response.data); await raf.close(); // 安装 await InstallPlugin.installApk(fullPath, Global.packageInfo.packageName);&#125; EasyDialog 快速提示框 插件 https://pub.flutter-io.cn/packages/easy_dialog lib/common/utils/update.dart 123456789101112131415161718192021222324252627282930313233343536373839404142/// 升级确认对话框void _appUpdateConformDialog(VoidCallback onPressed) &#123; EasyDialog( title: Text( \"发现新版本 $&#123;_appUpdateInfo.latestVersion&#125;\", style: TextStyle(fontWeight: FontWeight.bold), textScaleFactor: 1.2, ), description: Text( _appUpdateInfo.latestDescription, textScaleFactor: 1.1, textAlign: TextAlign.center, ), height: 220, contentList: [ Row( mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: onPressed, child: new Text( \"同意\", textScaleFactor: 1.2, ), ), new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: () &#123; Navigator.of(_context).pop(); &#125;, child: new Text( \"取消\", textScaleFactor: 1.2, ), ), ], ) ]).show(_context);&#125; 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 参考 文章 https://developer.android.com/training/permissions/requestinghttps://developer.android.com/training/permissions/usage-noteshttps://developer.android.com/reference/androidx/core/content/FileProvider.html flutter 插件 https://pub.flutter-io.cn/packages/device_infohttps://pub.flutter-io.cn/packages/path_providerhttps://pub.flutter-io.cn/packages/permission_handlerhttps://pub.flutter-io.cn/packages/install_pluginhttps://pub.flutter-io.cn/packages/easy_dialog VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 10 编译发布正式版","date":"2020-05-04T16:00:00.000Z","path":"2020/05/05/flutter-project/flutter-project-news-10-release/","text":"本节目标 编译 build releae 程序瘦身 混淆程序 修改程序名称 制作图标 制作启动画面 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.10 正文1. APP 图标规格说明https://developer.android.com/google-play/resources/icon-design-specifications https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/ 图标尺寸android 512x512 ios 1024x1024 在线工具https://www.designevo.com/cn/logo-maker/ flutter_launcher_icons 插件https://pub.dev/packages/flutter_launcher_icons pubspec.yaml12345678dev_dependencies: # icons flutter_launcher_icons: ^0.7.5flutter_icons: android: \"launcher_icon\" ios: true image_path: \"assets/icons/logo-1024.png\" 生成图标1flutter pub run flutter_launcher_icons:main 图标目录android/app/src/main/res ios/Runner/Assets.xcassets/AppIcon.appiconset 2. 启动图片规格说明https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#device-screen-sizes-and-orientations https://developer.android.com/about/dashboards/index.html#Screens https://uiiiuiii.com/screen/ 图片尺寸iPhone XS Max 1242px × 2688px android xxhdpi xhdpi 在线工具https://hotpot.ai/icon_resizer 3. Android 发布证书签名说明https://developer.android.com/studio/publish/app-signing?hl=zh-cn 生成证书12345# 进入目录 android/app/keytool -genkey -v -keystore ./key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key# 输出文件android/app/key.jks Gradle 配置 android/gradle.properties 1android.enableAapt2=false # 不检测依赖资源 android/key.properties 1234storePassword=123456keyPassword=123456keyAlias=keystoreFile=./key.jks android/app/build.gradle 123456789101112131415161718192021222324252627282930// 定义属性读取对象，读取 android/key.propertiesdef keystoreProperties = new Properties()def keystorePropertiesFile = rootProject.file('key.properties')if (keystorePropertiesFile.exists()) &#123; keystoreProperties.load(new FileInputStream(keystorePropertiesFile))&#125;android &#123; compileSdkVersion 28 ... // 签名配置 signingConfigs &#123; release &#123; keyAlias keystoreProperties['keyAlias'] keyPassword keystoreProperties['keyPassword'] storeFile file(keystoreProperties['storeFile']) storePassword keystoreProperties['storePassword'] &#125; &#125; buildTypes &#123; // 发布配置 release &#123; signingConfig signingConfigs.release &#125; &#125;&#125; 修改版本号 pubspec.yaml 1version: 1.0.0+1 修改程序名称 android/app/src/main/AndroidManifest.xml 1234&lt;application android:name=\"io.flutter.app.FlutterApplication\" android:label=\"猫哥新闻\" android:icon=\"@mipmap/launcher_icon\"&gt; 设置网络权限 android/app/src/main/AndroidManifest.xml 1234 &lt;/application&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;&lt;/manifest&gt; 编译打包1flutter build apk --split-per-abi 输出目录123✓ Built build/app/outputs/apk/release/app-armeabi-v7a-release.apk (7.2MB).✓ Built build/app/outputs/apk/release/app-arm64-v8a-release.apk (7.4MB).✓ Built build/app/outputs/apk/release/app-x86_64-release.apk (7.6MB). 混淆编译https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code android/gradle.properties 1extra-gen-snapshot-options=--obfuscate android/proguard-rules.pro 12345678#Flutter Wrapper-dontwarn io.flutter.**-keep class io.flutter.app.** &#123; *; &#125;-keep class io.flutter.plugin.** &#123; *; &#125;-keep class io.flutter.util.** &#123; *; &#125;-keep class io.flutter.view.** &#123; *; &#125;-keep class io.flutter.** &#123; *; &#125;-keep class io.flutter.plugins.** &#123; *; &#125; android/app/build.gradle 123456789101112buildTypes &#123; release &#123; signingConfig signingConfigs.release minifyEnabled true //资源压缩设置 useProguard true //代码压缩设置 //读取代码压缩配置文件 proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' &#125;&#125; 编译 1flutter build apk --split-per-abi 启动页 图片 android/app/src/main/res/values/colors.xml 1234&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;color name=\"cyan\"&gt;#deecec&lt;/color&gt;&lt;/resources&gt; android/app/src/main/res/drawable/launch_background.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!-- Modify this file to customize your launch splash screen --&gt;&lt;layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:drawable=\"@color/cyan\" /&gt; &lt;item&gt; &lt;bitmap android:gravity=\"center\" android:src=\"@mipmap/launch_image\" /&gt; &lt;/item&gt;&lt;/layer-list&gt; 4. IOS 发布启动页 修改程序名称 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 参考https://flutter.dev/docs/deployment/android https://flutter.dev/docs/deployment/ios https://flutter.dev/docs/deployment/obfuscate https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code https://pub.dev/packages/flutter_launcher_icons https://developer.android.com/google-play/resources/icon-design-specifications https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/ https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#device-screen-sizes-and-orientations https://developer.android.com/about/dashboards/index.html#Screens https://uiiiuiii.com/screen/ VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 09 详情页展示、分享、远程真机调试","date":"2020-04-23T16:00:00.000Z","path":"2020/04/24/flutter-project/flutter-project-news-09-webview/","text":"本节目标 详情页技术方案比较 载入 web 内容 自动计算高度 清除广告、推荐 拦截请求 loading 状态显示 分享插件 远程 android 设备调试 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.9 详情展示技术方案选择分析工具 UI automator view 文件位置 /Users/ducafecat/Library/Android/sdk/tools/bin/uiautomatorviewer 淘宝方案 混合方式 头条 混合方式 什么值得买 单一 webView 技术点分析 webView 原生 混合方式 计算 web 页面高度 拦截请求，自定义指令 内存占用（尽量少的 dom 元素） 安装插件 webview_flutter https://pub.flutter-io.cn/packages/webview_flutter pubspec.yaml 12dependencies: webview_flutter: ^0.3.20+2 ios/Runner/Info.plist 12&lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt;&lt;true/&gt; 构建界面代码123456789101112131415161718192021222324252627282930313233343536// 顶部导航Widget _buildAppBar() &#123; return Container();&#125;// 页标题Widget _buildPageTitle() &#123; return Container();&#125;// 页头部Widget _buildPageHeader() &#123; return Container();&#125;// web内容Widget _buildWebView() &#123; return Container();&#125;@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: _buildAppBar(), body: SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildPageTitle(), Divider(height: 1), _buildPageHeader(), _buildWebView(), ], ), ), );&#125; url 载入1234567891011121314Widget _buildWebView() &#123; return Container( height: _webViewHeight, child: WebView( initialUrl: '$SERVER_API_URL/news/content/$&#123;widget.item.id&#125;', //widget.url, javascriptMode: JavascriptMode.unrestricted, onWebViewCreated: (WebViewController webViewController) async &#123; _controller.complete(webViewController); &#125;, gestureNavigationEnabled: true, ), );&#125; 计算高度 PX DP https://blog.akanelee.me/2018/07/31/dpi-px-pt-dp-sp/ 设备像素密度 一个逻辑像素占用多少个实际像素 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/devicePixelRatio https://api.flutter.dev/flutter/dart-ui/Window/devicePixelRatio.html 注册 js 12345double _webViewHeight = 200; javascriptChannels: &lt;JavascriptChannel&gt;[ _invokeJavascriptChannel(context), ].toSet(), 123456789101112131415// 注册js回调JavascriptChannel _invokeJavascriptChannel(BuildContext context) &#123; return JavascriptChannel( name: 'Invoke', onMessageReceived: (JavascriptMessage message) &#123; print(message.message); var webHeight = double.parse(message.message); if (webHeight != null) &#123; setState(() &#123; _webViewHeight = webHeight; &#125;); &#125; &#125;);&#125; 回调 123456onPageFinished: (String url) &#123; _getWebViewHeight(); setState(() &#123; _isPageFinished = true; &#125;);&#125;, 123456789101112// 获取页面高度_getWebViewHeight() async &#123; await (await _controller.future)?.evaluateJavascript(''' try &#123; // Invoke.postMessage([document.body.clientHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight]); let scrollHeight = document.documentElement.scrollHeight; if (scrollHeight) &#123; Invoke.postMessage(scrollHeight); &#125; &#125; catch &#123;&#125; ''');&#125; 清除广告、推荐 https://cn.engadget.com/cn-2020-01-21-google-pixelbook-go-not-pink-available.html 删除广告 123456789onPageStarted: (String url) &#123; Timer(Duration(seconds: 1), () &#123; setState(() &#123; _isPageFinished = true; &#125;); _removeAd(); _getViewHeight(); &#125;);&#125;, 1234567891011121314151617181920212223_removeWebViewAd() async &#123; await (await _controller.future)?.evaluateJavascript(''' try &#123; function removeElement(elementName)&#123; let _element = document.getElementById(elementName); if(!_element) &#123; _element = document.querySelector(elementName); &#125; if(!_element) &#123; return; &#125; let _parentElement = _element.parentNode; if(_parentElement)&#123; _parentElement.removeChild(_element); &#125; &#125; removeElement('module-engadget-deeplink-top-ad'); removeElement('module-engadget-deeplink-streams'); removeElement('footer'); &#125; catch&#123;&#125; ''');&#125; 拦截请求 页面中 href 1234567891011&lt;div class=\"tags\"&gt; &lt;a href=\"/tag/chrome-os\" class=\"tag\"&gt;chrome os&lt;/a&gt; &lt;a href=\"/tag/chromebook\" class=\"tag\"&gt;chromebook&lt;/a&gt; &lt;a href=\"/tag/computer\" class=\"tag\"&gt;computer&lt;/a&gt; &lt;a href=\"/tag/gear\" class=\"tag\"&gt;gear&lt;/a&gt; &lt;a href=\"/tag/google\" class=\"tag\"&gt;google&lt;/a&gt; &lt;a href=\"/tag/laptop\" class=\"tag\"&gt;laptop&lt;/a&gt; &lt;a href=\"/tag/personal computing\" class=\"tag\"&gt;personal computing&lt;/a&gt; &lt;a href=\"/tag/personalcomputing\" class=\"tag\"&gt;personalcomputing&lt;/a&gt; &lt;a href=\"/tag/pixelbook-go\" class=\"tag\"&gt;pixelbook go&lt;/a&gt;&lt;/div&gt; navigation 拦截 1234567navigationDelegate: (NavigationRequest request) &#123; if (request.url != '$SERVER_API_URL/news/content/$&#123;widget.item.id&#125;') &#123; toastInfo(msg: request.url); return NavigationDecision.prevent; &#125; return NavigationDecision.navigate;&#125;, loading 状态显示12345678910111213141516171819202122232425262728bool _isPageFinished = false;@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: _buildAppBar(), body: Stack( children: &lt;Widget&gt;[ SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildPageTitle(), Divider(height: 1), _buildPageHeader(), _buildWebView(), ], ), ), _isPageFinished == true ? Container() : Align( alignment: Alignment.center, child: LoadingBouncingGrid.square(), ), ], ));&#125; 分享安装插件12dependencies: share: ^0.6.4 代码123onPressed: () &#123; Share.share('$&#123;widget.item.title&#125; $&#123;widget.item.url&#125;');&#125;, 真机调试 scrcpy https://github.com/Genymobile/scrcpy 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 参考https://pub.flutter-io.cn/packages/webview_flutterhttps://pub.flutter-io.cn/packages/loading_animationshttps://pub.flutter-io.cn/packages/sharehttps://github.com/Genymobile/scrcpy VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 08 路由管理 auto_route","date":"2020-04-16T16:00:00.000Z","path":"2020/04/17/flutter-project/flutter-project-news-08-auto-route/","text":"本节目标 安装插件 路由定义 自动生成路由控制类 转场动画 登录检查中间件 带参数传递 获取返回值 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.8 正文一些优秀的路由插件 fluro 前端的使用体验 router.navigateTo(context, “/users/1234”, transition: TransitionType.fadeIn); flutter_modular 功能强大的路由管理：中间件、懒加载、状态管理、动态路由、分组路由、动画、返回值、命名路由 auto_route 设计精简、低耦合其它功能 功能：中间件、自动生成路由代码、动态路由、动画、返回值、命名路由 安装插件 官网 https://pub.flutter-io.cn/packages/auto_route pubspec.yaml 1234567891011121314dependencies: flutter: sdk: flutter # 路由管理 auto_route: ^0.4.4dev_dependencies: flutter_test: sdk: flutter # 路由生成 auto_route_generator: ^0.4.4 build_runner: 路由定义 lib/common/router/router.dart 123456789101112131415@MaterialAutoRouter()class $AppRouter &#123; @initial IndexPage indexPageRoute; WelcomePage welcomePageRoute; SignInPage signInPageRoute; SignUpPage signUpPageRoute; ApplicationPage applicationPageRoute; DetailsPage detailsPageRoute;&#125; 注意 $ 符号 自动生成路由控制类 执行命令 1flutter packages pub run build_runner build 自动生成 lib/common/router/router.gr.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144// GENERATED CODE - DO NOT MODIFY BY HAND// **************************************************************************// AutoRouteGenerator// **************************************************************************import 'package:flutter/material.dart';import 'package:flutter/cupertino.dart';import 'package:auto_route/auto_route.dart';import 'package:flutter_ducafecat_news/pages/index/index.dart';import 'package:flutter_ducafecat_news/pages/welcome/welcome.dart';import 'package:flutter_ducafecat_news/pages/sign_in/sign_in.dart';import 'package:flutter_ducafecat_news/pages/sign_up/sign_up.dart';import 'package:flutter_ducafecat_news/pages/application/application.dart';import 'package:flutter_ducafecat_news/common/router/auth_grard.dart';import 'package:flutter_ducafecat_news/pages/details/details.dart';abstract class Routes &#123; static const indexPageRoute = '/'; static const welcomePageRoute = '/welcome-page-route'; static const signInPageRoute = '/sign-in-page-route'; static const signUpPageRoute = '/sign-up-page-route'; static const applicationPageRoute = '/application-page-route'; static const detailsPageRoute = '/details-page-route';&#125;class AppRouter extends RouterBase &#123; @override Map&lt;String, List&lt;Type&gt;&gt; get guardedRoutes =&gt; &#123; Routes.applicationPageRoute: [AuthGuard], Routes.detailsPageRoute: [AuthGuard], &#125;; //This will probably be removed in future versions //you should call ExtendedNavigator.ofRouter&lt;Router&gt;() directly static ExtendedNavigatorState get navigator =&gt; ExtendedNavigator.ofRouter&lt;AppRouter&gt;(); @override Route&lt;dynamic&gt; onGenerateRoute(RouteSettings settings) &#123; final args = settings.arguments; switch (settings.name) &#123; case Routes.indexPageRoute: if (hasInvalidArgs&lt;IndexPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;IndexPageArguments&gt;(args); &#125; final typedArgs = args as IndexPageArguments ?? IndexPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; IndexPage(key: typedArgs.key), settings: settings, ); case Routes.welcomePageRoute: if (hasInvalidArgs&lt;WelcomePageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;WelcomePageArguments&gt;(args); &#125; final typedArgs = args as WelcomePageArguments ?? WelcomePageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; WelcomePage(key: typedArgs.key), settings: settings, ); case Routes.signInPageRoute: if (hasInvalidArgs&lt;SignInPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;SignInPageArguments&gt;(args); &#125; final typedArgs = args as SignInPageArguments ?? SignInPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; SignInPage(key: typedArgs.key), settings: settings, ); case Routes.signUpPageRoute: if (hasInvalidArgs&lt;SignUpPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;SignUpPageArguments&gt;(args); &#125; final typedArgs = args as SignUpPageArguments ?? SignUpPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; SignUpPage(key: typedArgs.key), settings: settings, ); case Routes.applicationPageRoute: if (hasInvalidArgs&lt;ApplicationPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;ApplicationPageArguments&gt;(args); &#125; final typedArgs = args as ApplicationPageArguments ?? ApplicationPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; ApplicationPage(key: typedArgs.key), settings: settings, ); case Routes.detailsPageRoute: if (hasInvalidArgs&lt;DetailsPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;DetailsPageArguments&gt;(args); &#125; final typedArgs = args as DetailsPageArguments ?? DetailsPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; DetailsPage(key: typedArgs.key), settings: settings, ); default: return unknownRoutePage(settings.name); &#125; &#125;&#125;//**************************************************************************// Arguments holder classes//***************************************************************************//IndexPage arguments holder classclass IndexPageArguments &#123; final Key key; IndexPageArguments(&#123;this.key&#125;);&#125;//WelcomePage arguments holder classclass WelcomePageArguments &#123; final Key key; WelcomePageArguments(&#123;this.key&#125;);&#125;//SignInPage arguments holder classclass SignInPageArguments &#123; final Key key; SignInPageArguments(&#123;this.key&#125;);&#125;//SignUpPage arguments holder classclass SignUpPageArguments &#123; final Key key; SignUpPageArguments(&#123;this.key&#125;);&#125;//ApplicationPage arguments holder classclass ApplicationPageArguments &#123; final Key key; ApplicationPageArguments(&#123;this.key&#125;);&#125;//DetailsPage arguments holder classclass DetailsPageArguments &#123; final Key key; DetailsPageArguments(&#123;this.key&#125;);&#125; 路由跳转 方式 1：带 context 方式 1ExtendedNavigator.of(context).pushNamed(Routes.signUpPageRoute); 方式 2：不带 context 方式 1ExtendedNavigator.ofRouter&lt;AppRouter&gt;().pushNamed(Routes.signUpPageRoute); 方式 3：如果你只有一个导航 1ExtenedNavigator.rootNavigator.pushNamed(Routes.signUpPageRoute); 转场动画 lib/common/router/router.dart 1234567891011121314Widget zoomInTransition(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation, Widget child) &#123; // you get an animation object and a widget // make your own transition return ScaleTransition(scale: animation, child: child);&#125;@MaterialAutoRouter()class $AppRouter &#123; ... @CustomRoute(transitionsBuilder: zoomInTransition) ApplicationPage applicationPageRoute;&#125; 重新生成 1flutter packages pub run build_runner build 登录检查中间件 创建 lib/common/router/auth_grard.dart 12345678910111213141516import 'package:auto_route/auto_route.dart';import 'package:flutter_ducafecat_news/common/router/router.gr.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';class AuthGuard extends RouteGuard &#123; @override Future&lt;bool&gt; canNavigate(ExtendedNavigatorState navigator, String routeName, Object arguments) async &#123; var isAuth = await isAuthenticated(); if (isAuth == false) &#123; ExtendedNavigator.rootNavigator.pushNamed(Routes.signInPageRoute); &#125; return isAuth; &#125;&#125; 注册 lib/main.dart 1234567891011121314class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'ducafecat.tech', debugShowCheckedModeBanner: false, builder: ExtendedNavigator&lt;AppRouter&gt;( initialRoute: Routes.indexPageRoute, router: AppRouter(), guards: [AuthGuard()], ), ); &#125;&#125; 定义 lib/common/router/router.dart 12345678@MaterialAutoRouter()class $AppRouter &#123; ... @GuardedBy([AuthGuard]) @CustomRoute(transitionsBuilder: zoomInTransition) ApplicationPage applicationPageRoute;&#125; 重新生成 1flutter packages pub run build_runner build 参数传递 设定初始参数 lib/pages/details/details.dart 123class DetailsPage extends StatefulWidget &#123; final String cid; DetailsPage(&#123;Key key, this.cid&#125;) : super(key: key); 定义 lib/common/router/router.dart 123@MaterialAutoRouter(generateNavigationHelperExtension: true)class $AppRouter &#123; ... 重新生成 1flutter packages pub run build_runner build lib/common/router/router.gr.dart 123456//DetailsPage arguments holder classclass DetailsPageArguments &#123; final Key key; final String cid; DetailsPageArguments(&#123;this.key, this.cid&#125;);&#125; 导航参数 1ExtendedNavigator.rootNavigator.pushDetailsPageRoute(cid: '123'); 获取返回值 12345ExtendedNavigator.rootNavigator .pushNamed(Routes.signUpPageRoute) .then((onValue) &#123; print(onValue);&#125;); 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 参考https://pub.flutter-io.cn/packages/auto_route VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 07 Provider、认证授权、骨架屏、磁盘缓存","date":"2020-04-07T16:00:00.000Z","path":"2020/04/08/flutter-project/flutter-project-news-07-provider/","text":"本节目标 第一次登录显示欢迎界面 离线登录 Provider 响应数据管理 实现 APP 色彩灰度处理 注销登录 Http Status 401 认证授权 首页磁盘缓存 首页缓存策略，延迟 1~3 秒 首页骨架屏 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.7 视频 b 站 油管镜像 资源 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/wbhGq YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.7 参考 provider pk_skeleton 第一次显示欢迎界面、离线登录 lib/global.dart 12345678910111213141516171819202122/// 是否第一次打开static bool isFirstOpen = false;/// 是否离线登录static bool isOfflineLogin = false;/// initstatic Future init() async &#123; ... // 读取设备第一次打开 isFirstOpen = !StorageUtil().getBool(STORAGE_DEVICE_ALREADY_OPEN_KEY); if (isFirstOpen) &#123; StorageUtil().setBool(STORAGE_DEVICE_ALREADY_OPEN_KEY, true); &#125; // 读取离线用户信息 var _profileJSON = StorageUtil().getJSON(STORAGE_USER_PROFILE_KEY); if (_profileJSON != null) &#123; profile = UserLoginResponseEntity.fromJson(_profileJSON); isOfflineLogin = true; &#125; lib/pages/index/index.dart 123456789101112131415161718192021222324class IndexPage extends StatefulWidget &#123; IndexPage(&#123;Key key&#125;) : super(key: key); @override _IndexPageState createState() =&gt; _IndexPageState();&#125;class _IndexPageState extends State&lt;IndexPage&gt; &#123; @override Widget build(BuildContext context) &#123; ScreenUtil.init( context, width: 375, height: 812 - 44 - 34, allowFontScaling: true, ); return Scaffold( body: Global.isFirstOpen == true ? WelcomePage() : Global.isOfflineLogin == true ? ApplicationPage() : SignInPage(), ); &#125;&#125; Provider 实现动态灰度处理https://pub.flutter-io.cn/packages/provider 步骤 1：安装依赖12dependencies: provider: ^4.0.4 步骤 2：创建响应数据类 lib/common/provider/app.dart 123456789101112import 'package:flutter/material.dart';/// 系统相应状态class AppState with ChangeNotifier &#123; bool _isGrayFilter; get isGrayFilter =&gt; _isGrayFilter; AppState(&#123;bool isGrayFilter = false&#125;) &#123; this._isGrayFilter = isGrayFilter; &#125;&#125; 步骤 3：初始响应数据方式一：先创建数据对象，再挂载 lib/global.dart 12/// 应用状态static AppState appState = AppState(); lib/main.dart 12345678910void main() =&gt; Global.init().then((e) =&gt; runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;.value( value: Global.appState, ), ], child: MyApp(), ), )); 方式二：挂载时，创建对象 lib/main.dart 12345678910void main() =&gt; Global.init().then((e) =&gt; runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;( Create: (_) =&gt; new AppState(), ), ], child: MyApp(), ), )); 步骤 4：通知数据发声变化 lib/common/provider/app.dart 123456789class AppState with ChangeNotifier &#123; ... // 切换灰色滤镜 switchGrayFilter() &#123; _isGrayFilter = !_isGrayFilter; notifyListeners(); &#125;&#125; 步骤 5：收到数据发声变化方式一：Consumer lib/main.dart 12345678910111213141516171819void main() =&gt; Global.init().then((e) =&gt; runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;.value( value: Global.appState, ), ], child: Consumer&lt;AppState&gt;(builder: (context, appState, _) &#123; if (appState.isGrayFilter) &#123; return ColorFiltered( colorFilter: ColorFilter.mode(Colors.white, BlendMode.color), child: MyApp(), ); &#125; else &#123; return MyApp(); &#125; &#125;), ), )); 方式二：Provider.of lib/pages/account/account.dart 123456789101112final appState = Provider.of&lt;AppState&gt;(context);return Column( children: &lt;Widget&gt;[ MaterialButton( onPressed: () &#123; appState.switchGrayFilter(); &#125;, child: Text('灰色切换 $&#123;appState.isGrayFilter&#125;'), ), ],); 多个响应数据处理 挂载用 MultiProvider 接收用 Consumer2 ~ Consumer6 注销登录 lib/common/utils/authentication.dart 123456789101112131415161718/// 检查是否有 tokenFuture&lt;bool&gt; isAuthenticated() async &#123; var profileJSON = StorageUtil().getJSON(STORAGE_USER_PROFILE_KEY); return profileJSON != null ? true : false;&#125;/// 删除缓存 tokenFuture deleteAuthentication() async &#123; await StorageUtil().remove(STORAGE_USER_PROFILE_KEY); Global.profile = null;&#125;/// 重新登录Future goLoginPage(BuildContext context) async &#123; await deleteAuthentication(); Navigator.pushNamedAndRemoveUntil( context, \"/sign-in\", (Route&lt;dynamic&gt; route) =&gt; false);&#125; lib/pages/account/account.dart 12345678910111213141516171819class _AccountPageState extends State&lt;AccountPage&gt; &#123; @override Widget build(BuildContext context) &#123; final appState = Provider.of&lt;AppState&gt;(context); return Column( children: &lt;Widget&gt;[ Text('用户: $&#123;Global.profile.displayName&#125;'), Divider(), MaterialButton( onPressed: () &#123; goLoginPage(context); &#125;, child: Text('退出'), ), ], ); &#125;&#125; Http Status 401 认证授权dio 封装界面的上下文对象 BuildContext context lib/common/utils/http.dart 123456789101112Future post( String path, &#123; @required BuildContext context, dynamic params, Options options,&#125;) async &#123; Options requestOptions = options ?? Options(); requestOptions = requestOptions.merge(extra: &#123; \"context\": context, &#125;); ...&#125; 错误处理 401 去登录界面 lib/common/utils/http.dart 12345678910111213141516171819202122// 添加拦截器dio.interceptors .add(InterceptorsWrapper(onRequest: (RequestOptions options) &#123; return options; //continue&#125;, onResponse: (Response response) &#123; return response; // continue&#125;, onError: (DioError e) &#123; ErrorEntity eInfo = createErrorEntity(e); // 错误提示 toastInfo(msg: eInfo.message); // 错误交互处理 var context = e.request.extra[\"context\"]; if (context != null) &#123; switch (eInfo.code) &#123; case 401: // 没有权限 重新登录 goLoginPage(context); break; default: &#125; &#125; return eInfo;&#125;)); 首页磁盘缓存 lib/common/utils/net_cache.dart 12345678910111213141516171819202122232425// 策略 1 内存缓存优先，2 然后才是磁盘缓存// 1 内存缓存var ob = cache[key];if (ob != null) &#123; //若缓存未过期，则返回缓存内容 if ((DateTime.now().millisecondsSinceEpoch - ob.timeStamp) / 1000 &lt; CACHE_MAXAGE) &#123; return cache[key].response; &#125; else &#123; //若已过期则删除缓存，继续向服务器请求 cache.remove(key); &#125;&#125;// 2 磁盘缓存if (cacheDisk) &#123; var cacheData = StorageUtil().getJSON(key); if (cacheData != null) &#123; return Response( statusCode: 200, data: cacheData, ); &#125;&#125; 首页缓存策略，延迟 1~3 秒 lib/pages/main/channels_widget.dart 1234567891011// 如果有磁盘缓存，延迟3秒拉取更新档案_loadLatestWithDiskCache() &#123; if (CACHE_ENABLE == true) &#123; var cacheData = StorageUtil().getJSON(STORAGE_INDEX_NEWS_CACHE_KEY); if (cacheData != null) &#123; Timer(Duration(seconds: 3), () &#123; _controller.callRefresh(); &#125;); &#125; &#125;&#125; 首页骨架屏https://pub.flutter-io.cn/packages/pk_skeleton lib/pages/main/main.dart 12345678@overrideWidget build(BuildContext context) &#123; return _newsPageList == null ? cardListSkeleton() : EasyRefresh( enableControlFinishRefresh: true, controller: _controller, ... © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 06 代码规范、业务代码组织、新闻首页实现","date":"2020-03-30T16:00:00.000Z","path":"2020/03/31/flutter-project/flutter-project-news-06-main-ui/","text":"1 本节目标 代码规范 业务代码组织 首页代码编写 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.6 2 代码规范2.1 官方代码规范https://dart.dev/guides/language/effective-dart 2.3 chrome 插件 &lt;彩云小译 - 网页翻译插件&gt;https://chrome.google.com/webstore/detail/lingocloud-web-translatio/jmpepeebcbihafjjadogphmbgiffiajh 2.4 阿里项目规范https://github.com/alibaba/flutter-go/blob/master/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md 3 业务界面代码组织3.1 redux、fish-redux redux 架构 fish-redux 架构 进一步的细分，进行规范 https://github.com/alibaba/fish-redux/tree/master/dochttps://medium.com/@dave790602/flutter-architecture-fish-redux-9b753912224a fish-redux 代码 3.2 bloc 架构 https://bloclibrary.dev/#/ 代码组织 3.3 简单就是美 3.4 如何平衡 是否团队开发 是否简单业务（20 页面） 是否重交互（视频社交、聊天 A） 4 新闻首页实现4.1 界面组成分析 分类导航、推荐新闻、频道导航 新闻列表、广告 ad、邮件订阅 4.2 代码框架12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758...class _MainPageState extends State&lt;MainPage&gt; &#123; @override void initState() &#123; super.initState(); _loadAllData(); &#125; // 读取所有数据 _loadAllData() async &#123; &#125; // 分类菜单 Widget _buildCategories() &#123; return Container(); &#125; // 推荐阅读 Widget _buildRecommend() &#123; return Container(); &#125; // 频道 Widget _buildChannels() &#123; return Container(); &#125; // 新闻列表 Widget _buildNewsList() &#123; return Container(); &#125; // ad 广告条 // 邮件订阅 Widget _buildEmailSubscribe() &#123; return newsletterWidget(); &#125; @override Widget build(BuildContext context) &#123; return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildCategories(), Divider(height: 1), _buildRecommend(), Divider(height: 1), _buildChannels(), Divider(height: 1), _buildNewsList(), Divider(height: 1), _buildEmailSubscribe(), ], ), ); &#125;&#125; 4.3 实现业务 创建 widget 单独文件 分类导航 lib/pages/main/categories_widget.dart 1234567891011121314151617181920212223242526272829303132Widget newsCategoriesWidget(&#123; List&lt;CategoryResponseEntity&gt; categories, String selCategoryCode, Function(CategoryResponseEntity) onTap,&#125;) &#123; return SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( children: categories.map&lt;Widget&gt;((item) &#123; return Container( alignment: Alignment.center, height: duSetHeight(52), padding: EdgeInsets.symmetric(horizontal: 8), child: GestureDetector( child: Text( item.title, style: TextStyle( color: selCategoryCode == item.code ? AppColors.secondaryElementText : AppColors.primaryText, fontSize: duSetFontSize(18), fontFamily: 'Montserrat', fontWeight: FontWeight.w600, ), ), onTap: () =&gt; onTap(item), ), ); &#125;).toList(), ), );&#125; 频道导航 lib/pages/main/channels_widget.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879Widget newsChannelsWidget(&#123; List&lt;ChannelResponseEntity&gt; channels, Function(ChannelResponseEntity) onTap,&#125;) &#123; return Container( height: duSetHeight(137), child: SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( children: channels.map&lt;Widget&gt;((item) &#123; return Container( width: duSetWidth(70), height: duSetHeight(97), margin: EdgeInsets.symmetric(horizontal: duSetWidth(10)), child: InkWell( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ // 图标 Container( height: duSetWidth(64), margin: EdgeInsets.symmetric(horizontal: duSetWidth(3)), child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, top: 0, right: 0, child: Container( height: duSetWidth(64), decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: BorderRadius.all(Radius.circular(32)), ), child: Container(), ), ), Positioned( left: duSetWidth(10), top: duSetWidth(10), right: duSetWidth(10), child: Image.asset( \"assets/images/channel-$&#123;item.code&#125;.png\", fit: BoxFit.none, ), ), ], ), ), // 标题 Text( item.title, textAlign: TextAlign.center, overflow: TextOverflow.clip, maxLines: 1, style: TextStyle( color: AppColors.thirdElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(14), height: 1, ), ), ], ), onTap: () =&gt; onTap(item), ), ); &#125;).toList(), ), ), );&#125; 新闻行 Item lib/pages/main/news_item_widget.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116Widget newsItem(NewsItem item) &#123; return Container( height: duSetHeight(161), padding: EdgeInsets.all(duSetWidth(20)), child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 图 imageCached( item.thumbnail, width: duSetWidth(121), height: duSetWidth(121), ), // 右侧 SizedBox( width: duSetWidth(194), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 作者 Container( margin: EdgeInsets.all(0), child: Text( item.author, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), ), ), // 标题 Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Text( item.title, style: TextStyle( fontFamily: 'Montserrat', fontWeight: FontWeight.w500, color: AppColors.primaryText, fontSize: duSetFontSize(16), height: 1, ), overflow: TextOverflow.clip, maxLines: 3, ), ), // Spacer Spacer(), // 一行 3 列 Container( child: Row( crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ // 分类 ConstrainedBox( constraints: BoxConstraints( maxWidth: duSetWidth(60), ), child: Text( item.category, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.secondaryElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 添加时间 Container( width: duSetWidth(15), ), ConstrainedBox( constraints: BoxConstraints( maxWidth: duSetWidth(100), ), child: Text( '• $&#123;duTimeLineFormat(item.addtime)&#125;', style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 更多 Spacer(), InkWell( child: Icon( Icons.more_horiz, color: AppColors.primaryText, size: 24, ), onTap: () &#123;&#125;, ), ], ), ), ], ), ), ], ), );&#125; 邮件订阅 lib/pages/main/newsletter_widget.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283Widget newsletterWidget() &#123; return Container( margin: EdgeInsets.all(duSetWidth(20)), child: Column( children: &lt;Widget&gt;[ // newsletter Row( children: &lt;Widget&gt;[ Text( 'Newsletter', style: TextStyle( fontFamily: 'Montserrat', fontSize: duSetFontSize(18), fontWeight: FontWeight.w600, color: AppColors.thirdElement, ), ), Spacer(), IconButton( icon: Icon( Icons.close, color: AppColors.thirdElementText, size: duSetFontSize(17), ), onPressed: () &#123;&#125;, ), ], ), // email inputEmailEdit( marginTop: 19, keyboardType: TextInputType.emailAddress, hintText: \"Email\", isPassword: false, controller: null, ), // btn subcrible Padding( padding: EdgeInsets.only(top: 15), child: btnFlatButtonWidget( onPressed: () &#123;&#125;, width: duSetWidth(335), height: duSetHeight(44), fontWeight: FontWeight.w600, title: \"Subscribe\", ), ), // disc Container( margin: EdgeInsets.only(top: duSetHeight(29)), width: duSetWidth(261), child: Text.rich(TextSpan(children: &lt;TextSpan&gt;[ TextSpan( text: 'By clicking on Subscribe button you agree to accept', style: new TextStyle( color: AppColors.thirdElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(14), ), ), TextSpan( text: ' Privacy Policy', style: new TextStyle( color: AppColors.secondaryElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(14), ), recognizer: TapGestureRecognizer() ..onTap = () &#123; toastInfo(msg: 'Privacy Policy'); &#125;, ), ])), ), ], ), );&#125; 推荐阅读 lib/pages/main/recommend_widget.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101Widget recommendWidget(NewsRecommendResponseEntity newsRecommend) &#123; return Container( margin: EdgeInsets.all(duSetWidth(20)), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 图 imageCached( newsRecommend.thumbnail, width: duSetWidth(335), height: duSetHeight(290), ), // 作者 Container( margin: EdgeInsets.only(top: duSetHeight(14)), child: Text( newsRecommend.author, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), ), ), ), // 标题 Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Text( newsRecommend.title, style: TextStyle( fontFamily: 'Montserrat', fontWeight: FontWeight.w600, color: AppColors.primaryText, fontSize: duSetFontSize(24), height: 1, ), ), ), // 一行 3 列 Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Row( crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ // 分类 ConstrainedBox( constraints: const BoxConstraints( maxWidth: 120, ), child: Text( newsRecommend.category, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.secondaryElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 添加时间 Container( width: duSetWidth(15), ), ConstrainedBox( constraints: const BoxConstraints( maxWidth: 120, ), child: Text( '• $&#123;duTimeLineFormat(newsRecommend.addtime)&#125;', style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 更多 Spacer(), InkWell( child: Icon( Icons.more_horiz, color: AppColors.primaryText, size: 24, ), onTap: () &#123;&#125;, ), ], ), ), ], ), );&#125; 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 参考 Flutter Go 代码开发规范 0.1.0 版 effective-dart bloc VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 05 AppData、Cache、Fiddle、iconfont、主界面搭建","date":"2020-03-24T16:00:00.000Z","path":"2020/03/25/flutter-project/flutter-project-news-05-cache-iconfont/","text":"本节目标 全局数据、响应数据、持久化 http get 缓存 http proxy 代理 fiddle 抓包工具 iconfont 字体库 主界面搭建 BottomNavigationBar 导航控件 编写 api 接口代码 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.5 客户端数据管理数据类型 全局数据 存储在内存 用户数据、语言包 响应数据 存储在内存 用户登录状态、多语言、皮肤样式 Redux、Bloc、provider 持久化 APP 保持磁盘上 浏览器 cookie localStorage 编写全局管理 lib/global.dart 123456789101112131415161718192021222324252627282930313233343536373839404142/// 全局配置class Global &#123; /// 用户配置 static UserLoginResponseEntity profile = UserLoginResponseEntity( accessToken: null, ); /// 是否 release static bool get isRelease =&gt; bool.fromEnvironment(\"dart.vm.product\"); /// init static Future init() async &#123; // 运行初始 WidgetsFlutterBinding.ensureInitialized(); // 工具初始 await StorageUtil.init(); HttpUtil(); // 读取离线用户信息 var _profileJSON = StorageUtil().getJSON(STORAGE_USER_PROFILE_KEY); if (_profileJSON != null) &#123; profile = UserLoginResponseEntity.fromJson(_profileJSON); &#125; // http 缓存 // android 状态栏为透明的沉浸 if (Platform.isAndroid) &#123; SystemUiOverlayStyle systemUiOverlayStyle = SystemUiOverlayStyle(statusBarColor: Colors.transparent); SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle); &#125; &#125; // 持久化 用户信息 static Future&lt;bool&gt; saveProfile(UserLoginResponseEntity userResponse) &#123; profile = userResponse; return StorageUtil() .setJSON(STORAGE_USER_PROFILE_KEY, userResponse.toJson()); &#125;&#125; 调用运行 lib/main.dart 12345678void main() =&gt; Global.init().then((e) =&gt; runApp(MyApp()));class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Container(); &#125;&#125; Http 内存缓存缓存策略 代码 缓存工具类 lib/common/utils/net_cache.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import 'dart:collection';import 'package:dio/dio.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';class CacheObject &#123; CacheObject(this.response) : timeStamp = DateTime.now().millisecondsSinceEpoch; Response response; int timeStamp; @override bool operator ==(other) &#123; return response.hashCode == other.hashCode; &#125; @override int get hashCode =&gt; response.realUri.hashCode;&#125;class NetCache extends Interceptor &#123; // 为确保迭代器顺序和对象插入时间一致顺序一致，我们使用LinkedHashMap var cache = LinkedHashMap&lt;String, CacheObject&gt;(); @override onRequest(RequestOptions options) async &#123; if (!CACHE_ENABLE) return options; // refresh标记是否是\"下拉刷新\" bool refresh = options.extra[\"refresh\"] == true; // 如果是下拉刷新，先删除相关缓存 if (refresh) &#123; if (options.extra[\"list\"] == true) &#123; //若是列表，则只要url中包含当前path的缓存全部删除（简单实现，并不精准） cache.removeWhere((key, v) =&gt; key.contains(options.path)); &#125; else &#123; // 如果不是列表，则只删除uri相同的缓存 delete(options.uri.toString()); &#125; return options; &#125; // get 请求，开启缓存 if (options.extra[\"noCache\"] != true &amp;&amp; options.method.toLowerCase() == 'get') &#123; String key = options.extra[\"cacheKey\"] ?? options.uri.toString(); var ob = cache[key]; if (ob != null) &#123; //若缓存未过期，则返回缓存内容 if ((DateTime.now().millisecondsSinceEpoch - ob.timeStamp) / 1000 &lt; CACHE_MAXAGE) &#123; return cache[key].response; &#125; else &#123; //若已过期则删除缓存，继续向服务器请求 cache.remove(key); &#125; &#125; &#125; &#125; @override onError(DioError err) async &#123; // 错误状态不缓存 &#125; @override onResponse(Response response) async &#123; // 如果启用缓存，将返回结果保存到缓存 if (CACHE_ENABLE) &#123; _saveCache(response); &#125; &#125; _saveCache(Response object) &#123; RequestOptions options = object.request; // 只缓存 get 的请求 if (options.extra[\"noCache\"] != true &amp;&amp; options.method.toLowerCase() == \"get\") &#123; // 如果缓存数量超过最大数量限制，则先移除最早的一条记录 if (cache.length == CACHE_MAXCOUNT) &#123; cache.remove(cache[cache.keys.first]); &#125; String key = options.extra[\"cacheKey\"] ?? options.uri.toString(); cache[key] = CacheObject(object); &#125; &#125; void delete(String key) &#123; cache.remove(key); &#125;&#125; dio 封装 lib/common/utils/http.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 加内存缓存HttpUtil._internal() &#123; ... dio.interceptors.add(NetCache()); ...&#125;// 修改 get 请求/// restful get 操作/// refresh 是否下拉刷新 默认 false/// noCache 是否不缓存 默认 true/// list 是否列表 默认 false/// cacheKey 缓存keyFuture get( String path, &#123; dynamic params, Options options, bool refresh = false, bool noCache = !CACHE_ENABLE, bool list = false, String cacheKey,&#125;) async &#123; try &#123; Options requestOptions = options ?? Options(); requestOptions = requestOptions.merge(extra: &#123; \"refresh\": refresh, \"noCache\": noCache, \"list\": list, \"cacheKey\": cacheKey, &#125;); Map&lt;String, dynamic&gt; _authorization = getAuthorizationHeader(); if (_authorization != null) &#123; requestOptions = requestOptions.merge(headers: _authorization); &#125; var response = await dio.get(path, queryParameters: params, options: requestOptions, cancelToken: cancelToken); return response.data; &#125; on DioError catch (e) &#123; throw createErrorEntity(e); &#125;&#125; Http Proxy 代理 + Fiddle 抓包安装 Fiddlehttps://www.telerik.com/download/fiddler-everywhere dio 加入 proxy lib/common/utils/http.dart 1234567891011if (!Global.isRelease &amp;&amp; PROXY_ENABLE) &#123; (dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client) &#123; client.findProxy = (uri) &#123; return \"PROXY $PROXY_IP:$PROXY_PORT\"; &#125;; //代理工具会提供一个抓包的自签名证书，会通不过证书校验，所以我们禁用证书校验 client.badCertificateCallback = (X509Certificate cert, String host, int port) =&gt; true; &#125;;&#125; Iconfont 字体库引入流程 登录 https://www.iconfont.cn 创建字体项目 字体文件放入 assets/fonts/iconfont.ttf pubspec.yaml 12345fonts: ... - family: Iconfont fonts: - asset: assets/fonts/iconfont.ttf lib/common/utils/iconfont.dart 123456789101112import 'package:flutter/material.dart';class Iconfont &#123; // iconName: share static const share = IconData( 0xe60d, fontFamily: 'Iconfont', matchTextDirection: true, ); ...&#125; 自动生成字体库代码https://github.com/ymzuiku/iconfont_builder 拉取项目、编译 1234567891011# 拉取项目&gt; git clone https://github.com/ymzuiku/iconfont_builder# 更新包&gt; pub get# 安装工具&gt; pub global activate iconfont_builder# 检查环境配置export PATH=$&#123;PATH&#125;:~/.pub-cache/bin 参考我的配置 123456789101112131415# flutter sdkexport PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin# dart sdkexport PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin/cache/dart-sdk/binexport PATH=$&#123;PATH&#125;:~/.pub-cache/bin# flutter-io 国内镜像export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn# androidexport ANDROID_HOME=~/Library/Android/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools 生成字体类 12cd 你的项目根目录iconfont_builder --from ./assets/fonts --to ./lib/common/utils/iconfont.dart 编写 api 业务代码 yapi 配置 导入 doc/api.json 代码 搭建主界面框架 框架页面 lib/pages/application/application.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152...class _ApplicationPageState extends State&lt;ApplicationPage&gt; with SingleTickerProviderStateMixin &#123; // 当前 tab 页码 int _page = 0; // tab 页标题 final List&lt;String&gt; _tabTitles = [ 'Welcome', 'Cagegory', 'Bookmarks', 'Account' ]; // 页控制器 PageController _pageController; // 底部导航项目 final List&lt;BottomNavigationBarItem&gt; _bottomTabs = &lt;BottomNavigationBarItem&gt;[...]; // tab栏动画 void _handleNavBarTap(int index) &#123; ... &#125; // tab栏页码切换 void _handlePageChanged(int page) &#123; ... &#125; // 顶部导航 Widget _buildAppBar() &#123; return Container(); &#125; // 内容页 Widget _buildPageView() &#123; return Container(); &#125; // 底部导航 Widget _buildBottomNavigationBar() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: _buildAppBar(), body: _buildPageView(), bottomNavigationBar: _buildBottomNavigationBar(), ); &#125;&#125; 编写首页代码 首页代码 lib/pages/main/main.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263...class _MainPageState extends State&lt;MainPage&gt; &#123; NewsPageListResponseEntity _newsPageList; // 新闻翻页 NewsRecommendResponseEntity _newsRecommend; // 新闻推荐 List&lt;CategoryResponseEntity&gt; _categories; // 分类 List&lt;ChannelResponseEntity&gt; _channels; // 频道 String _selCategoryCode; // 选中的分类Code @override void initState() &#123; super.initState(); _loadAllData(); &#125; // 读取所有数据 _loadAllData() async &#123; ... &#125; // 分类菜单 Widget _buildCategories() &#123; return Container(); &#125; // 抽取前先实现业务 // 推荐阅读 Widget _buildRecommend() &#123; return Container(); &#125; // 频道 Widget _buildChannels() &#123; return Container(); &#125; // 新闻列表 Widget _buildNewsList() &#123; return Container(); &#125; // ad 广告条 // 邮件订阅 Widget _buildEmailSubscribe() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildCategories(), _buildRecommend(), _buildChannels(), _buildNewsList(), _buildEmailSubscribe(), ], ), ); &#125;&#125; 抽取新闻分类 lib/pages/main/categories_widget.dart 123456789101112131415161718192021222324252627282930313233Widget newsCategoriesWidget( &#123;List&lt;CategoryResponseEntity&gt; categories, String selCategoryCode, Function(CategoryResponseEntity) onTap&#125;) &#123; return categories == null ? Container() : SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( children: categories.map&lt;Widget&gt;((item) &#123; return Container( alignment: Alignment.center, height: duSetHeight(52), padding: EdgeInsets.symmetric(horizontal: 8), child: GestureDetector( child: Text( item.title, style: TextStyle( color: selCategoryCode == item.code ? AppColors.secondaryElementText : AppColors.primaryText, fontSize: duSetFontSize(18), fontFamily: 'Montserrat', fontWeight: FontWeight.w600, ), ), onTap: () =&gt; onTap(item), ), ); &#125;).toList(), ), );&#125; 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 工具 json to object quicktype Fiddler 抓包 iconfont 阿里图标库 Iconfont 生成工具 VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 04 YAPI接口管理、RESTful、生成代码、dio封装","date":"2020-03-15T16:00:00.000Z","path":"2020/03/16/flutter-project/flutter-project-news-04-entity-http/","text":"本节目标 前后端分离、契约开发模式 API 接口管理、工具 RESTful 接口规范 TOKEN 安全通讯 自动生成 entity 接口实体类 dio 封装 localstorage 本地存储 密码加密 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.4 1. 接口管理1.1 前后端分离、契约模式 1.2 常见接口管理工具 yapihttps://github.com/YMFE/yapi easymockhttps://github.com/easy-mock/easy-mock RAP2https://github.com/thx/RAP swaggerhttps://swagger.io/ 1.3 yapi 接口管理工具（猫哥推荐）http://yapi.demo.qunar.com/ 输入 输出 1.4 mock 模拟数据 1.5 单元测试 1.6 swagger 导入 2. restful 接口风格 REST wiki 理解 RESTful 架构 阮一峰 RESTful API 设计指南 阮一峰 RESTful API 最佳实践 阮一峰 RESTful 架构详解 2.1 http 操作方式 GET 取数据 POST 新建数据 PUT 更新全部数据 PATCH 更新部分数据 DELETE 删除数据 例子:12345678GET /zoos：列出所有动物园POST /zoos：新建一个动物园GET /zoos/ID：获取某个指定动物园的信息PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）DELETE /zoos/ID：删除某个动物园GET /zoos/ID/animals：列出某个指定动物园的所有动物DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 2.2 state 状态控制 200 OK 400 错误的请求，比如数据结构不对 401 需要登录认证 403 已登录，但是当前资源没有授权 404 找不到，地址错误 500 服务程序错误 502 服务网关错误 503 服务挂了 504 服务网关超时 2.3 优秀实践 Github REST API v3 3. token 安全通讯3.1 基于令牌的安全机制 流程 思路 3.2 Bearer Type Access Token在通讯 HTTP HEADER 头中加入 123GET /resource HTTP/1.1Host: server.example.comAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c 3.3 JWT https://jwt.io/ JSON Web Token 入门教程 4. 自动生成 entity4.1 json_serializable （官方） https://pub.dev/packages/json_serializable 4.2 json to code （猫哥推荐） https://app.quicktype.io/ vscode 插件 https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype 5. dio 封装5.1 单例模式 dio https://pub.dev/packages/dio lib/common/utils/http.dart 单例常见封装方式 123456789class HttpUtil &#123; static HttpUtil _instance = HttpUtil._internal(); factory HttpUtil() =&gt; _instance; Dio dio; CancelToken cancelToken = new CancelToken(); HttpUtil._internal() &#123; ... 5.2 维护 token从本地 storage 中读取 localstorage https://pub.flutter-io.cn/packages/localstorage getLocalOptions() 12345678910Options getLocalOptions() &#123; Options options; String token = StorageUtil().getItem(STORAGE_USER_TOKEN_KEY); if (token != null) &#123; options = Options(headers: &#123; 'Authorization': 'Bearer $token', &#125;); &#125; return options;&#125; 5.3 处理异常格式化，错误信息，进行差别对待 createErrorEntity() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192ErrorEntity createErrorEntity(DioError error) &#123; switch (error.type) &#123; case DioErrorType.CANCEL: &#123; return ErrorEntity(code: -1, message: \"请求取消\"); &#125; break; case DioErrorType.CONNECT_TIMEOUT: &#123; return ErrorEntity(code: -1, message: \"连接超时\"); &#125; break; case DioErrorType.SEND_TIMEOUT: &#123; return ErrorEntity(code: -1, message: \"请求超时\"); &#125; break; case DioErrorType.RECEIVE_TIMEOUT: &#123; return ErrorEntity(code: -1, message: \"响应超时\"); &#125; break; case DioErrorType.RESPONSE: &#123; try &#123; int errCode = error.response.statusCode; // String errMsg = error.response.statusMessage; // return ErrorEntity(code: errCode, message: errMsg); switch (errCode) &#123; case 400: &#123; return ErrorEntity(code: errCode, message: \"请求语法错误\"); &#125; break; case 401: &#123; return ErrorEntity(code: errCode, message: \"没有权限\"); &#125; break; case 403: &#123; return ErrorEntity(code: errCode, message: \"服务器拒绝执行\"); &#125; break; case 404: &#123; return ErrorEntity(code: errCode, message: \"无法连接服务器\"); &#125; break; case 405: &#123; return ErrorEntity(code: errCode, message: \"请求方法被禁止\"); &#125; break; case 500: &#123; return ErrorEntity(code: errCode, message: \"服务器内部错误\"); &#125; break; case 502: &#123; return ErrorEntity(code: errCode, message: \"无效的请求\"); &#125; break; case 503: &#123; return ErrorEntity(code: errCode, message: \"服务器挂了\"); &#125; break; case 505: &#123; return ErrorEntity(code: errCode, message: \"不支持HTTP协议请求\"); &#125; break; default: &#123; // return ErrorEntity(code: errCode, message: \"未知错误\"); return ErrorEntity( code: errCode, message: error.response.statusMessage); &#125; &#125; &#125; on Exception catch (_) &#123; return ErrorEntity(code: -1, message: \"未知错误\"); &#125; &#125; break; default: &#123; return ErrorEntity(code: -1, message: error.message); &#125; &#125;&#125; 6. 登录调用6.1 编写 api 接口 lib/common/apis/user.dart 1234567891011import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';/// 用户class UserAPI &#123; /// 登录 static Future&lt;UserResponseEntity&gt; login(&#123;UserRequestEntity params&#125;) async &#123; var response = await HttpUtil().post('/user/login', params: params); return UserResponseEntity.fromJson(response); &#125;&#125; 6.2 密码加密 crypto https://pub.dev/packages/crypto lib/common/utils/security.dart 1234567891011import 'dart:convert';import 'package:crypto/crypto.dart';/// SHA256String duSHA256(String input) &#123; String salt = 'EIpWsyfiy@R@X#qn17!StJNdZK1fFF8iV6ffN!goZkqt#JxO'; // 加盐 var bytes = utf8.encode(input + salt); var digest = sha256.convert(bytes); return digest.toString();&#125; 6.3 调用接口 lib/pages/sign_in/sign_in.dart 123456789101112131415161718192021// 执行登录操作_handleSignIn() async &#123; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; UserRequestEntity params = UserRequestEntity( email: _emailController.value.text, password: duSHA256(_passController.value.text), ); UserResponseEntity res = await UserAPI.login(params: params); // 写本地 access_token , 不写全局，业务：离线登录 // 全局数据 gUser&#125; YAPI 接口管理http://yapi.demo.qunar.com/ 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 参考 RESTful REST wiki 理解 RESTful 架构 阮一峰 RESTful API 设计指南 阮一峰 RESTful API 最佳实践 阮一峰 RESTful 架构详解 Flutter packages localstorage json_serializable dio crypto VSCode 插件 Awesome Flutter Snippets Paste JSON as Code 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 03 静态路由、组件抽取、登录注册界面","date":"2020-03-11T16:00:00.000Z","path":"2020/03/12/flutter-project/flutter-project-news-03-sign-in-up/","text":"本节目标 静态路由 带阴影的椭圆图标 输入有效性校验 组件抽取方法 通用组件、业务组件 程序目录组织 抽取透明导航栏 toast 提示组件 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.3 1 静态路由1.1 定义静态路由 登录页 lib/pages/sign_in/sign_in.dart 注册页 lib/pages/sign_up/sign_up.dart 静态路由 lib/routes.dart 12345678import 'package:flutter_ducafecat_news/pages/sign_in/sign_in.dart';import 'package:flutter_ducafecat_news/pages/sign_up/sign_up.dart';/// 静态路由var staticRoutes = &#123; \"/sign-in\": (context) =&gt; SignInPage(), // 登录 \"/sign-up\": (context) =&gt; SignUpPage(), // 注册&#125;; 1.2 注册静态路由 lib/main.dart 1234567891011121314151617import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/pages/welcome/welcome.dart';import 'package:flutter_ducafecat_news/routes.dart';void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'ducafecat.tech', home: WelcomePage(), routes: staticRoutes, debugShowCheckedModeBanner: false, ); &#125;&#125; 2 登录界面2.1 维护色彩常量 lib/common/values/colors.dart 12345678910111213141516171819202122232425262728import 'dart:ui';class AppColors &#123; /// 主背景 白色 static const Color primaryBackground = Color.fromARGB(255, 255, 255, 255); /// 主文本 灰色 static const Color primaryText = Color.fromARGB(255, 45, 45, 47); /// 主控件-背景 蓝色 static const Color primaryElement = Color.fromARGB(255, 41, 103, 255); /// 主控件-文本 白色 static const Color primaryElementText = Color.fromARGB(255, 255, 255, 255); // ***************************************** /// 第二种控件-背景色 淡灰色 static const Color secondaryElement = Color.fromARGB(255, 246, 246, 246); /// 第二种控件-文本 浅蓝色 static const Color secondaryElementText = Color.fromARGB(255, 41, 103, 255); // ***************************************** /// 第三种控件-背景色 石墨色 static const Color thirdElement = Color.fromARGB(255, 45, 45, 47);&#125; 2.2 程序结构 lib/pages/sign_in/sign_in.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';class SignInPage extends StatefulWidget &#123; SignInPage(&#123;Key key&#125;) : super(key: key); @override _SignInPageState createState() =&gt; _SignInPageState();&#125;class _SignInPageState extends State&lt;SignInPage&gt; &#123; // logo Widget _buildLogo() &#123; return Container(); &#125; // 登录表单 Widget _buildInputForm() &#123; return Container(); &#125; // 第三方登录 Widget _buildThirdPartyLogin() &#123; return Container(); &#125; // 注册按钮 Widget _buildSignupButton() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( resizeToAvoidBottomInset: false, body: Center( child: Column( children: &lt;Widget&gt;[ _buildLogo(), _buildInputForm(), Spacer(), _buildThirdPartyLogin(), _buildSignupButton(), ], ), ), ); &#125;&#125; 2.3 画带阴影的椭圆图标 lib/pages/sign_in/sign_in.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071// logoWidget _buildLogo() &#123; return Container( width: duSetWidth(110), margin: EdgeInsets.only(top: duSetHeight(40 + 44.0)), // 顶部系统栏 44px child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: duSetWidth(76), width: duSetWidth(76), margin: EdgeInsets.symmetric(horizontal: duSetWidth(15)), child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, top: 0, right: 0, child: Container( height: duSetWidth(76), decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: BorderRadius.all( Radius.circular(duSetWidth(76 * 0.5))), // 父容器的50% ), child: Container(), ), ), Positioned( top: duSetWidth(13), child: Image.asset( \"assets/images/logo.png\", fit: BoxFit.none, ), ), ], ), ), Container( margin: EdgeInsets.only(top: duSetHeight(15)), child: Text( \"SECTOR\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w600, fontSize: duSetFontSize(24), height: 1, ), ), ), Text( \"news\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), height: 1, ), ), ], ), );&#125; 2.4 抽取输入框 lib/common/widgets/input.dart 1234567891011121314151617181920212223242526272829303132333435/// 输入框Widget inputTextEdit(&#123; @required TextEditingController controller, TextInputType keyboardType = TextInputType.text, String hintText, bool isPassword = false, double marginTop = 15,&#125;) &#123; return Container( height: duSetHeight(44), margin: EdgeInsets.only(top: duSetHeight(marginTop)), decoration: BoxDecoration( color: AppColors.secondaryElement, borderRadius: Radii.k6pxRadius, ), child: TextField( controller: controller, keyboardType: keyboardType, decoration: InputDecoration( hintText: hintText, contentPadding: EdgeInsets.fromLTRB(20, 10, 0, 9), border: InputBorder.none, ), style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), maxLines: 1, autocorrect: false, // 自动纠正 obscureText: isPassword, // 隐藏输入内容, 密码框 ), );&#125; 2.5 抽取扁平按钮 lib/common/widgets/button.dart 1234567891011121314151617181920212223242526272829303132333435/// 扁平圆角按钮Widget btnFlatButtonWidget(&#123; @required VoidCallback onPressed, double width = 140, double height = 44, Color gbColor = AppColors.primaryElement, String title = \"button\", Color fontColor = AppColors.primaryElementText, double fontSize = 18, String fontName = \"Montserrat\", FontWeight fontWeight = FontWeight.w400,&#125;) &#123; return Container( width: duSetWidth(width), height: duSetHeight(height), child: FlatButton( onPressed: onPressed, color: gbColor, shape: RoundedRectangleBorder( borderRadius: Radii.k6pxRadius, ), child: Text( title, textAlign: TextAlign.center, style: TextStyle( color: fontColor, fontFamily: fontName, fontWeight: fontWeight, fontSize: duSetFontSize(fontSize), height: 1, ), ), ), );&#125; 2.6 抽取社交登录按钮 lib/common/widgets/button.dart 12345678910111213141516171819202122/// 第三方按钮Widget btnFlatButtonBorderOnlyWidget(&#123; @required VoidCallback onPressed, double width = 88, double height = 44, String iconFileName,&#125;) &#123; return Container( width: duSetWidth(width), height: duSetHeight(height), child: FlatButton( onPressed: onPressed, shape: RoundedRectangleBorder( side: Borders.primaryBorder, borderRadius: Radii.k6pxRadius, ), child: Image.asset( \"assets/images/icons-$iconFileName.png\", ), ), );&#125; 2.7 封装 toast 提示框 lib/common/widgets/toast.dart 123456789101112131415Future&lt;bool&gt; toastInfo(&#123; @required String msg, Color backgroundColor = Colors.black, Color textColor = Colors.white,&#125;) async &#123; return await Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.TOP, timeInSecForIos: 1, backgroundColor: backgroundColor, textColor: textColor, fontSize: duSetFontSize(16), );&#125; 2.8 数据有效性检验 lib/pages/sign_in/sign_in.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293...class _SignInPageState extends State&lt;SignInPage&gt; &#123; //email的控制器 final TextEditingController _emailController = TextEditingController(); //密码的控制器 final TextEditingController _passController = TextEditingController();... // 执行登录操作 _handleSignIn() &#123; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; &#125;... // 登录表单 Widget _buildInputForm() &#123; return Container( width: duSetWidth(295), // height: 204, margin: EdgeInsets.only(top: duSetHeight(49)), child: Column( children: [ // email input inputTextEdit( controller: _emailController, keyboardType: TextInputType.emailAddress, hintText: \"Email\", marginTop: 0, ), // password input inputTextEdit( controller: _passController, keyboardType: TextInputType.visiblePassword, hintText: \"Password\", isPassword: true, ), // 注册、登录 横向布局 Container( height: duSetHeight(44), margin: EdgeInsets.only(top: duSetHeight(15)), child: Row( children: [ // 注册 btnFlatButtonWidget( onPressed: _handleNavSignUp, gbColor: AppColors.thirdElement, title: \"Sign up\", ), Spacer(), // 登录 btnFlatButtonWidget( onPressed: _handleSignIn, gbColor: AppColors.primaryElement, title: \"Sign in\", ), ], ), ), // Spacer(), // Fogot password Container( height: duSetHeight(22), margin: EdgeInsets.only(top: duSetHeight(20)), child: FlatButton( onPressed: () =&gt; &#123;&#125;, child: Text( \"Fogot password?\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.secondaryElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), height: 1, // 设置下行高，否则字体下沉 ), ), ), ), ], ), ); &#125; 3 注册界面3.1 程序结构 lib/pages/sign_up/sign_up.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';class SignUpPage extends StatefulWidget &#123; SignUpPage(&#123;Key key&#125;) : super(key: key); @override _SignUpPageState createState() =&gt; _SignUpPageState();&#125;class _SignUpPageState extends State&lt;SignUpPage&gt; &#123; // logo Widget _buildLogo() &#123; return Container(); &#125; // 注册表单 Widget _buildInputForm() &#123; return Container(); &#125; // 第三方 Widget _buildThirdPartyLogin() &#123; return Container(); &#125; // 有账号 Widget _buildHaveAccountButton() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( resizeToAvoidBottomInset: false, ..., body: Center( child: Column( children: &lt;Widget&gt;[ Divider(height: 1), _buildLogo(), _buildInputForm(), Spacer(), _buildThirdPartyLogin(), _buildHaveAccountButton(), ], ), ), ); &#125;&#125; 3.2 透明导航栏 lib/common/widgets/app.dart 123456789101112131415161718192021/// 透明背景 AppBarWidget transparentAppBar(&#123; @required BuildContext context, List&lt;Widget&gt; actions,&#125;) &#123; return AppBar( backgroundColor: Colors.transparent, elevation: 0, title: Text(''), leading: IconButton( icon: Icon( Icons.arrow_back, color: AppColors.primaryText, ), onPressed: () &#123; Navigator.pop(context); &#125;, ), actions: actions, );&#125; lib/pages/sign_up/sign_up.dart 123456789101112131415161718@overrideWidget build(BuildContext context) &#123; return Scaffold( resizeToAvoidBottomInset: false, appBar: transparentAppBar( context: context, actions: &lt;Widget&gt;[ IconButton( icon: Icon( Icons.info_outline, color: AppColors.primaryText, ), onPressed: () &#123; toastInfo(msg: '这是注册界面'); &#125;, ) ], ), 3.2 注册表单 lib/pages/sign_up/sign_up.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980// 注册表单Widget _buildInputForm() &#123; return Container( width: duSetWidth(295), // height: 204, margin: EdgeInsets.only(top: duSetHeight(49)), child: Column( children: [ // fullName input inputTextEdit( controller: _fullnameController, keyboardType: TextInputType.text, hintText: \"Full name\", marginTop: 0, ), // email input inputTextEdit( controller: _emailController, keyboardType: TextInputType.emailAddress, hintText: \"Email\", ), // password input inputTextEdit( controller: _passController, keyboardType: TextInputType.visiblePassword, hintText: \"Password\", isPassword: true, ), // 创建 Container( height: duSetHeight(44), margin: EdgeInsets.only(top: duSetHeight(15)), child: btnFlatButtonWidget( onPressed: () &#123; if (!duCheckStringLength(_fullnameController.value.text, 5)) &#123; toastInfo(msg: '用户名不能小于5位'); return; &#125; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; Navigator.pop(context); &#125;, width: 295, fontWeight: FontWeight.w600, title: \"Create an account\", ), ), // Spacer(), // Fogot password Container( height: duSetHeight(22), margin: EdgeInsets.only(top: duSetHeight(20)), child: FlatButton( onPressed: _handleSignUp, child: Text( \"Fogot password?\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.secondaryElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), height: 1, // 设置下行高，否则字体下沉 ), ), ), ), ], ), );&#125; 3.3 检验有效性 lib/pages/sign_up/sign_in.dart 12345678910111213141516// 执行注册操作_handleSignUp() &#123; if (!duCheckStringLength(_fullnameController.value.text, 5)) &#123; toastInfo(msg: '用户名不能小于5位'); return; &#125; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; Navigator.pop(context);&#125; 3.4 社交按钮 lib/pages/sign_up/sign_up.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 第三方Widget _buildThirdPartyLogin() &#123; return Container( width: duSetWidth(295), margin: EdgeInsets.only(bottom: duSetHeight(40)), child: Column( children: &lt;Widget&gt;[ // title Text( \"Or sign in with social networks\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), ), ), // 按钮 Padding( padding: EdgeInsets.only(top: duSetHeight(20)), child: Row( children: &lt;Widget&gt;[ btnFlatButtonBorderOnlyWidget( onPressed: () &#123;&#125;, width: 88, iconFileName: \"twitter\", ), Spacer(), btnFlatButtonBorderOnlyWidget( onPressed: () &#123;&#125;, width: 88, iconFileName: \"google\", ), Spacer(), btnFlatButtonBorderOnlyWidget( onPressed: () &#123;&#125;, width: 88, iconFileName: \"facebook\", ), ], ), ), ], ), );&#125; 3.5 返回按钮 lib/pages/sign_up/sign_up.dart 12345678910111213141516171819// 返回上一页_handleNavPop() &#123; Navigator.pop(context);&#125;Widget _buildHaveAccountButton() &#123; return Container( margin: EdgeInsets.only(bottom: duSetHeight(20)), child: btnFlatButtonWidget( onPressed: _handleNavPop, width: 294, gbColor: AppColors.secondaryElement, fontColor: AppColors.primaryText, title: \"I have an account\", fontWeight: FontWeight.w500, fontSize: 16, ), );&#125; 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 参考 widgets fluttertoast 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 02 设计稿适配、加入图片字体资源、欢迎界面","date":"2020-02-26T16:00:00.000Z","path":"2020/02/27/flutter-project/flutter-project-news-02-weclome/","text":"本节目标 加入图片资源 加入字体资源 设计稿适配 编写界面代码的逻辑和组织 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.2 1 加入图片资源1.1 flutter 图片资源规则 官方说明 https://flutter.dev/docs/development/ui/assets-and-images 按这个规则编排，flutter 自动适配分辨率图片 assets 目录 yaml 配置 12assets: - assets/images/ 代码调用 1Image.asset(\"assets/images/logo.png\") 1.2 蓝湖切图 注意选着下 ios 目标，这样会自动切图 1x 2x 3x 三种格式 2 加入字体资源 官方说明 https://flutter.dev/docs/cookbook/design/fonts assets 目录 只上传用到的 ttf 字体，这样能控制打包大小 yaml 配置 123456789fonts: - family: Avenir fonts: - asset: assets/fonts/Avenir-Book.ttf weight: 400 - family: Montserrat fonts: - asset: assets/fonts/Montserrat-SemiBold.ttf weight: 600 代码调用 3 编写欢迎界面3.1 从上到下、从左到右、由大到小 3.2 设计稿适配插件 flutter_screenutil https://pub.flutter-io.cn/packages/flutter_screenutil 按设计稿比例适配 3.3 工具函数 screen.dart 设计稿适配函数 12345678910111213141516import 'package:flutter_screenutil/flutter_screenutil.dart';/// 设置宽度double duSetWidth(double width) &#123; return ScreenUtil().setWidth(width);&#125;/// 设置宽度double duSetHeight(double height) &#123; return ScreenUtil().setHeight(height);&#125;/// 设置字体尺寸double duSetFontSize(double fontSize) &#123; return ScreenUtil().setSp(fontSize);&#125; utils.dart 导出类库 123library utils;export 'screen.dart'; 3.4 常量配置 colors.dart 颜色 123456789101112import 'dart:ui';class AppColors &#123; /// 主文本 static const Color primaryText = Color.fromARGB(255, 45, 45, 47); /// 主控件-背景 static const Color primaryElement = Color.fromARGB(255, 41, 103, 255); /// 主控件-文本 static const Color primaryElementText = Color.fromARGB(255, 255, 255, 255);&#125; values.dart 导出类库 123library values;export 'colors.dart'; 3.5 代码拆分 尽可能的拆分到不同的函数，方便维护 再复杂的业务，可以拆分到不同的组件文件，如 welcome_header_widget.dart welcome_feature_widget.dart welcome_buttons_widget.dart git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.1 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 视频 b 站 油管镜像 参考 flutter_screenutil Adding assets and images Use a custom font © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 01 需求分析、使用蓝湖标注工具、项目目录构建","date":"2020-02-25T16:00:00.000Z","path":"2020/02/26/flutter-project/flutter-project-news-01-setup/","text":"本节目标 需求分析 使用蓝湖平台作为标注工具 构建 Flutter 项目 视频 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.1 1 需求说明 1.1 样式表 颜色 组件 图标 1.2 整理页面+组件列表 页面名称 组件数量 欢迎页 3 登录页 3 首页 6 搜索页 4 新闻页 4 1.3 排查技术点 数据拉取 图片懒加载 图片缓存 新闻、频道、搜索历史数据缓存 2 使用蓝湖平台作为标注工具2.1 上传蓝湖支持 Sketch、Adobe Photoshop、Adobe XD、设计图片 PNG 2.2 标注 2.3 代码提示 2.4 原型展示 3 构建 Flutter 项目3.1 可复用小型项目结构 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.1 视频 b 站 油管镜像 参考 蓝湖-上传设计图 © 猫哥 微信: ducafecat https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 18 基础组件 Stack IndexedStack Positioned","date":"2019-10-11T16:00:00.000Z","path":"2019/10/12/flutter/flutter-18-stack-indexedstack/","text":"本节目标 Stack IndexedStack Positioned Stack 和 IndexStack 都是层叠布局方式，类似于 Android 里的 FrameLayout 帧布局，内部子元素是有层级堆起来的。 Stack 继承自 MultiChildRenderObjectWidget，Stack 也是多子元素的一个组件之一（内部可以包含多个子元素）。 而 IndexedStack 继承自 Stack，扩展了 Stack 的一些特性。它的作用是显示第 index 个子元素，其他子元素都是不可见的。所以 IndexedStack 的尺寸永远是跟最大的子元素尺寸一致。 Stack 的布局行为，是根据子元素是 positioned 还是 non-positioned 来区分的： 对于 positioned 的子元素，它们的位置会根据所设置的 top、bottom、right 或 left 属性来确定，这几个值都是相对于 Stack 的左上角；对于 non-positioned 的子元素，它们会根据 Stack 的 aligment 来设置位置。Stack 布局的子元素层级堆叠顺序：最先布局绘制的子元素在最底层，越后绘制的越在顶层。类似于 Web 中的 z-index。 Stack12345678910111213Stack(&#123; Key key, // 对齐方式，默认是左上角（topStart） this.alignment = AlignmentDirectional.topStart, // 对齐方向 this.textDirection, // 定义如何设置无定位子元素尺寸，默认为loose this.fit = StackFit.loose, // 超过的部分子元素处理方式 this.overflow = Overflow.clip, // 子元素 List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;) alignment 1234567891011121314151617181920212223242526// 左上角static const Alignment topLeft = Alignment(-1.0, -1.0);// 主轴顶部对齐，交叉轴居中static const Alignment topCenter = Alignment(0.0, -1.0);// 主轴顶部对齐，交叉轴偏右static const Alignment topRight = Alignment(1.0, -1.0);// 主轴居中，交叉轴偏左static const Alignment centerLeft = Alignment(-1.0, 0.0);// 居中static const Alignment center = Alignment(0.0, 0.0);// 主轴居中，交叉轴偏右static const Alignment centerRight = Alignment(1.0, 0.0);// 主轴底部对齐，交叉轴偏左static const Alignment bottomLeft = Alignment(-1.0, 1.0);// 主轴底部对齐，交叉轴居中static const Alignment bottomCenter = Alignment(0.0, 1.0);// 主轴底部对齐，交叉轴偏右static const Alignment bottomRight = Alignment(1.0, 1.0); fit 12345678910enum StackFit &#123; // 子元素宽松的取值，可以从min到max的尺寸 loose, // 子元素尽可能的占用剩余空间，取max尺寸 expand, // 不改变子元素的约束条件 passthrough,&#125; overflow 1234567enum Overflow &#123; // 超出部分不会被裁剪，正常显示 visible, // 超出部分会被裁剪 clip,&#125; IndexedStack12345678910IndexedStack(&#123; Key key, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection textDirection, StackFit sizing = StackFit.loose, // 多了一个索引，索引的这个元素显示，其他元素隐藏 this.index = 0, // 子元素 List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;) Positioned12345678910const Positioned(&#123; Key key, this.left, // 上下左右位置 this.top, this.right, this.bottom, this.width, // 宽高 this.height, @required Widget child,&#125;) 代码https://github.com/ducafecat/flutter-learn/tree/master/state_less_ful_app 参考 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 17 基础组件 Fex Expanded","date":"2019-10-10T16:00:00.000Z","path":"2019/10/11/flutter/flutter-17-flex-expanded/","text":"本节目标 expanded flex Flex 组件是 Row 和 Column 的父类，主要用于弹性布局，类似于 HTML 中的 Flex 弹性盒子布局，可以按照一定比例进行分类布局空间。 Flex 继承自 MultiChildRenderObjectWidget，Flex 也是多子元素的一个组件之一（内部可以包含多个子元素）。 Flex 一般和 Expanded 搭配使用，Expanded 组件从名字就可以看出它的特点，就是让子元素扩展占用 Flex 的剩余空间。 Expanded Flex 构造函数 单独看 Flex 组件没有意义，因为一般直接用它的子类 Row 和 Column 来使用。而 Flex 主要是和 Expanded 搭配使用。我们再看下 Expanded 组件构造方法： 123456789101112131415161718192021Flex(&#123; Key key, // 子元素排列方向：横向还是纵向 @required this.direction, this.mainAxisAlignment = MainAxisAlignment.start, this.mainAxisSize = MainAxisSize.max, this.crossAxisAlignment = CrossAxisAlignment.center, this.textDirection, this.verticalDirection = VerticalDirection.down, this.textBaseline, List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;)const Expanded(&#123; Key key, // 占用空间比重、权重 int flex = 1, // 子元素 @required Widget child, &#125;) 例子 Expanded12345678910111213Row( children: &lt;Widget&gt;[ Container( width: 50, color: Colors.cyan, ), Expanded( child: Container( color: Colors.brown, ), ), ],) 例子 Flex12345678910111213141516Column( children: &lt;Widget&gt;[ Expanded( flex: 1, child: Container( color: Colors.cyan, ), ), Expanded( flex: 4, child: Container( color: Colors.brown, ), ) ],) 代码https://github.com/ducafecat/flutter-learn/tree/master/flex_expanded_widget 参考 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 16 基础组件 Row Column","date":"2019-10-09T16:00:00.000Z","path":"2019/10/10/flutter/flutter-16-row-column/","text":"本节目标 Row 行组件 Column 列组件 mainAxisAlignment 主轴 crossAxisAlignment 交叉轴 textDirection 排列方向 verticalDirection 交叉轴起始位置 RowRow 布局组件类似于 Android 中的 LinearLayout 线性布局，它用来做水平横向布局使用，里面的 children 子元素按照水平方向进行排列。 构造 1234567891011121314151617Row(&#123; Key key, // 主轴方向上的对齐方式（Row的主轴是横向轴） MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, // 在主轴方向（Row的主轴是横向轴）占有空间的值，默认是max MainAxisSize mainAxisSize = MainAxisSize.max, // 在交叉轴方向(Row是纵向轴)的对齐方式，Row的高度等于子元素中最高的子元素高度 CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, // 水平方向子元素的排列方向：从左到右排列还是反向 TextDirection textDirection, // 表示纵轴（垂直）的对齐排列方向，默认是VerticalDirection.down，表示从上到下。这个参数一般用于Column组件里 VerticalDirection verticalDirection = VerticalDirection.down, // 字符对齐基线方式 TextBaseline textBaseline, // 子元素集合 List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;) MainAxisAlignment 主轴属性：主轴方向上的对齐方式，Row 是横向轴为主轴 12345678910111213141516171819enum MainAxisAlignment &#123; // 按照主轴起点对齐，例如：按照靠近最左侧子元素对齐 start, // 将子元素放置在主轴的末尾，按照末尾对齐 end, // 子元素放置在主轴中心对齐 center, // 将主轴方向上的空白区域均分，使得子元素之间的空白区域相等，首尾子元素都靠近首尾，没有间隙。有点类似于两端对齐 spaceBetween, // 将主轴方向上的空白区域均分，使得子元素之间的空白区域相等，但是首尾子元素的空白区域为1/2 spaceAround, // 将主轴方向上的空白区域均分，使得子元素之间的空白区域相等，包括首尾子元素 spaceEvenly,&#125; CrossAxisAlignment 交叉属性：在交叉轴方向的对齐方式，Row 是纵向轴。Row 的高度等于子元素中最高的子元素高度 12345678910111213141516enum CrossAxisAlignment &#123; // 子元素在交叉轴上起点处展示 start, // 子元素在交叉轴上末尾处展示 end, // 子元素在交叉轴上居中展示 center, // 让子元素填满交叉轴方向 stretch, // 在交叉轴方向，使得子元素按照baseline对齐 baseline,&#125; MainAxisSize 在主轴方向子元素占有空间的方式，Row 的主轴是横向轴。默认是 max 1234567enum MainAxisSize &#123; // 根据传入的布局约束条件，最大化主轴方向占用可用空间，也就是尽可能充满可用宽度 max, // 与max相反，是最小化占用主轴方向的可用空间 min,&#125; ColumnColumn 是纵向排列子元素 参数用法同上 例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// Row 行组件Widget _buildRow() &#123; return Row( mainAxisAlignment: MainAxisAlignment.center, verticalDirection: VerticalDirection.up, textBaseline: TextBaseline.ideographic, children: &lt;Widget&gt;[ RaisedButton( color: Colors.blue, child: Text('按钮1'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.grey, child: Text('按钮2'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.orange, child: Text('按钮3'), onPressed: () &#123;&#125;, ), ], );&#125;// Column 列组件Widget _buildColumn() &#123; return Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ RaisedButton( color: Colors.blue, child: Text('按钮1'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.grey, child: Text('按钮2'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.orange, child: Text('按钮3'), onPressed: () &#123;&#125;, ), ], );&#125;// Row Column 组件嵌套Widget _buildRowColumn() &#123; return Column( mainAxisAlignment: MainAxisAlignment.center, // crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ Row( // 元素排列顺序 textDirection: TextDirection.rtl, // 主轴方向 mainAxisAlignment: MainAxisAlignment.center, // 交叉轴的起始位置 verticalDirection: VerticalDirection.up, // 交叉轴对齐方式 crossAxisAlignment: CrossAxisAlignment.end, children: &lt;Widget&gt;[ RaisedButton( color: Colors.blue, child: Text('按钮1'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.blue, child: Text('按钮2222222'), onPressed: () &#123;&#125;, ), Container( width: 100, height: 100, color: Colors.yellow, ) ], ) ], );&#125;return MaterialApp( title: 'Material App', home: Scaffold( appBar: AppBar( title: Text('Material App Bar'), ), body: //_buildRow(), // _buildColumn(), _buildRowColumn(), ),); 代码https://github.com/ducafecat/flutter-learn/blob/master/row_column_widget 参考 Row class Column class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 15 基础组件 MaterialApp Scaffold","date":"2019-10-08T16:00:00.000Z","path":"2019/10/09/flutter/flutter-15-scaffold/","text":"本节目标 MaterialApp Scafford Scaffold.of MaterialAppMaterial 风格的程序的构建，如 Key 导航 路由 首页 样式 多语言 调试 构造 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const MaterialApp(&#123; Key key, // 导航键 , key的作用提高复用性能 this.navigatorKey, // 主页 this.home, // 路由 this.routes = const &lt;String, WidgetBuilder&gt;&#123;&#125;, // 初始命名路由 this.initialRoute, // 路由构造 this.onGenerateRoute, // 未知路由 this.onUnknownRoute, // 导航观察器 this.navigatorObservers = const &lt;NavigatorObserver&gt;[], // 建造者 this.builder, // APP 标题 this.title = '', // 生成标题 this.onGenerateTitle, // APP 颜色 this.color, // 样式定义 this.theme, // 主机暗色模式 this.darkTheme, // 样式模式 this.themeMode = ThemeMode.system, // 多语言 本地化 this.locale, // 多语言代理 this.localizationsDelegates, // 多语言回调 this.localeListResolutionCallback, this.localeResolutionCallback, // 支持的多国语言 this.supportedLocales = const &lt;Locale&gt;[Locale('en', 'US')], // 调试显示材质网格 this.debugShowMaterialGrid = false, // 显示性能叠加 this.showPerformanceOverlay = false, // 检查缓存图片的情况 this.checkerboardRasterCacheImages = false, // 检查不必要的setlayer this.checkerboardOffscreenLayers = false, // 显示语义调试器 this.showSemanticsDebugger = false, // 显示debug标记 右上角 this.debugShowCheckedModeBanner = true,&#125;) ScaffoldScaffold 是一个页面布局脚手架，实现了基本的 Material 布局，继承自 StatefulWidget，是有状态组件。我们知道大部分的应用页面都是含有标题栏，主体内容，底部导航菜单或者侧滑抽屉菜单等等构成，那么每次都重复写这些内容会大大降低开发效率，所以 Flutter 提供了 Material 风格的 Scaffold 页面布局脚手架，可以很快地搭建出这些元素部分 构造 1234567891011121314151617181920212223242526272829303132const Scaffold(&#123; Key key, // 菜单栏 this.appBar, // 中间主体内容部分 this.body, // 悬浮按钮 this.floatingActionButton, // 悬浮按钮位置 this.floatingActionButtonLocation, // 悬浮按钮动画 this.floatingActionButtonAnimator, // 固定在下方显示的按钮 this.persistentFooterButtons, // 左侧 侧滑抽屉菜单 this.drawer, // 右侧 侧滑抽屉菜单 this.endDrawer, // 底部菜单 this.bottomNavigationBar, // 底部拉出菜单 this.bottomSheet, // 背景色 this.backgroundColor, // 自动适应底部padding this.resizeToAvoidBottomPadding, // 重新计算body布局空间大小，避免被遮挡 this.resizeToAvoidBottomInset, // 是否显示到底部，默认为true将显示到顶部状态栏 this.primary = true, this.drawerDragStartBehavior = DragStartBehavior.down, &#125;) Scaffold.ofScaffold.of 函数来获取 ScaffoldState 对象 contenxt 是动态获取的 所以需要用 Builder 套一个构造器 12345678static ScaffoldState of(BuildContext context, &#123; bool nullOk = false &#125;) &#123; assert(nullOk != null); assert(context != null); final ScaffoldState result = context.ancestorStateOfType(const TypeMatcher&lt;ScaffoldState&gt;()); if (nullOk || result != null) return result; throw FlutterError( ... 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102return MaterialApp( // APP 标题 title: 'Material App', // APP 颜色 color: Colors.yellow, // 样式 theme: ThemeData(primaryColor: Colors.green), // 主机暗色模式 android 下无效 ios 可以 darkTheme: ThemeData(primaryColor: Colors.yellow), // 调试显示材质网格 debugShowMaterialGrid: false, // 显示性能叠加 showPerformanceOverlay: false, // 检查缓存图片的情况 checkerboardRasterCacheImages: false, // 检查不必要的setlayer checkerboardOffscreenLayers: false, // 显示语义调试器 showSemanticsDebugger: false, // 显示debug标记 右上角 debugShowCheckedModeBanner: false, // 主页 home: Scaffold( // 菜单栏 appBar: AppBar( title: Text('Material App Bar'), ), // 悬浮按钮 floatingActionButton: FloatingActionButton( onPressed: () &#123;&#125;, child: Icon(Icons.add_photo_alternate), ), // 悬浮按钮位置 floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat, // 固定在下方显示的按钮 persistentFooterButtons: [ Text('persistentFooterButtons1'), Text('persistentFooterButtons2'), ], // 左侧 侧滑抽屉菜单 drawer: Drawer( child: Text('data'), ), // 右侧 侧滑抽屉菜单 endDrawer: Drawer( child: Text('data'), ), // 底部菜单 bottomNavigationBar: Text('bottomNavigationBar'), // 底部拉出菜单 bottomSheet: Text('bottomSheet'), // 背景色 backgroundColor: Colors.amberAccent, // 自动适应底部padding resizeToAvoidBottomPadding: true, // 压缩顶部菜单空间 primary: false, // drawerDragStartBehavior: DragStartBehavior.start, // 正文 body: Builder( builder: (BuildContext context) &#123; return Center( child: Container( child: RaisedButton( onPressed: () &#123; // Scaffold.of(context).openDrawer(); Scaffold.of(context).showSnackBar(new SnackBar( content: new Text('Hello!'), )); &#125;, child: Text('data'), ), ), ); &#125;, ), ), //); 代码https://github.com/ducafecat/flutter-learn/blob/master/container_widget 参考 MaterialApp class Scaffold class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 14 基础组件 Container","date":"2019-10-07T16:00:00.000Z","path":"2019/10/08/flutter/flutter-14-container/","text":"本节目标 基础用法 Padding 和 Margin BoxDecoration 装饰 BoxShadow 阴影 RadialGradient 渐变 基础用法Container 是一个组合类容器，它本身不对应具体的 RenderObject，它是 DecoratedBox、ConstrainedBox、Transform、Padding、Align 等组件组合的一个多功能容器，所以我们只需通过一个 Container 组件可以实现同时需要装饰、变换、限制的场景。下面是 Container 的定义： 构造函数 12345678910111213141516171819202122232425Container(&#123; Key key, // 容器子Widget对齐方式 this.alignment, // 容器内部padding this.padding, // 背景色 Color color, // 背景装饰 Decoration decoration, // 前景装饰 this.foregroundDecoration, // 容器的宽度 double width, // 容器的高度 double height, // 容器大小的限制条件 BoxConstraints constraints, // 容器外部margin this.margin, // 变换，如旋转 this.transform, // 容器内子Widget this.child, &#125;) BoxDecoration 装饰123456789101112131415161718const BoxDecoration(&#123; // 背景色 this.color, // 背景图片 this.image, // 边框样式 this.border, // 边框圆角 this.borderRadius, // 阴影 this.boxShadow, // 渐变 this.gradient, // 背景混合模式 this.backgroundBlendMode, // 形状 this.shape = BoxShape.rectangle,&#125;) 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263Container( constraints: BoxConstraints.expand( height: 200.0, ), margin: const EdgeInsets.all(20.0), padding: const EdgeInsets.all(8.0), // 背景色 // color: Colors.teal.shade700, // 子Widget居中 alignment: Alignment.centerLeft, // 子Widget元素 child: Text('Hello World', style: Theme.of(context) .textTheme .display1 .copyWith(color: Colors.white)), // 背景装饰 decoration: BoxDecoration( // 背景色 color: Colors.blueAccent, // 圆角 // borderRadius: BorderRadius.all( // Radius.circular(20.0), // ), // 渐变 gradient: RadialGradient( colors: [Colors.red, Colors.orange], center: Alignment.topLeft, radius: .98, ), // 阴影 boxShadow: [ BoxShadow( blurRadius: 2, offset: Offset(0, 2), color: Colors.blue, ), ], // 背景图 // image: DecorationImage( // image: AssetImage('assets/flutter.png'), // fit: BoxFit.cover, // ), // 背景混合模式 backgroundBlendMode: BlendMode.color, // 形状 shape: BoxShape.circle, ), // 前景装饰 // foregroundDecoration: BoxDecoration( // image: DecorationImage( // image: AssetImage('assets/flutter.png'), // ), // ), // Container旋转 // transform: Matrix4.rotationZ(0.1), ), 代码https://github.com/ducafecat/flutter-learn/blob/master/container_widget 参考 Container class BoxDecoration class RadialGradient class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 12 基础组件 Image Asset NetworkImage","date":"2019-10-06T16:00:00.000Z","path":"2019/10/07/flutter/flutter-12-widget-image/","text":"本节目标 image 构造函数的 5 种方式 加载图片 Asset、NetworkImage 占位图 FadeInImage 头像 CircleAvatar 圆角 ClipRRect 图片 fit 方式 1. Image图片显示组件 支持图像格式 JPEG，PNG，GIF，动画 GIF，WebP，动画 WebP，BMP 和 WBMP 五种构造方式 构造 说明 Image() ImageProvider 适配图片 Image.asset 加载资源图片 Image.file 加载本地图片 Image.network 加载网络图片 Image.memory 加载 Uint8List 资源图片 构造参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128//通过ImageProvider来加载图片const Image(&#123; Key key, // ImageProvider，图像显示源 @required this.image, this.semanticLabel, this.excludeFromSemantics = false, //显示宽度 this.width, //显示高度 this.height, //图片的混合色值 this.color, //混合模式 this.colorBlendMode, //缩放显示模式 this.fit, //对齐方式 this.alignment = Alignment.center, //重复方式 this.repeat = ImageRepeat.noRepeat, //当图片需要被拉伸显示的时候，centerSlice定义的矩形区域会被拉伸，类似.9图片 this.centerSlice, //类似于文字的显示方向 this.matchTextDirection = false, //图片发生变化后，加载过程中原图片保留还是留白 this.gaplessPlayback = false, //图片显示质量 this.filterQuality = FilterQuality.low, &#125;)// 加载网络图片，封装类：NetworkImageImage.network( //路径 String src, &#123; Key key, //缩放 double scale = 1.0, this.semanticLabel, this.excludeFromSemantics = false, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, this.filterQuality = FilterQuality.low, Map&lt;String, String&gt; headers, &#125;)// 加载本地File文件图片，封装类：FileImageImage.file( //File对象 File file, &#123; Key key, double scale = 1.0, this.semanticLabel, this.excludeFromSemantics = false, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, this.filterQuality = FilterQuality.low, &#125;)// 加载本地资源图片,例如项目内资源图片// 需要把图片路径在pubspec.yaml文件中声明一下，如：// assets:// - packages/fancy_backgrounds/backgrounds/background1.png// 封装类有：AssetImage、ExactAssetImageImage.asset( //文件名称，包含路径 String name, &#123; Key key, // 用于访问资源对象 AssetBundle bundle, this.semanticLabel, this.excludeFromSemantics = false, double scale, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, String package, this.filterQuality = FilterQuality.low, &#125;)// 加载Uint8List资源图片/从内存中获取图片显示// 封装类：MemoryImageImage.memory( // Uint8List资源图片 Uint8List bytes, &#123; Key key, double scale = 1.0, this.semanticLabel, this.excludeFromSemantics = false, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, this.filterQuality = FilterQuality.low, &#125;) 29 种混合模式 123enum BlendMode &#123; clear,src,dst,srcOver,dstOver,srcIn,dstIn,srcOut,dstOut,srcATop,dstATop,xor,plus，modulate,screen,overlay,darken,lighten,colorDodge,colorBurn,hardLight,softLight,difference,exclusion,multiply,hue,saturation,color,luminosity,&#125; 主要的混合模式效果如下 缩放 enum BoxFit 枚举对象 名称 说明 fill 图片按照指定的大小在 Image 中显示，拉伸显示图片，不保持原比例，填满 Image。 contain 以原图正常显示为目的，如果原图大小大于 Image 的 size，就按照比例缩小原图的宽高，居中显示在 Image 中。如果原图 size 小于 Image 的 size，则按比例拉升原图的宽和高，填充 Image 一边并居中显示。 cover 以原图填满 Image 为目的，如果原图 size 大于 Image 的 size，按比例缩小，居中显示在 Image 上。如果原图 size 小于 Image 的 size，则按比例拉升原图的宽和高，填充 Image 居中显示。 fitWidth 以原图正常显示为目的，如果原图宽大小大于（小于）Image 的宽，就缩小（放大）原图的宽与 Image 一致，居中显示在 Image 中。 fitHeight 以原图正常显示为目的，如果原图高大小大于（小于）Image 的高，就缩小（放大）原图的高与 Image 一致，居中显示在 Image 中。 none 保持原图的大小，显示在 Image 的中心。当原图的 size 大于 Image 的 size 时，多出来的部分被截掉。 scaleDown 以原图正常显示为目的，如果原图大小大于 Image 的 size，就按照比例缩小原图的宽高，居中显示在 Image 中。如果原图 size 小于 Image 的 size，则不做处理居中显示图片。 示例 pubspec.yaml 12assets: - assets/images/ main.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// assetsText('assets'),Image.asset(_assetImg),// 网络读取Text('网络读取'),Image.network(_imgUrl),// NetworkImageText('NetworkImage'),Image(image: NetworkImage(_imgUrl)),// 占位图Text('占位图'),FadeInImage( fadeInCurve: Curves.bounceIn, placeholder: AssetImage(_assetImg), image: NetworkImage(_imgUrl)),// 原型头像Text('原型头像'),CircleAvatar( backgroundColor: Colors.brown.shade800, child: Text('圆角图片'), backgroundImage: AssetImage(_assetHeaderImg), radius: 50.0),// 图标Text('图标'),ImageIcon( NetworkImage(_imgUrl), size: 100,),// ClipRRect 圆角Text('ClipRRect 圆角'),ClipRRect( child: Image.network(_imgUrl), borderRadius: BorderRadius.all(Radius.circular(20)),),// 圆角矩形框Text('圆角矩形框'),Container( width: 200, height: 80, decoration: BoxDecoration( shape: BoxShape.rectangle, borderRadius: BorderRadius.circular(10.0), image: DecorationImage( image: NetworkImage(_imgUrl), fit: BoxFit.cover), ),),// 椭圆图Text('椭圆图'),ClipOval( child: Image.network( _imgUrl, scale: 8.5, ),),// 混色Text('混色'),Image.asset( _assetHeaderImg, color: Colors.amber, colorBlendMode: BlendMode.dstATop,),// 裁剪Text('裁剪'),Image.asset( _assetImg, width: 400, height: 50, fit: BoxFit.cover,), 代码https://github.com/ducafecat/flutter-learn/tree/master/image_widget 参考 Image class NetworkImage class FadeInImage class ClipRRect class ClipOval class ImageIcon class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 13 基础组件 Button FlatButton RaisedButton OutlineButton","date":"2019-10-06T16:00:00.000Z","path":"2019/10/07/flutter/flutter-13-widget-button/","text":"本节目标常用按钮操作 FlatButton（扁平化） RaisedButton（有按下状态） OutlineButton（有边框） MaterialButton（Material 风格） RawMaterialButton（没有应用 style 的 Material 风格按钮） FloatingActionButton（悬浮按钮） Button在 Flutter 中 Button 有很多封装好的 Widget 类： FlatButton（扁平化） RaisedButton（有按下状态） OutlineButton（有边框） MaterialButton（Material 风格） RawMaterialButton（没有应用 style 的 Material 风格按钮） FloatingActionButton（悬浮按钮） BackButton（返回按钮） IconButton（Icon 图标） CloseButton（关闭按钮） ButtonBar（可以排列放置按钮元素的） 其中大部分的 Button 都是基于 RawMaterialButton 进行的修改定制而成的。 构造函数 12345678910111213141516171819202122232425262728293031const FlatButton(&#123; Key key, // 点击事件 @required VoidCallback onPressed, // 高亮改变，按下和抬起时都会调用的方法 ValueChanged&lt;bool&gt; onHighlightChanged, // 定义按钮的基色，以及按钮的最小尺寸，内部填充和形状的默认值 ButtonTextTheme textTheme, // 按钮文字的颜色 Color textColor, // 按钮禁用时的文字颜色 Color disabledTextColor, // 按钮背景颜色 Color color, // 按钮禁用时的背景颜色 Color disabledColor, // 按钮按下时的背景颜色 Color highlightColor, // 点击时，水波动画中水波的颜色，不要水波纹效果设置透明颜色即可 Color splashColor, // 按钮主题，默认是浅色主题，分为深色和浅色 Brightness colorBrightness, // 按钮的填充间距 EdgeInsetsGeometry padding, // 外形 ShapeBorder shape, Clip clipBehavior = Clip.none, MaterialTapTargetSize materialTapTargetSize, // 按钮的内容，里面可以放子元素 @required Widget child, &#125;) 示例 后退、关闭 12345678ButtonBar( children: &lt;Widget&gt;[ BackButton( color: Colors.orange, ), CloseButton(), ],), 扁平按钮 FlatButton 12345678910111213141516ButtonBar( children: &lt;Widget&gt;[ FlatButton( child: Text('扁平按钮'), onPressed: () &#123; print('我是扁平按钮'); &#125;, ), FlatButton( child: Text( '扁平按钮 禁用', ), onPressed: null, ), ],), 扁平带图标按钮 FlatButton.icon 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ FlatButton.icon( label: Text('带图标扁平按钮'), icon: Icon(Icons.add_call, size: 18.0), onPressed: () &#123;&#125;, ), FlatButton.icon( icon: const Icon(Icons.add_call, size: 18.0), label: const Text('带图标扁平按钮 禁用'), onPressed: null, ), ],), 带框按钮 OutlineButton 123456789101112ButtonBar( children: &lt;Widget&gt;[ OutlineButton( onPressed: () &#123;&#125;, child: Text('带框按钮'), ), OutlineButton( onPressed: null, child: Text('带框按钮 禁用'), ), ],), 带框图标按钮 OutlineButton.icon 123456789101112131415ButtonBar( children: &lt;Widget&gt;[ OutlineButton.icon( label: Text('带框图标按钮'), icon: Icon(Icons.add_to_photos, size: 18.0), onPressed: () &#123;&#125;, ), OutlineButton.icon( disabledTextColor: Colors.orange, icon: Icon(Icons.add_to_photos, size: 18.0), label: Text('带框图标按钮 禁用'), onPressed: null, ), ],), 立体按钮 RaisedButton 123456789101112ButtonBar( children: &lt;Widget&gt;[ RaisedButton( child: Text('立体按钮'), onPressed: () &#123;&#125;, ), RaisedButton( child: Text('立体按钮 禁用'), onPressed: null, ), ],), 立体按钮带图标 RaisedButton.icon 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ RaisedButton.icon( icon: Icon(Icons.add, size: 18.0), label: Text('立体按钮带图标'), onPressed: () &#123;&#125;, ), RaisedButton.icon( icon: Icon(Icons.add, size: 18.0), label: Text('立体按钮带图标 禁用'), onPressed: null, ), ],), Material 按钮 MaterialButton 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ MaterialButton( child: Text('Material按钮'), onPressed: () &#123; // Perform some action &#125;, ), MaterialButton( child: Text('Material按钮 禁用'), onPressed: null, ), ],), RawMaterial 按钮 RawMaterialButton 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ RawMaterialButton( child: Text('RawMaterial按钮'), onPressed: () &#123; // Perform some action &#125;, ), RawMaterialButton( child: Text('RawMaterial按钮 禁用'), onPressed: null, ), ],), 浮动按钮 FloatingActionButton 123456789101112131415161718ButtonBar( children: &lt;Widget&gt;[ FloatingActionButton( child: const Icon(Icons.add), heroTag: '浮动按钮', onPressed: () &#123; // Perform some action &#125;, tooltip: '浮动按钮提示1', ), FloatingActionButton( child: const Icon(Icons.add), onPressed: null, heroTag: '浮动按钮 禁用', tooltip: '浮动按钮提示2', ), ],), 代码https://github.com/ducafecat/flutter-learn/blob/master/button_widget 参考 FlatButton class RaisedButton class OutlineButton class MaterialButton class RawMaterialButton class FloatingActionButton class BackButton class IconButton class CloseButton class ButtonBar class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 11 基础组件 Text RichText TextSpan","date":"2019-10-05T16:00:00.000Z","path":"2019/10/06/flutter/flutter-11-widget-text/","text":"本节目标 Text 构造参数 TextStyle 样式构造参数 Text.rich、RichText、TextSpan 处理复杂字符显示 TextText Widget，从名字也可以看出，在 Flutter 里是用来负责显示文本信息的一个组件，功能类似于 Android 的 TextView、HTML 的一些文本标签等等，属于基础组件。 基础用法 1Text('hello word!'); 构造函数 Text 1234567891011121314151617181920212223242526const Text( //要显示的文字内容 this.data, &#123; //key类似于id Key key, //文字显示样式和属性 this.style, this.strutStyle, //文字对齐方式 this.textAlign, //文字显示方向 this.textDirection, //设置语言环境 this.locale, //是否自动换行 this.softWrap, //文字溢出后处理方式 this.overflow, //字体缩放 this.textScaleFactor, //最大显示行数 this.maxLines, //图像的语义描述，用于向Andoid上的TalkBack和iOS上的VoiceOver提供图像描述 this.semanticsLabel, &#125;) TextStyle style 属性比较常用，传入的是 TextStyle 对象，我们细看下它可以配置哪些属性样式。 12345678910111213141516171819202122232425262728293031323334353637383940const TextStyle(&#123; //是否继承父类组件属性 this.inherit = true, //字体颜色 this.color, //文字大小，默认14px this.fontSize, //字体粗细 this.fontWeight, //字体样式,normal或italic this.fontStyle, //字母间距，默认为0，负数间距缩小，正数间距增大 this.letterSpacing, //单词间距，默认为0，负数间距缩小，正数间距增大 this.wordSpacing, //字体基线 this.textBaseline, //行高 this.height, //设置区域 this.locale, //前景色 this.foreground, //背景色 this.background, //阴影 this.shadows, //文字划线，下换线等等装饰 this.decoration, //划线颜色 this.decorationColor, //划线样式，虚线、实线等样式 this.decorationStyle, //描述信息 this.debugLabel, //字体 String fontFamily, List&lt;String&gt; fontFamilyFallback, String package, &#125;) 示例 颜色、大小、样式 123456Text('字体24下划线', style: TextStyle( color: Colors.blue, // 蓝色 fontSize: 24, // 24 号字体 decoration: TextDecoration.underline, // 下划线 )), 缩放、加粗 12345678Text('放大加粗', textScaleFactor: 1.2, // 放大 1.2 style: TextStyle( fontWeight: FontWeight.bold, // 加粗 bold fontSize: 24, // 24 号字体 color: Colors.green, // 绿色 decoration: TextDecoration.none, // 不要下滑线 )), 文字溢出 1234567891011Text( '缩放，Each line here is progressively more opaque. The base color is material.Colors.black, and Color.withOpacity is used to create a derivative color with the desired opacity. The root TextSpan for this RichText widget is explicitly given the ambient DefaultTextStyle, since RichText does not do that automatically. The inner TextStyle objects are implicitly mixed with the parent TextSpans TextSpan.style.', textScaleFactor: 1.0, textAlign: TextAlign.center, softWrap: true, maxLines: 3, // 3 行 overflow: TextOverflow.ellipsis, // 剪切 加省略号 style: TextStyle( fontWeight: FontWeight.bold, fontSize: 18, )), Text.rich、RichText 、TextSpan构造函数可以在 Text 里加入一些 Span 标签，对某部分文字进行个性化改变样式，如加入 @ 符号，加入超链接、变色、加表情等等。Text.rich(…) 等价于 RichText(…)，用哪个都可以。 12345678910111213141516171819202122232425262728293031const Text.rich( // 样式片段标签TextSpan this.textSpan, &#123; Key key, this.style, this.strutStyle, this.textAlign, this.textDirection, this.locale, this.softWrap, this.overflow, this.textScaleFactor, this.maxLines, this.semanticsLabel, &#125;)const RichText(&#123; Key key, // 样式片段标签TextSpan @required this.text, this.textAlign = TextAlign.start, this.textDirection, this.softWrap = true, this.overflow = TextOverflow.clip, this.textScaleFactor = 1.0, this.maxLines, this.locale, this.strutStyle, &#125;) textSpan 类型是 TextSpan ，其它参数同上 12345678910const TextSpan(&#123; //样式片段 this.style, //要显示的文字 this.text, //样式片段TextSpan数组，可以包含多个TextSpan this.children, //用于手势进行识别处理,如点击跳转 this.recognizer, &#125;) 示例 拼接字符 123456789101112131415161718192021Text.rich(TextSpan( text: 'TextSpan', style: TextStyle( color: Colors.red, fontSize: 24.0, ), children: &lt;TextSpan&gt;[ new TextSpan( text: 'aaaaa', style: new TextStyle( color: Colors.blueGrey, ), ), new TextSpan( text: 'bbbbbb', style: new TextStyle( color: Colors.cyan, ), ), ],)), 添加交互 123456789101112131415Text.rich(TextSpan( children: &lt;TextSpan&gt;[ new TextSpan( text: 'Tap点击', style: new TextStyle( color: Colors.blueGrey, ), recognizer: new TapGestureRecognizer() ..onTap = () &#123; //增加一个点击事件 print('被点击了'); &#125;, ), ],)), recognizer 用来识别事件 TapGestureRecognizer tap 点击手势 代码https://github.com/ducafecat/flutter-learn/tree/master/text_widget 参考 Text class TextSpan class RichText class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 见闻 - 01 Flutter 1.9 正式发布 实现三端编译发布 android ios web","date":"2019-09-15T16:00:00.000Z","path":"2019/09/16/flutter-daily/flutter-daily-01-update-sdk19/","text":"本节目标 在 web 平台运行 Flutter macOS Catalina 和 iOS 13 支持 全新的 Material widget 全球语言支持 Dart 2.5 发布 工具链优化 在 web 平台运行 Flutter 更新 SDK 12&gt; flutter channel master&gt; flutter upgrade 启用 web 支持 123&gt; flutter config --enable-web&gt; flutter devices 更新现有项目 1&gt; flutter create . 创建新项目 1&gt; flutter create myapp 运行 web 1&gt; flutter run -d chrome 编译 web 1&gt; flutter build web Flutter Widget Livebook一个在网页上展示 widget 运行效果的网站，它使用 Flutter 开发，并直接运行在网页上。 https://flutter-widget-livebook.blankapp.org/basics/introduction/ Panache则是一款为 Flutter 创建主题的工具，您可以下载创建好的主题，然后将其直接添加到代码中。 https://rxlabz.github.io/panache_web/#/ macOS Catalina 和 iOS 13 支持 iOS 13 的拖拽式工具栏 https://github.com/flutter/flutter/pull/35829 触感反馈 https://github.com/flutter/flutter/pull/37724 开发者已经提交了 pull request https://github.com/flutter/flutter/issues/35541 启用 Bitcode 实验性支持 https://github.com/flutter/flutter/wiki/Creating-an-iOS-Bitcode-enabled-app-(experimental) 全新的 Material widget ToggleButtons 示例 它能为您的应用按钮实现更加多元化的设计——不论是单选还是多选，选择至少一个或是零个，尖角还是圆角、粗边或细边，图标或文本——ToggleButtons widget 全都可以满足。 https://github.com/csells/flutter_toggle_buttons ColorFiltered 示例 允许您更改子 widget 树的颜色，用来灵活的调整配色服务。 https://github.com/csells/flutter_color_filter 全球语言支持还新增了南非语 (Afrikaans)、祖鲁语 (Zulu) 等 24 种语言的支持。 Dart 2.5 发布 ML 代码补全 https://github.com/dart-lang/sdk/wiki/Previewing-Dart-code-completions-powered-by-machine-learning 用于 Dart-C 互操作的 ffi 外部函数接口 改进常量表达式 1234const Object i = 3;const list = [i as int];const set = &#123;if (list is List&lt;int&gt;) ...list&#125;;const map = &#123;if (i is int) i: \"int\"&#125;; 工具链优化 从 Flutter 1.9 开始，iOS 新项目默认使用 Swift 语言，而非 Objective-C；Android 新项目则默认使用 Kotlin，而非 Java。 Swift 编译瘦身 改善错误信息提示 https://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;mid=2652050546&amp;idx=1&amp;sn=2c81e067ac34da40f89558f426e97af6&amp;chksm=808cb437b7fb3d2127431c7858beb3a03a29186c1c6a78aa0a2e97cd895e756b7ee3367ec935&amp;scene=21#wechat_redirect 参考 Building a web application with Flutter flutter_web Flutter 1.9 正式发布！| 全平台创新开发体验 腾讯视频链接 Flutter Widget Livebook 更精准更简洁: Flutter 改进错误信息提示 Panache iOS 13 的拖拽式工具栏 触感反馈 开发者已经提交了 pull request 启用 Bitcode 实验性支持&gt;) ToggleButtons ColorFiltered ML 代码补全 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 10 stateless stateful 有状态、无状态组件","date":"2019-08-17T16:00:00.000Z","path":"2019/08/18/flutter/flutter-10-stateless-stateful-widget/","text":"本节目标 stateless、stateless 差别 动手封装两个 widget 来体验 点击切换 点击切换 安装插件Awesome Flutter Snippets 第一步：编写 statefull 主程序12345678910111213141516171819202122import 'package:flutter/material.dart';main(List&lt;String&gt; args) &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Text('data'), ), ); &#125;&#125; 第二步：编写 stateless 图片显示1234567891011121314151617import 'package:flutter/material.dart';class MyPicView extends StatefulWidget &#123; final String picName; MyPicView(&#123;Key key, this.picName&#125;) : super(key: key); _MyPicViewState createState() =&gt; _MyPicViewState();&#125;class _MyPicViewState extends State&lt;MyPicView&gt; &#123; @override Widget build(BuildContext context) &#123; return Container( child: Image.asset('assets/$&#123;widget.picName&#125;'), ); &#125;&#125; 第三步：编写切换图片路径状态1234567891011121314151617181920212223242526272829303132333435363738394041import 'package:flutter/material.dart';import 'my_pic_view.dart';main(List&lt;String&gt; args) &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; String fileName = 'p1.jpg'; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Column( children: &lt;Widget&gt;[ MyPicView( picName: fileName, ), RaisedButton( onPressed: () &#123; String tmpFileName = 'p1.jpg'; if (fileName == 'p1.jpg') &#123; tmpFileName = 'p2.jpg'; &#125; setState(() &#123; fileName = tmpFileName; &#125;); &#125;, child: Text('切换图片'), ) ], )), ); &#125;&#125; 代码https://github.com/ducafecat/flutter-learn/tree/master/state_less_ful_app 参考 插件 Awesome Flutter Snippets Flutter Stateless and Stateful Widget Flutter: Stateful vs Stateless Widget © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 09 一切都是 widget","date":"2019-08-16T16:00:00.000Z","path":"2019/08/17/flutter/flutter-09-widgets/","text":"本节目标 整体架构设计 层次分类 整体架构设计架构图 源码目录…/sdk/flutter/packages/flutter/lib 目录功能 名称 说明 Foundation 基础部分 Animation 动画 Painting 边框绘制、颜色、裁剪图像处理、画笔、插值器等跟绘制、图像、装饰相关的类 Gestures 事件类、长按、触摸、放大等等 Rendering 渲染 Widget 的基础库 Widget 依赖 Rendering 层进行构建，Widget 是 Flutter 的核心 Material Android 平台的风格 Cupertino iOS 平台风格的扁平化 widget 分类主要分为 StatelessWidget 和 StatefulWidget 官方分类 基础组件 Widget（Basics）： Container、Row、Column、Image、Text、Icon、RaisedButton、Scaffold、Appbar、FlutterLogo、Placeholder Material Components： App 结构和导航类 Scaffold、Appbar、BottomNavigationBar、TabBar、TabBarView、MaterialApp、WidgetsApp、Drawer、SliverAppBar 按钮类 RaisedButton、FloatingActionButton、FlatButton、IconButton、DropdownButton、PopupMenuButton、ButtonBar 输入和选择类 TextField、Checkbox、Raido、Switch、Slider、Date&amp;Time Pickers 对话框和控制面板类 SimpleDialog、AlertDialog、BottomSheet、ExpansionPanel、SnackBar）； 信息显示类（Image、Icon、Chip、Tooltip、DataTable、Card、LinearProgressIndicator、CircularProgressIndicator、GridView 布局类 ListTile、Stepper、Divider Cupertino （iOS-style widgets）： CupertinoActionSheet、CupertinoActivityIndicator、CupertinoAlertDialog、CupertinoButton、CupertinoDatePicker、CupertinoDialog、CupertinoDialogAction、CupertinoFullscreenDialogTransition、CupertinoPageScaffold、CupertinoPageTransition、CupertinoPicker、CupertinoPopupSurface、CupertinoSegmentedControl、CupertinoSlider、CupertinoSwitch、CupertinoNavigationBar、CupertinoTabBar、CupertinoTabScaffold、CupertinoTabView、CupertinoTextField、CupertinoTimerPicker Layout： 单个子元素的布局 Widget Container、Padding、Center、Align、FittedBox、AspectRatio、ConstrainedBox、Baseline、FractionallySizedBox、IntrinsicHeight、IntrinsicWidth、LimitedBox、Offstage、OverflowBox、SizedBox、SizedOverflowBox、Transform、CustomSingleChildLayout 多个子元素的布局 Widget Row、Column、Stack、IndexedStack、GridView、Flow、Table、Wrap、ListBody、CustomMultiChildLayout、LayoutBuilder、ListView、Expanded Text 文本显示类： Text、RichText、DefaultTextStyle Assets、图片、Icons 类： Image、Icon、RawImage、AssetBundle Input 输入类： Form、FormField、RawKeyboardListener 动画和 Motion 类： AnimatedContainer、AnimatedCrossFade、Hero、AnimatedBuilder、DecoratedBoxTransition、FadeTransition、PositionedTransition、RotationTransition、ScaleTransition、SizeTransition、SlideTransition、AnimatedDefaultTextStyle、AnimatedListState、AnimatedModalBarrier、AnimatedOpacity、AnimatedPhysicalModel、AnimatedPositioned、AnimatedSize、AnimatedWidget、AnimatedWidgetBaseState 交互模型类： 触摸交互 Draggable、LongPressDraggable、GestureDetector、DragTarget、Dismissible、IgnorePointer、AbsorbPointer、Scrollable 路由导航 Hero、Navigator 样式类： Padding、Theme、MediaQuery 绘制和效果类： Transform、Opacity、DecoratedBox、FractionalTranslation、RotatedBox、ClipOval、ClipPath、ClipRect、CustomPaint、BackdropFilter Async 异步模型类： FutureBuilder、StreamBuilder 滚动类： GridView、ListView、NestedScrollView、SingleChildScrollView、Scrollable、Scrollbar、CustomScrollView、NotificationListener、ScrollConfiguration、RefreshIndicator、PageView 辅助功能类： Semantics、MergeSemantics、ExcludeSemantics widget 地图 img 参考 Widget catalog © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 08 开发规范","date":"2019-08-15T16:00:00.000Z","path":"2019/08/16/flutter/flutter-08-standard/","text":"本节目标 Dart 规范 Flutter 阿里规范 VSCode 格式化 右键菜单 当 Save 时自动格式化 规范精要使用小写加下划线来命名库和源文件1234library peg_parser.source_scanner;import 'file_system.dart';import 'slider_menu.dart'; 优先使用小驼峰法作为常量命名1234567const pi = 3.14;const defaultTimeout = 1000;final urlScheme = RegExp('^([a-z]+):');class Dice &#123; static final numberGenerator = Random();&#125; 所有流控制结构，请使用大括号12345if (isWeekDay) &#123; print('Bike to work!');&#125; else &#123; print('Go dancing or read a book!');&#125; Doc 注释使用///文档注释来记录成员和类型。 12/// The number of characters in this chunk when unsplit.int get length =&gt; ... 导入 lib 下文件库，统一指定包名，避免过多的123```dartpackage:flutter_go/使用相邻字符串连接字符串文字123raiseAlarm( 'ERROR: Parts of the spaceship are on fire. Other ' 'parts are overrun by martians. Unclear which are which.'); 优先使用模板字符串1'Hello, $name! You are $&#123;year - birth&#125; years old.'; 在不需要的时候，避免使用花括号12'Hi, $name!'\"Wear your wildest $decade's outfit.\" 不要使用.length 查看集合是否为空12if (lunchBox.isEmpty) return 'so hungry...';if (words.isNotEmpty) return words.join(' '); 遍历一个序列123for (var person in people) &#123; ...&#125; 不要显式地将变量初始化为空123456789101112int _nextId;class LazyId &#123; int _id; int get id &#123; if (_nextId == null) _nextId = 0; if (_id == null) _id = _nextId++; return _id; &#125;&#125; 在不需要的时候不要用 this1234567891011class Box &#123; var value; void clear() &#123; update(null); &#125; void update(value) &#123; this.value = value; &#125;&#125; 尽可能使用初始化的形式1234class Point &#123; num x, y; Point(this.x, this.y);&#125; 不要使用 new12345678910Widget build(BuildContext context) &#123; return Row( children: [ RaisedButton( child: Text('Increment'), ), Text('Click!'), ], );&#125; 优先使用 async/await 代替原始的 futures123456789101112Future&lt;int&gt; countActivePlayers(String teamName) async &#123; try &#123; var team = await downloadTeam(teamName); if (team == null) return 0; var players = await team.roster; return players.where((player) =&gt; player.isActive).length; &#125; catch (e) &#123; log.error(e); return 0; &#125;&#125; 当异步没有任何用处时，不要使用它123Future afterTwoThings(Future first, Future second) &#123; return Future.wait([first, second]);&#125; 参考 Dart 官方规范 阿里 Flutter Go 代码开发规范 0.1.0 版 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 07 我们的第一个程序 hello word","date":"2019-08-11T16:00:00.000Z","path":"2019/08/12/flutter/flutter-07-first-app-helloword/","text":"本节目标 程序基础结构 pubspec.yaml 配置 布局，样式使用 目录文件结构 名称 说明 lib Flutter 代码 android Android 项目 ios IOS 项目 test 测试目录 .idea IDEA 编辑器配置 pubspec.yaml Flutter 配置文件 pubspec.lock 包版本锁定 build 编译目录 一、编写最基础 helloword 步骤 1231. 第一步 runApp(...)2. 第二步 MaterialApp(...)3. 第三步 指定 widget Text(...) 代码 1234567891011import 'package:flutter/material.dart';main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: Text('hello word!'), ));&#125; 二、采用界面脚手架 标题 侧栏 正文12345678910111213141516171819202122main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: // 第四步 页面脚手架 Scaffold( // 第五步 程序标题 appBar: AppBar( title: Text('我们第一个程序'), ), // 第六步 侧栏 drawer: Drawer( child: Text('侧栏'), ), // 正文 body: Text('hello word!'), ), ));&#125; 三、布局 样式 图片12345678910111213141516171819202122232425262728293031323334353637main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: // 第四步 页面脚手架 Scaffold( // 第五步 程序标题 appBar: AppBar( title: Text('我们第一个程序'), ), // 第六步 侧栏 drawer: Drawer( child: Text('侧栏'), ), // 正文 body: // 居中 Center( child: Column( children: &lt;Widget&gt;[ // 载入图片 Image.asset('assets/p1.jpg'), // 文字 Text( '雷神', // 样式 style: TextStyle(fontSize: 28, color: Colors.red), ), ], ), ), ), ));&#125; 代码https://github.com/ducafecat/flutter-learn/tree/master/helloword 参考 Write your first Flutter app, part 1 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 06 Windows10 下配置 Flutter 开发环境","date":"2019-08-10T16:00:00.000Z","path":"2019/08/11/flutter/flutter-06-setup-windows10/","text":"本节目标 安装 JDK 1.8 安装 Flutter SDK 安装 Android Studio 安装 VSCode 配置 VSCode 插件 配置 Android 插件 配置 Android 模拟器 环境介绍 window10 专业版 jdk1.8 flutter 1.7.8 vscode 1.37.1 android studio 3.5 1. 安装 JDK 1.8 下载地址 https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 选取 windows x64 2. 安装 Flutter SDK 下载地址 https://flutter.dev/docs/development/tools/sdk/releases?tab=windows#windows 解压 我放在了 c:\\sdk\\flutter 配置环境变量 12345678# PathC:\\sdk\\flutter\\bin# FLUTTER_STORAGE_BASE_URLhttps://storage.flutter-io.cn# PUB_HOSTED_URLhttps://pub.flutter-io.cn 执行检查 1Flutter doctor 3. 安装 Android Studio 下载 https://developer.android.com/studio/ 配置 SDK 包 配置 SDK Tools 配置环境变量 123456# PathC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk\\toolsC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk\\platform-tools# ANDROID_HOMEC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk 安装 Android 证书 123flutter doctor --android-licenses一路按 Y 4. 安装 VSCode 下载地址 https://code.visualstudio.com/ 5. 配置 VSCode 插件 Flutter 必装 Awesome Flutter Snippets Paste JSON as Code bloc 6. 配置 Android 插件 flutter 7. 配置 Android 模拟器 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 05 配置 IDE Macos","date":"2019-06-20T16:00:00.000Z","path":"2019/06/21/flutter/flutter-05-setup-ide-macos/","text":"本节目标 配置 VSCode 配置 Intellij IDEA 配置 Android Studio Dart DevTools 调试视图 Hot Reload 热更新 配置 VSCode下载安装https://code.visualstudio.com/ 安装插件 Dart 安装插件 Flutter 安装插件 Awesome Flutter Snippets 创建项目 flutter: new project 创建完成 创建模拟器 被提示需要 android 配置 Install Sources for Android 27 安装模拟器镜像 android-27 Google Play Intel x86 Atom System Image (system-images;android-27;google_apis_playstore;x86) x86 模拟器加速器 Intel x86 Emulator Accelerator (HAXM installer) android 模拟器 ios 模拟器 F5 运行 打开 Dart DevTools 配置 Intellij IDEA安装http://www.jetbrains.com/ 安装插件 Flutter new project 选择 flutter 注意 选择 sdk 位置 选项 点击 more 更多设置 module name 为英文 运行 调试器 inspector outline 配置 Android Studio安装插件 Flutter 创建项目 主面板 导航 运行同 IDEA 效果 hot reload热更新已支持 参考 Flutter SDK MacOS install Set up an editor Hot reload © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 04 配置 Android 开发环境 MacOS","date":"2019-06-19T16:00:00.000Z","path":"2019/06/20/flutter/flutter-04-setup-android-macos/","text":"本节目标 安装 Android Studio 配置 Flutter 连接 Android Studio 配置 Android 模拟器 在 Android 模拟器中运行 Flutter App 1. 安装 Android Studiohttps://developer.android.google.cn/studio 1.2 “unable to access android sdk add-on list” 点击取消 unable to access android sdk add-on list 1.3 自定义安装，全选项目 all 1.4 配置模拟器 进去 AVD Manage 不要选最新的模拟器镜像 配置模拟器参数 大家机器好点的，就多给点内存和空间吧，这样模拟器运行的快些 运行模拟器 2. 配置环境变量12345678&gt; vi ~/.bash_profile# androidexport ANDROID_HOME=~/Library/Android/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/toolssource ~/.bash_profile 3. 运行 Flutter3.1 创建项目 crate &amp; run 1234567891011121314151617181920&gt; flutter create my_app&gt; cd my_app&gt; flutter runUsing hardware rendering with device Android SDK built for x86. If you get graphics artifacts, consider enabling software renderingwith \"--enable-software-rendering\".Launching lib/main.dart on Android SDK built for x86 in debug mode...Initializing gradle... 1.4sResolving dependencies... 2.2sRunning Gradle task 'assembleDebug'...Running Gradle task 'assembleDebug'... Done 2.2sBuilt build/app/outputs/apk/debug/app-debug.apk.Installing build/app/outputs/apk/app.apk... 2.2sD/EGL_emulation( 5614): eglMakeCurrent: 0xe2c05300: ver 3 0 (tinfo 0xe2c03350)Syncing files to device Android SDK built for x86... 2,067ms (!)🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on Android SDK built for x86 is available at: http://127.0.0.1:64823/uqW8O20byg8=/For a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\". 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 03 配置 IOS 开发环境 MacOS","date":"2019-06-18T16:00:00.000Z","path":"2019/06/19/flutter/flutter-03-setup-ios-macos/","text":"本节目标 安装 xcode 配置 flutter 连接 xcode 在 IOS 模拟器中运行 flutter app 1. 安装 XCode安装 Xcode 9.0 以上版本 (访问 Apple网站 下载或者，Mac App Store 方式安装). 2. 第一次启动 XCode 安装所需组件 3. 配置 Xcode command-line tools1234&gt; sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer检验 打印 license&gt; sudo xcodebuild -license 4. 启动模拟器1open -a Simulator 5. 创建 Flutter 项目5.1 create &amp; run1234567&gt; flutter create my_app&gt; cd my_app&gt; flutter run🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on iPhone Xʀ is available at: http://127.0.0.1:62341/ztmtijcoJrI=/For a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\". 模拟器运行 5.2 vm 报告1http://127.0.0.1:62341/ztmtijcoJrI=/#/vm vm 6. 部署到真机6.1 安装软件包1234567&gt; brew update&gt; brew install --HEAD usbmuxd&gt; brew link usbmuxd&gt; brew install --HEAD libimobiledevice&gt; brew install ideviceinstaller ios-deploy cocoapods&gt; pod setup 安装 homebrew pod setup 很慢的问题 手动下载 git clone https://github.com/CocoaPods/Specs 复制 ~/.cocoapods/repos/Specs-master 执行 pod update 复制 master 下的 .git 到 Specs-master 停止 pod update 重命名 Specs-master 为 master 进入项目的 ios 目录下 pod install 成功 6.2 配置AppStore开发者账号1open ios/Runner.xcworkspace Add Account 开发者登录 https://developer.apple.com/cn/programs/ 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 02 安装 SDK MacOS","date":"2019-06-17T16:00:00.000Z","path":"2019/06/18/flutter/flutter-02-install-sdk-macos/","text":"本节目标 采用 git 方式安装 SDK 编译代码 flutter tool 检查环境 flutter doctor 1. 安装 SDK1.1 方式一：下载SDK包 SDK包下载 解压到 ~/Documents/sdk/flutter 1.2 方式二：git 拉取源码123&gt; mkdir ~/Documents/sdk&gt; cd ~/Documents/sdk&gt; git clone -b stable https://github.com/flutter/flutter.git 1.3 持续升级下次更新直接进入目录升级 123&gt; cd ~/Documents/sdk/flutter&gt; git pull&gt; flutter --version 2. 配置环境变量12345678910&gt; vi ~/.bash_profile# flutter , 注意没有单引号export PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin# 以下两行适合国内export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn&gt; source ~/.bash_profile 3. zsh 用户修改配置文件123456&gt; vi ~/.zshrc最后一行加入source ~/.bash_profile重启终端生效 4. 命令行运行 flutter123456789101112131415161718192021222324252627&gt; flutter doctorxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrunBuilding flutter tool... ╔════════════════════════════════════════════════════════════════════════════╗ ║ Welcome to Flutter! - https://flutter.dev ║ ║ ║ ║ The Flutter tool anonymously reports feature usage statistics and crash ║ ║ reports to Google in order to help Google contribute improvements to ║ ║ Flutter over time. ║ ║ ║ ║ Read about data we send with crash reports: ║ ║ https://github.com/flutter/flutter/wiki/Flutter-CLI-crash-reporting ║ ║ ║ ║ See Google's privacy policy: ║ ║ https://www.google.com/intl/en/policies/privacy/ ║ ║ ║ ║ Use \"flutter config --no-analytics\" to disable analytics and crash ║ ║ reporting. ║ ╚════════════════════════════════════════════════════════════════════════════╝Doctor summary (to see all details, run flutter doctor -v):Oops; flutter has exited unexpectedly.Crash report written to /Users/ducafecat/flutter_01.log;please let us know at https://github.com/flutter/flutter/issues. 第一次运行会进行 build CommandLineTools 工具推荐，先安装 xcode （早晚都要安装的） 然后 Terminal 运行 xcode-select –install xcode-select --install 5. 检查环境 flutter doctor123456789101112131415161718192021222324252627282930313233343536373839&gt; flutter doctorDoctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel stable, v1.5.4-hotfix.2, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)[!] Android toolchain - develop for Android devices (Android SDK version 29.0.0) ✗ Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses[✗] iOS toolchain - develop for iOS devices ✗ Xcode installation is incomplete; a full installation is necessary for iOS development. Download at: https://developer.apple.com/xcode/download/ Or install Xcode via the App Store. Once installed, run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run: brew update brew install --HEAD usbmuxd brew link usbmuxd brew install --HEAD libimobiledevice brew install ideviceinstaller ✗ ios-deploy not installed. To install: brew install ios-deploy ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side's plugin code that responds to your plugin usage on the Dart side. Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.dev/platform-plugins To install: brew install cocoapods pod setup[!] Android Studio (version 3.4) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] VS Code (version 1.35.1) ✗ Flutter extension not installed; install from https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter[!] Connected device ! No devices available! Doctor found issues in 6 categories. 6. 查看版本 version12345&gt; flutter --versionFlutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.gitFramework • revision 7a4c33425d (9 weeks ago) • 2019-04-29 11:05:24 -0700Engine • revision 52c7a1e849Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5) 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 01 前言","date":"2019-06-16T16:00:00.000Z","path":"2019/06/17/flutter/flutter-01-introduce/","text":"本节目标 介绍 Flutter 课程计划 如果获取课程资料、代码、视频 适合人群 泛移动开发人员 原生移动开发人员 前端开发人员 跨平台: 移动、Web、桌面、嵌入 跨平台 Flutter 框架结构 Flutter Framework Framework 这一层使用 Dart 语言开发，它实现了一套基础库。 Foundation、Animation、Painting、Gestures 为 Dart 实现的 UI 层，提供动画、手势及绘制。 Rendering 渲染层，依赖 UI 层，在运行时 Rendering 层会构建一个 Widget 树，当有变化时，会更具一定的算法计算出有变化的部分，然后更新 Widget 树。 Widgets 层是 Flutter 提供的的一套基础组件库，在基础组件库之上，Flutter 还提供了 Material 和 Cupertino 两种视觉风格的组件库。 Flutter Engine Skia 是一个开源的二维图形库，提供各种常用的 API，并可在多种软硬件平台上运行。谷歌 Chrome 浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。 Skia 由谷歌出资管理，任何人都可基于 BSD 免费软件许可证使用 Skia。Skia 开发团队致力于开发其核心部分， 并广泛采纳各方对于 Skia 的开源贡献。 因为没有使用原生的 UI 和绘制框架，所以才保证了 Flutter 的高性能体验。 Skia官网 image-20190626154959148 Skia是一个开源的二维图形库，提供各种常用的API，并可在多种软硬件平台上运行。谷歌Chrome浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。 Skia由谷歌出资管理，任何人都可基于BSD免费软件许可证使用Skia。Skia开发团队致力于开发其核心部分， 并广泛采纳各方对于Skia的开源贡献。 Flutter for Webhttps://flutter.dev/web 通过对比，可以发现，web框架层和mobile的几乎一模一样。因此只需要重新实现一下引擎和嵌入层，不用变动Flutter API就可以完全可以将UI代码从Android / IOS Flutter App移植到Web。Dart能够使用Dart2Js编译器把Dart代码编译成Js代码。大多数原生App元素能够通过DOM实现，DOM实现不了的元素可以通过Canvas来实现。 Fuchsia OS 许中兴博士演讲：Fuchsia OS 简介及幻灯片下载 桌面系统 手机OS 平板 华为荣耀Play Flutter 特点 多平台支持 iOS Android Linux 未来 Fuchsia OS 原生用户界面 120fps 超高性能 两套成熟 UI 库 Material Design 和 Cupertino 响应式的框架 Redux、RxDart、BloC 业务和 UI 分离 Flutter 支持 Hot Reload 国内阿里咸鱼、腾讯、京东、国外的谷歌等公司都已经有上线产品在使用 Flutter 开发 showcase Flutter 横向对比 Cordova 基于 WebView 渲染，遇到动画、大列表 性能慢 React Native、Weex 基于虚拟 DOM 生成原生组件，比 Cordova 这类的性能好，但是遇到负责项目会有叠加 view 过多性能瓶颈 Flutter 自己封装的组件和渲染引擎，在设计上肯定会比 RN 这类的性能好，用的自家 Dart 语言深度编译，不需要像 RN 桥接 JavaScript 进行通讯，也会在性能上有优势 Flutter 生态资源 Flutter应用展示 官方包管理平台 awesome 课程计划123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118- 开篇写在最前 - Flutter 介绍 - 学习方法推荐 - 课程计划- 开发环境搭建和工具配置 - Flutter 环境配置 MacOS - IOS 环境配置 MacOS - Android 环境配置 MacOS - Flutter 环境配置 Windows10 - Android 环境配置 Windows10 - 开发工具的选择 VSCode、IDEA、AndroidStudio- 基础知识 - 项目及配置文件介绍 - 开发规范 - 一切都是 widget - StatelessWidget、StatefulWidget - 框架组件 MaterialApp、Scaffold - 布局组件 Container、Center、Row、Column - 基础组件 Text、Image、Button - 路由导航 Routes、Navigator - 生命周期- 快熟上手实战 - 新闻应用程序结构分析 - 使用布局组件搭建新闻列表界面 - 采用第三方 Http Dio 程序包读取数据 - 解析 Json 到 Modle - 使用自定义组件展示新闻行信息 - 点击新闻条路由导航到详情页 - 采用Web容器展示新闻内容 - 上拉刷新、下拉加载新闻列表 - 定制 Loading 效果 - 采用矢量图标库 - 采用 Sqlite 实现新闻列表首页缓存 - Redux 管理主题样式 - 加入应用启动画面 - 打包 Android APK 文件 - 打包 IOS IPA 文件- 基础组件 - Widget 与 Element - StatelessWidget - StatefulWidget - Text - Image - Button - AppBar - AlertDialog - Icon - TextField - Form - Switch - Checkbox- 布局组件 - 线性 Row - 线性 Column - 弹性 Flex - 弹性 Expanded - 层叠 Stack - 层叠 IndexedStack - 层叠 Positioned - 流式 Flow - 流式 Wrap- 容器组件 - Scaffold - Container - Center - Padding - ConstrainedBox - SizedBox - DecoratedBox - Transform- 导航组件 - TabBar - NavigationBar - PageView- 可滚动组件 - CustomScrollView - ListView - GridView - ScrollView - ExpansionPanel - ScrollController- 表格组件 - Table - DataTables- 功能型组件 - WillPopScope - InheritedWidget - 主题 Theme- 事件处理与通知 - 事件处理 - 手势识别 - 全局事件总线 - 通知消息- 自定义 Widget - 组合其它 Widget - 自绘 CustomPaint、Canvas- 进阶 - 文件操作 - Http 请求 - WebSocket 连接 - Json 解析 - 包与插件 - 国际化 - 数据库缓存 - Redux 参考 flutter.io skia showcase An open list of apps built with Flutter Flutter: a Portable UI Framework for Mobile, Web, Embedded, and Desktop © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://blog.ducafecat.tech/tags/flutter/"}]},{"title":"Dart语言学习 - 38 代码分格 API 设计 effective-design","date":"2019-01-28T08:44:13.000Z","path":"2019/01/28/dart/dart-38-effective-design/","text":"本节目标 API 设计 环境 Dart 2.1.0 要 使用一致的术语12345pageCount // 一个成员变量updatePageCount() // 和 pageCount 名字一致。toSomething() // 和 Iterable 的 toList() 一致。asSomething() // 和 List 的 asMap() 一致。Point // 广为人知的概念。 避免 缩写1234pageCountbuildRectanglesIOStreamHttpRequest 推荐 把最具描述性的名词放到最后1234pageCount // A count (of pages).ConversionSink // A sink for doing conversions.ChunkedConversionSink // A ConversionSink that's chunked.CssFontFaceRule // A rule for font faces in CSS. 考虑 尽量让代码看起来像普通的句子12345678// \"If errors is empty...\"if (errors.isEmpty) ...// \"Hey, _subscription, cancel!\"_subscription.cancel();// \"Get the monsters where the monster has claws.\"monsters.where((monster) =&gt; monster.hasClaws); 推荐 使用非命令式动词短语命名布尔类型的变量和属性123456isEmptyhasElementscanCloseclosesWindowcanShowPopuphasShownPopup 考虑 省略命名布尔参数的动词123Isolate.spawn(entryPoint, message, paused: false)new List.from(elements, growable: true)new RegExp(pattern, caseSensitive: false) 推荐 使用命令式动词短语来命名带有副作用的函数或者方法1234list.add()queue.removeFirst()window.refresh()connection.downloadData() 考虑 使用名词短语或者非命令式动词短语命名返回数据为主要功能的方法或者函数12list.elementAt(3)string.codeUnitAt(4) 推荐 使用 to___() 来命名把对象的状态转换到一个新的对象的函数123list.toSet()stackTrace.toString()dateTime.toLocal() 使用 as___() 来命名把原来对象转换为另外一种表现形式的函数123list.asMap()bytes.asFloat32List()subscription.asFuture() 避免 在方法或者函数名称中描述参数12list.add(element)map.remove(key) 避免 定义使用简单的方法可以替代的只有一个成员的抽象类和 Java 不同的是， Dart 支持一等方法（first-class functions）、闭包和优雅的语法来使用它们。 如果你需要的只是一个回调函数，使用方法即可。 如果你定义了一个类，里面只有一个名字无意义的函数， 例如 call 或者 invoke， 这种情况最好用方法替代 1typedef bool Predicate(item); 避免 定义只包含静态成员的类12345DateTime mostRecent(List&lt;DateTime&gt; dates) &#123; return dates.reduce((a, b) =&gt; a.isAfter(b) ? a : b);&#125;const _favoriteMammal = 'weasel'; 然后，这条规则并不是强制的。对于一些常量或者枚举型的类型， 使用类来把相关的成员组织到一起可能也是合理的。当然， 使用库也是同样合理的。1234567class Color &#123; static const red = '#f00'; static const green = '#0f0'; static const blue = '#00f'; static const black = '#000'; static const white = '#fff';&#125; 推荐 使用构造函数而不是静态函数来创建对象1234567class Point &#123; num x, y; Point(this.x, this.y); Point.polar(num theta, num radius) : x = radius * math.cos(theta), y = radius * math.sin(theta);&#125; 要 使用 getter 来定义访问属性的操作如果函数的名字带有 get 前缀，或者是一个像 length 或者 size 这样 的名称，这种情况通常最好定义该函数为一个 getter。 当全部满足下面的条件的时候，你应该使用一个 getter： 没有参数。返回一个值没有副作用 调用一个 getter 不应该改变对象外部可见的状态 (内部缓存和延时初始化的状态可以发生变化) 如果对象的状态在多次调用同一个 getter 之间没有发生变化，则 多次调用同一个 getter 应该返回同一个值 123rectangle.widthcollection.isEmptybutton.canShow 要 对于本质上为修改对象属性的函数要使用 setter12rectangle.width = 3;button.visible = false; 不要 为 setter 指定返回类型1set foo(Foo value) &#123;...&#125; 推荐 为私有成员提供类型在公开的 API 上使用类型可以帮助使用你的库的用户。同样， 是私有代码上使用类型，可以帮助你的你的同事或者代码维护者。 另外，在私有成员上使用类型，对于将来自己查看代码 也有帮助。 12345678class CallChainVisitor &#123; final SourceVisitor _visitor; final Expression _target; void _writeCall(Expression call) &#123; ... &#125; ...&#125; 避免 在方法表达式上使用类型1var names = people.map((person) =&gt; person.name); 避免 在没必要的地方使用 dynamic 类型在大部分 Dart 代码中，类型可以忽略，这样该参数类型会自动设置为 dynamic。 所以没必要手动指定类型为 dynamic 的， 只需要省略类型即可。 12345lookUpOrDefault(String name, Map map, defaultValue) &#123; var value = map[name]; if (value != null) return value; return defaultValue;&#125; 避免 使用 Function 类型 正确 1bool isValidString(String value, bool predicate(String string)) &#123; ... &#125; 错误 1bool isValidString(String value, Function predicate) &#123; ... &#125; 要 使用 Object 来替代 dynamic 来表示可以接受任意对象1234567891011// Accepts any object.void log(Object object) &#123; print(object.toString());&#125;// Only accepts bool or String, which can't be expressed in a type annotation.bool convertToBool(arg) &#123; if (arg is bool) return arg; if (arg is String) return arg == 'true'; throw new ArgumentError('Cannot convert $arg to a bool.');&#125; 考虑使用命名参数或者命名构造函数以及命名常量来清晰 的表明您的意图：1234new Task.oneShot();new Task.repeating();new ListBox(scroll: true, showScrollbars: true);new Button(ButtonState.enabled); 对于 setter 则没有这个要求，应为 setter 的名字已经明确的 表明了值所代表的意义12listBox.canScroll = true;button.isEnabled = false; 避免 把用户想要忽略的参数放到位置可选参数的前列123456789101112131415161718String.fromCharCodes(Iterable&lt;int&gt; charCodes, [int start = 0, int end])DateTime(int year, [int month = 1, int day = 1, int hour = 0, int minute = 0, int second = 0, int millisecond = 0, int microsecond = 0])Duration( &#123;int days: 0, int hours: 0, int minutes: 0, int seconds: 0, int milliseconds: 0, int microseconds: 0&#125;) 避免 使用强制无意义的参数1string.substring(start) 要 使用包含开始位置并且不包含结束位置的范围参数如果你定义一个函数或者方法让用户从基于位置排序的集合中 选择一些元素，需要一个开始位置索引和结束位置索引分别制定开始 元素的位置以及结束元素的位置。结束位置通常是指 大于最后一个元素的位置的值。 核心库就是这样定义的，所以最好和核心库保持一致 12[0, 1, 2, 3].sublist(1, 3) // [1, 2].'abcd'.substring(1, 3) // \"bc\". 不要 在自定义 == 操作符中判断 null语言规范表明了这种判断已经自动执行了，你的 == 自定义操作符只有当 右侧对象不为 null 的时候才会执行。 正确 123456class Person &#123; final String name; operator ==(other) =&gt; other is Person &amp;&amp; name == other.name;&#125; 错误 12345678class Person &#123; final String name; operator ==(other) =&gt; other != null &amp;&amp; other is Person &amp;&amp; name == other.name;&#125; 参考 design © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 37 代码分格 最佳实践 effective-usage","date":"2019-01-28T07:30:46.000Z","path":"2019/01/28/dart/dart-37-effective-usage/","text":"本节目标 最佳实践 环境 Dart 2.1.0 使用相邻的字符串字面量定义来链接字符串123raiseAlarm( 'ERROR: Parts of the spaceship are on fire. Other ' 'parts are overrun by martians. Unclear which are which.'); 使用插值的形式来组合字符串和值1'Hello, $name! You are $&#123;year - birth&#125; years old.'; 避免在字符串插值中使用多余的大括号123'Hi, $name!'\"Wear your wildest $decade's outfit.\"'Wear your wildest $&#123;decade&#125;s outfit.' 尽可能的使用集合字面量来定义集合12var points = [];var addresses = &#123;&#125;; 如果有必要还可以提供泛型类型12var points = &lt;Point&gt;[];var addresses = &lt;String, Address&gt;&#123;&#125;; 不要 使用 .length 来判断集合是否为空12if (lunchBox.isEmpty) return 'so hungry...';if (words.isNotEmpty) return words.join(' '); 使用高阶（higher-order）函数来转换集合数据123var aquaticNames = animals .where((animal) =&gt; animal.isAquatic) .map((animal) =&gt; animal.name); 避免 在 Iterable.forEach() 中使用函数声明形式123for (var person in people) &#123; ...&#125; forEach() 方法通常在 JavaScript 中使用，原因是系统内置的 for-in 循环并不能提供期望的结果。 相反，在 Dart 中如果需要遍历一个集合，通常使用循环语句 如果你只想在每个集合元素上调用一个已经定义好的函数，则可以使用 forEach() 函数1people.forEach(print); 要 用方法声明的形式来给方法起个名字 正确 12345void main() &#123; localFunction() &#123; ... &#125;&#125; 错误示范 12345void main() &#123; var localFunction = () &#123; ... &#125;;&#125; 不要 显式的把变量初始化为 null123456789101112int _nextId;class LazyId &#123; int _id; int get id &#123; if (_nextId == null) _nextId = 0; if (_id == null) _id = _nextId++; return _id; &#125;&#125; 在 Dart 中没有初始化的变量和域会自动的 初始化为 null。在语言基本就保证了该行为的可靠性。 在 Dart 中没有 “未初始化的内存”这个概念。所以添加 = null 是多余的。 不要 创建没必要的 getter 和 setter12345678910```# 段落 1- 正确```dartclass Box &#123; var contents;&#125; 错误 1234567class Box &#123; var _contents; get contents =&gt; _contents; set contents(value) &#123; _contents = value; &#125;&#125; 推荐 使用 final 关键字来限定只读属性123class Box &#123; final contents = [];&#125; 考虑 用 =&gt; 来实现只有一个单一返回语句的函数123get width =&gt; right - left;bool ready(num time) =&gt; minTime == null || minTime &lt;= time;containsValue(String value) =&gt; getValues().contains(value); 要 尽可能的在定义变量的时候初始化其值1234567class Folder &#123; final String name; final List&lt;Document&gt; contents = []; Folder(this.name); Folder.temp() : name = 'temporary';&#125; 要 尽可能的使用初始化形式1234class Point &#123; num x, y; Point(this.x, this.y);&#125; 要 把 super() 调用放到构造函数初始化列表之后调用123View(Style style, List children) : _children = children, super(style) &#123; 要 使用 rethrow 来重新抛出捕获的异常123456try &#123; somethingRisky();&#125; catch(e) &#123; if (!canHandle(e)) rethrow; handle(e);&#125; 推荐 使用 async/await 而不是直接使用底层的特性123456789Future&lt;bool&gt; doAsyncComputation() async &#123; try &#123; var result = await longRunningCalculation(); return verifyResult(result.summary); &#125; catch(e) &#123; log.error(e); return false; &#125;&#125; 不要 在没有有用效果的情况下使用 async123Future afterTwoThings(Future first, second) &#123; return Future.wait([first, second]);&#125; 参考 usage © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 36 - 代码分格 文档 effective-documentation","date":"2019-01-28T07:15:00.000Z","path":"2019/01/28/dart/dart-36-effective-documentation/","text":"本节目标 文档分格 环境 Dart 2.1.0 按照句子的格式来格式化评论12// Not if there is nothing before it.if (_chunks.isEmpty) return false; 如果第一个单词不是大小写相关的标识符，则首字母要大写。使用标点符号结尾 （句号、感叹号、问号）。对于所有的注释都是这样要求的：文档注释、 行内注释、甚至 TODO 注释。即使是一句话的一半也需要如此。 使用块注释作为解释说明1234greet(name) &#123; // Assume we have a valid name. print('Hi, $name!');&#125; 使用 /// 文档注释来注释成员和类型12/// The number of characters in this chunk when unsplit.int get length =&gt; ... 把第一个语句定义为一个段落12345/// Defines a flag.////// Throws an [ArgumentError] if there is already an option named [name] or/// there is already an option using abbreviation [abbr]. Returns the new flag.Flag addFlag(String name, String abbr) &#123; ... &#125; 注释文档中的第一个段落应该是简洁的、面向用户的注释。例如下面的示例， 通常不是一个完成的语句。 用第三人称来开始函数或者方法的文档注释12345/// Returns `true` if every element satisfies the [predicate].bool all(bool predicate(T element)) &#123; ... &#125;/// Starts the stopwatch if not already running.void start() &#123; ... &#125; 使用名词短语来开始变量、getter、setter 的注释12345/// The current day of the week, where `0` is Sunday.int weekday;/// The number of checked buttons on the page.int get checkedCount &#123; ... &#125; 注释文档应该表述这个属性是什么。虽然 getter 函数会做些计算， 但是也要求这样，调用者关心的是其结果而 不是如何计算的 使用名词短语来开始库和类型注释1234/// A chunk of non-breaking output text terminated by a hard or soft newline.////// ...class Chunk &#123; ... &#125; 在程序中，类的注释通常是最重要的文档。 类的注释描述了类型的不变性、介绍其使用的术语、 提供类成员使用的上下文信息。为类提供一些注释可以让 其他类成员的注释更易于理解和编写。 在文档注释中添加示例代码1234/// Returns the lesser of two numbers.////// min(5, 3); // 3.num min(num a, num b) &#123; ... &#125; 人类非常擅长从示例中抽象出实质内容，所以即使提供 一行最简单的示例代码都可以让 API 更易于理解。 而 Dart 把参数、返回值等描述放到文档注释中，并使用方括号来引用 以及高亮这些参数和返回值12345/// Defines a flag.////// Throws an [ArgumentError] if there is already an option named [name] or/// there is already an option using abbreviation [abbr]. Returns the new flag.Flag addFlag(String name, String abbr) &#123; ... &#125; 把注释文档放到注解之前123/// _Deprecated: Use [newMethod] instead._@deprecatedoldMethod(); 使用 “this” 而不是 “the” 来引用实例成员1234567class Box &#123; /// The value this wraps. var _value; /// True if this box contains a value. bool get hasValue =&gt; _value != null;&#125; 参考 documentation © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 35 - 代码分格 effective style","date":"2019-01-28T06:43:12.000Z","path":"2019/01/28/dart/dart-35-effective-style/","text":"本节目标 代码分格 环境 Dart 2.1.0 使用 UpperCamelCase 风格来命名类型名称12345class SliderMenu &#123; ... &#125;class HttpRequest &#123; ... &#125;typedef bool Predicate&lt;T&gt;(T value); 使用 lowercase_with_underscores 风格来命名库和文件名名字1234library peg_parser.source_scanner;import 'file_system.dart';import 'slider_menu.dart'; 使用 lowercase_with_underscores 风格命名导入的前缀1234import 'dart:json' as json;import 'dart:math' as math;import 'package:javascript_utils/javascript_utils.dart' as js_utils;import 'package:js/js.dart' as js; 使用 lowerCamelCase 风格来命名其他的标识符1234567var item;HttpRequest httpRequest;align(clearItems) &#123; // ...&#125; 使用 lowerCamelCase 来命名常量1234567const pi = 3.14;const defaultTimeout = 1000;final urlScheme = new RegExp('^([a-z]+):');class Dice &#123; static final numberGenerator = new Random();&#125; 把 “dart:” 导入语句放到其他导入语句之前12345import 'dart:async';import 'dart:html';import 'package:bar/bar.dart';import 'package:foo/foo.dart'; 把 “package:” 导入语句放到相对导入语句之前1234import 'package:bar/bar.dart';import 'package:foo/foo.dart';import 'a.dart'; 把”第三方” “package:” 导入语句放到其他语句之前。12345import 'package:bar/bar.dart';import 'package:foo/foo.dart';import 'package:myapp/io.dart';import 'package:myapp/util.dart'; 把导出（export）语句放到所有导入语句之后的部分1234import 'src/error.dart';import 'src/string_source.dart';export 'src/error.dart'; 按照字母顺序来排序每个部分中的语句12345import 'package:bar/bar.dart';import 'package:foo/bar.dart';import 'a.dart';import 'a/b.dart'; 在所有的控制结构上使用大括号12345if (true) &#123; print('sanity');&#125; else &#123; print('opposite day!');&#125; 当只有 if 语句没有 else 语句并且 所有语句可以放到一行的时候，可以省略大括号1if (arg == null) return defaultValue; 通常用于当条件满足的时候就跳出 if 或者 返回的情况。 但是对于其他表达式，如果可以放到一行中， 也可以这样使用1if (parameter == null) parameter = defaultValue; 在每个语句或者声明后面添加一个空行123456main() &#123; first(statement); second(statement);&#125;anotherDeclaration() &#123; ... &#125; 在关键字 operator 后面添加一个空格1bool operator ==(other) =&gt; ...; 在二元和三元操作符之间添加空格1234average = (a + b) / 2;largest = a &gt; b ? a : b;if (obj is! SomeType) print('not SomeType');optional([parameter = defaultValue]) &#123; ... &#125; 不要 在一元操作符前后添加空格12!conditionindex++ 把开始的大括号 ({) 放到同一行上123456789class Foo &#123; method() &#123; if (true) &#123; // ... &#125; else &#123; // ... &#125; &#125;&#125; 在函数和方法体的 { 之前添加一个空格123getEmptyFn(a) &#123; return () &#123;&#125;;&#125; 把三元操作符放到多个表达式的下一行开始位置123return someCondition ? whenTrue : whenFalse; 把 . 放到下一行开头当表达式换行的时候12someVeryLongVariable.withAVeryLongProperty .aMethodOnThatObject(); 把构造函数初始化列表中的每个参数和值都放到同一行123456MyClass() : firstField = 'some value', secondField = 'another', thirdField = 'last' &#123; // ...&#125; 当无法在一行写完集合的时候，把每个元素都用集合定义的方式来表达12345678910mapInsideList([ &#123; 'a': 'b', 'c': 'd' &#125;, &#123; 'a': 'b', 'c': 'd' &#125;,]); 用两个空格来缩进代码块和集合体123456789if (condition) &#123; print('hi'); [ long, list, literal ];&#125; 缩进 switch case 两个空格， case 体四个空格123456789switch (fruit) &#123; case 'apple': print('delish'); break; case 'durian': print('stinky'); break;&#125; 只少使用两个空格来缩进多行函数级联调用1234buffer ..write('Hello, ') ..write(name) ..write('!'); 使用四个空格来缩进同一行的换行12345someLongObject.aReallyLongMethodName(longArg, anotherLongArg, wrappedToNextLine);bobLikes() =&gt; isDeepFried || (hasPieCrust &amp;&amp; !vegan) || containsBacon; 当表达式包含多行函数或者 集合声明定义的时候除外123456789new Future.delayed(const Duration(seconds: 1), () &#123; print('I am a callback');&#125;);args.addAll([ '--mode', 'release', '--checked']); 参考 style © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 34 注解 Metadata","date":"2019-01-21T16:15:56.000Z","path":"2019/01/22/dart/dart-34-metadata/","text":"本节目标 了解内置注解 deprecated override 自定义注解，并使用反射实现 环境 Dart 2.1.0 作用官方称之为 元数据 , 其实在 java 里就是注解 简化代码编写，方便阅读，和重用 内置 deprecated用来注解 不建议使用、老旧的 成员对象 1234567891011121314151617class Television &#123; @deprecated void activate() &#123; turnOn(); &#125; void turnOn() &#123; print('on!'); &#125;&#125;main(List&lt;String&gt; args) &#123; var t = new Television(); t.activate(); t.turnOn();&#125; 内置 override表明你的函数是想覆写超类的一个函数 超类就是被你集成的父类 下面的代码中父类是 Object 1234567891011class A &#123; @override noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125;main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.message();&#125; 内置 proxy注解来避免警告信息 在 Dart2 中已经被标记为过时老旧 1234567891011@proxyclass A &#123; noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125;main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.say();&#125; 自定义注解使用反射可以在运行时获取元数据信息 比如服务端的控制器开发 下面的代码 展示了如何在反射中读取 metadata 信息 123456789101112131415161718192021222324252627282930import 'dart:mirrors';@Todo('seth', 'make this do something')void doSomething() &#123; print('do something');&#125;class Todo &#123; final String who; final String what; const Todo(this.who, this.what);&#125;main(List&lt;String&gt; args) &#123; currentMirrorSystem().libraries.forEach((uri, lib) &#123; // print('lib: $&#123;uri&#125;'); lib.declarations.forEach((s, decl) &#123; // print('decl: $&#123;s&#125;'); decl.metadata.where((m) =&gt; m.reflectee is Todo).forEach((m) &#123; var anno = m.reflectee as Todo; if (decl is MethodMirror) &#123; print('Todo($&#123;anno.who&#125;, $&#123;anno.what&#125;)'); ((decl as MethodMirror).owner as LibraryMirror).invoke(s, []); &#125; ; &#125;); &#125;); &#125;);&#125; 代码 34-媒体信息 参考 metadata © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 33 类型信息 typedef","date":"2019-01-20T16:21:06.000Z","path":"2019/01/21/dart/dart-33-typedef/","text":"本节目标 typedef 使用 环境 Dart 2.1.0 作用typedef 用来保存函数的信息，未来可能会保存类信息。 示例代码 采用 typedef 123456789101112131415161718192021// 定义函数类型typedef int Compare(Object a, Object b);// 定义排序类class SortedCollection &#123; Compare compare; // 构造时传入函数 SortedCollection(this.compare);&#125;// 定义排序函数int sort(Object a, Object b) =&gt; 0;// 程序入口main() &#123; // 实例化传入 SortedCollection coll = new SortedCollection(sort); // 类型检查 assert(coll.compare is Function); assert(coll.compare is Compare);&#125; 未采用 typedef 123456789101112131415161718192021class SortedCollection &#123; // 函数对象 Function compare; // 定义函数 SortedCollection(int f(Object a, Object b)) &#123; compare = f; &#125;&#125;// 生命函数int sort(Object a, Object b) =&gt; 0;main() &#123; // 实例化 SortedCollection coll = new SortedCollection(sort); // 我们只知道 compare 是一个 Function 类型， // 但是不知道具体是何种 Function 类型？ assert(coll.compare is Function);&#125; 区别就是 typedef 编辑器会提示函数信息 代码 33-类型信息 参考 typedefs © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 32 线程隔离 isolate","date":"2019-01-19T16:52:55.000Z","path":"2019/01/20/dart/dart-32-isolates/","text":"本节目标 了解线程隔离 环境 Dart 2.1.0 isolate在Dart中实现并发可以用Isolate，它是类似于线程(thread)但不共享内存的独立运行的worker，是一个独立的Dart程序执行环境。其实默认环境就是一个main isolate。 在Dart语言中，所有的Dart代码都运行在某个isolate中，代码只能使用所属isolate的类和值。不同的isolate可以通过port发送message进行交流。 示意图 ReceivePort 创建入口点 Isolate.spawn 连接进程 SendPort.send 发送消息 echo 例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import 'dart:async';import 'dart:isolate';// 第1步：定义主线程main() async &#123; // 第3步：编写回调Port var receivePort = new ReceivePort(); await Isolate.spawn(echo, receivePort.sendPort); // 第6步：保存隔离线程回调Port var sendPort = await receivePort.first; // 第7步：发送消息 var msg = await sendReceive(sendPort, \"foo\"); print('received $msg'); msg = await sendReceive(sendPort, \"bar\"); print('received $msg');&#125;// 第2步：定义隔离线程的入口点echo(SendPort sendPort) async &#123; // 第4步：编写回调Port var port = new ReceivePort(); // 第5步：告诉主线程回调入口点 sendPort.send(port.sendPort); // 第8步：循环接收消息 await for (var msg in port) &#123; // 数组 msg[0] 是数据 var data = msg[0]; // 数组 msg[1] 是发送方Port SendPort replyTo = msg[1]; // 回传发送方 数据 replyTo.send(data); // 如果数据时 bar 关闭当前回调 if (data == \"bar\") port.close(); &#125;&#125;/*主线程 发送消息函数数组 msg[0] 是数据数组 msg[1] 是发送方Port返回 隔离线程 Port*/Future sendReceive(SendPort port, msg) &#123; ReceivePort response = new ReceivePort(); port.send([msg, response.sendPort]); return response.first;&#125; 代码 32-隔离 参考 isolates © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 31 可调用类 callable","date":"2019-01-16T03:37:26.000Z","path":"2019/01/16/dart/dart-31-callable/","text":"本节目标 定义并执行可定义类 环境 Dart 2.1.0 callable123456789101112main(List&lt;String&gt; args) &#123; var phone = IOSPhone(); phone('911'); // IOSPhone()('911');&#125;class IOSPhone &#123; call(String num) &#123; print('phone number is $num'); &#125;&#125; 代码 可调用类 参考 callable-classes © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 30 - 生成器 Generators","date":"2019-01-15T09:25:58.000Z","path":"2019/01/15/dart/dart-30-generator/","text":"本节目标 同步、异步代码生成器 环境 Dart 2.1.0 同步生成器123456789101112131415main(List&lt;String&gt; args) &#123; var it = naturalsTo(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsTo(int n) sync* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; yield 会等待 moveNext 指令 异步生成器123456789101112131415161718192021222324import 'dart:async';main(List&lt;String&gt; args) &#123; // 流监听 // asynchronousNaturalsTo(5).listen((onData) &#123; // print(onData); // &#125;); // 流监听 StreamSubscription 对象 StreamSubscription subscription = asynchronousNaturalsTo(5).listen(null); subscription.onData((value) &#123; print(value); // subscription.pause(); &#125;);&#125;Stream&lt;int&gt; asynchronousNaturalsTo(int n) async* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; 以流的方式一次性推送 StreamSubscription 对象进行流监听控制 递归生成器12345678910111213main(List&lt;String&gt; args) &#123; var it = naturalsDownFrom(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsDownFrom(int n) sync* &#123; if ( n &gt; 0) &#123; yield n; yield* naturalsDownFrom(n-1); &#125;&#125; yield* 以指针的方式传递递归对象，而不是整个同步对象 代码 生成器 generators 参考 generators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 29 异步 async","date":"2018-12-05T07:51:09.000Z","path":"2018/12/05/dart/dart-29-async/","text":"本节目标 调用异步 等待、递归 异步返回值 环境 Dart 2.1.0 调用异步 回调12345678import 'package:dio/dio.dart';void main() &#123; Dio dio = new Dio(); dio.get(\"https://www.baidu.com\").then((response) &#123; print(response.data); &#125;);&#125; then 的方式异步回调 调用异步 等待1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; async 写在函数定义await 写在异步请求头 异步返回值123456789101112import 'package:dio/dio.dart';void main() async &#123; var content = await getUrl('https://www.baidu.com'); print(content);&#125;Future&lt;String&gt; getUrl(String url) async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(url); return response.data;&#125; 定义 Future&lt;T&gt; 返回对象 代码 异步 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 28 泛型","date":"2018-12-05T03:30:26.000Z","path":"2018/12/05/dart/dart-28-generic/","text":"本节目标 使用泛型 定义泛型 限制泛型 环境 Dart 2.1.0 泛型使用12345678910111213main(List&lt;String&gt; args) &#123; var l = List&lt;String&gt;(); l.add('aaa'); l.add('bbb'); l.add('ccc'); print(l); var m = Map&lt;int, String&gt;(); m[1] = 'aaaa'; m[2] = 'bbbb'; m[3] = 'cccc'; print(m);&#125; 很多的容器对象，在创建对象时都可以定义泛型类型。 泛型函数123456789main(List&lt;String&gt; args) &#123; var key = addCache('a00001', 'val.....'); print(key);&#125;K addCache&lt;K, V&gt;(K key, V val) &#123; print('$&#123;key&#125; $&#123;val&#125;'); return key;&#125; 泛型可以用在一个函数的定义 构造函数泛型123456789main(List&lt;String&gt; args) &#123; var p = Phone&lt;String&gt;('abc00000011111'); print(p.mobileNumber);&#125;class Phone&lt;T&gt; &#123; final T mobileNumber; Phone(this.mobileNumber);&#125; 这是大多数情况下使用泛型的场景，在一个类的构造函数中 泛型限制12345678910111213141516main(List&lt;String&gt; args) &#123; var ad = AndroidPhone(); var p = Phone&lt;AndroidPhone&gt;(ad); p.mobile.startup();&#125;class Phone&lt;T extends AndroidPhone &gt; &#123; final T mobile; Phone(this.mobile);&#125;class AndroidPhone &#123; void startup() &#123; print('Android Phone 开机'); &#125;&#125; 通过 extends 关键字 可以限定你可以泛型使用的类型 代码 泛型 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 27 库","date":"2018-12-05T02:00:54.000Z","path":"2018/12/05/dart/dart-27-library/","text":"本节目标 核心库 外部库 导入模块 环境 Dart 2.1.0 导入核心库1234567import 'dart:io';void main() &#123; var f = new File('README.md'); var content = f.readAsStringSync(); print(content);&#125; 导入第三方库 编写 pubspec.yaml 123name: ducafecatdependencies: dio: 1.0.9 程序调用 1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; 导入文件1234567import './phone.dart';void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125; 前缀123456789101112import './phone.dart';import './phone1.dart' as pp;void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown(); var xm1 = pp.Phone('android'); xm1.startup(); xm1.shutdown();&#125; 筛选包内容12345678// import './phone.dart' hide AndroidPhone;import './phone.dart' show IOSPhone;void main() &#123; var xm = IOSPhone(); xm.startup(); xm.shutdown();&#125; hide 筛掉某几个包show 只使用某几个包 延迟载入1234567891011import './phone.dart' deferred as pp;void main() async &#123; var run = true; if (run) &#123; await pp.loadLibrary(); var xm = pp.Phone('android'); xm.startup(); xm.shutdown(); &#125;&#125; loadLibrary() 方式在需要的时候载入包可提高程序启动速度用在不常使用的功能用在载入时间过长的包 代码 库 参考 language-tour 包管理平台 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 26 工厂函数","date":"2018-12-04T06:33:01.000Z","path":"2018/12/04/dart/dart-26-factory/","text":"本节目标 工厂函数 工厂构造函数 环境 Dart 2.1.0 工厂函数简化类型实例化 1234567891011121314151617181920212223242526272829303132333435363738void main() &#123; var xm = phoneFactory('ios'); xm.startup(); xm.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;Phone phoneFactory(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('Android Phone 开机'); &#125;&#125;class IOSPhone extends Phone &#123; void startup() &#123; super.startup(); print('IOS Phone 开机'); &#125;&#125; 工厂构造函数12345678910111213141516171819202122232425262728293031323334353637void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125;abstract class Phone &#123; factory Phone(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125; &#125; void startup(); void shutdown();&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('Android Phone 开机'); &#125; void shutdown() &#123; print('Android 关机'); &#125;&#125;class IOSPhone implements Phone &#123; void startup() &#123; print('IOS Phone 开机'); &#125; void shutdown() &#123; print('IOS 关机'); &#125;&#125; 代码 factory 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 25 多继承类 mixin","date":"2018-12-04T03:26:18.000Z","path":"2018/12/04/dart/dart-25-mixin/","text":"本节目标 多继承类的实现方式 函数重名冲突 环境 Dart 2.1.0 类多继承123456789101112131415161718192021222324252627282930313233343536373839404142void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.call(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 采用 with ... , .... , ... 方式 mixin 入多个类功能 函数重名冲突1234567891011121314151617181920212223242526272829303132333435363738394041424344454647void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class QQ &#123; void sms() &#123; print('qq sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin, QQ &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 遇到相同功能的函数，最后载入的会覆盖之前的函数定义 代码 mixin 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 24 extends 继承","date":"2018-11-28T09:45:11.000Z","path":"2018/11/28/dart/dart-24-extends/","text":"本节目标 实现继承 继承抽象类的问题 不可多继承 父类调用 调用父类构造 重写超类函数 环境 Dart 2.0.0 实现继承1234567891011121314151617void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123;&#125; 继承抽象类的问题12345678910111213void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class Phone &#123; void startup(); void shutdown();&#125;class AndroidPhone extends Phone &#123;&#125; 抽象类中只定义抽象函数，实例化访问会报错 父类调用1234567891011121314151617181920void main() &#123; var p = AndroidPhone(); p.startup();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; super 对象可以访问父类 调用父类构造1234567891011121314151617void main() &#123; var p = AndroidPhone(12345678); p.showNumber();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number);&#125; 可调用父类的 构造函数 重写超类函数12345678910111213141516171819202122void main() &#123; dynamic p = AndroidPhone(12345678); p.showNumber111();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number); @override void noSuchMethod(Invocation mirror) &#123; print('被重写 noSuchMethod'); &#125;&#125; 在重写的函数上加修饰符 @override 代码 extends 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 23 interface 接口","date":"2018-11-28T09:23:46.000Z","path":"2018/11/28/dart/dart-23-interface/","text":"本节目标 实现接口 implements 多接口 环境 Dart 2.0.0 Dart 中没有 interface 关键字实现接口12345678910111213141516171819void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class IPhone &#123; void startup(); void shutdown();&#125;class AndroidPhone implements IPhone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; 接口用途的抽象类 请用字母 I 开头 , 如 IPhone 从一个普通类履行接口1234567891011121314151617181920212223void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以从一个普通的类履行接口 履行多接口12345678910111213141516171819202122232425262728void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class Mobile &#123; int signal;&#125;class AndroidPhone implements Phone, Mobile &#123; int signal; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以履行多个接口 代码 interface 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 22 abstract 抽象","date":"2018-11-28T08:17:42.000Z","path":"2018/11/28/dart/dart-22-abstract/","text":"本节目标 抽象 类、函数 接口方式使用 继承方式使用 环境 Dart 2.0.0 abstract 类、函数、成员 普通类前加 abstract 123456abstract class Person &#123; static const String name = 'ducafecat'; void printName()&#123; print(name); &#125;&#125; 不能直接 new 实例化12var p = Person();p.printName(); Dart 2 开始 new 可以不写，提高阅读体验 继承方式使用定义 12class Teacher extends Person &#123;&#125; 实例 12var user = Teacher();user.printName(); 接口方式使用定义 1234567891011abstract class Person &#123; static const String name = ''; void printName();&#125;class Student implements Person &#123; String name = 'this is student'; void printName() &#123; print(name); &#125;&#125; 实例 12var user = Student();user.printName(); 代码 abstract 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 21 静态成员","date":"2018-11-17T08:02:07.000Z","path":"2018/11/17/dart/dart-21-static/","text":"本节目标 静态变量 静态方法 环境 Dart 2.0.0 静态变量static 定义声明 123class People &#123; static String name = 'ducafecat';&#125; 调用 静态变量可以通过外部直接访问,不需要将类实例化 1print(People.name); 函数内部访问实例化后的类也可以访问该静态变量 声明 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(name); &#125;&#125; 调用 12var p = new People();p.show(); 不能用 this因为静态变量实际上存在于类中,而不是实例本身 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(this.name); &#125;&#125; 静态方法静态方法可以通过外部直接访问 声明 123456class People &#123; static String name = 'ducafecat'; static void printName() &#123; print(name); &#125;&#125; 调用 1People.printName(); 总结 实例化后将无法通过外部直接调用 static 成员 静态成员与实例成员是分开的, 静态成员处于类的定义体中, 实例成员处于类的实例中 代码 static.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 20 get set","date":"2018-11-17T07:30:21.000Z","path":"2018/11/17/dart/dart-20-getter-setter/","text":"本节目标 定义、使用、简化 get set 环境 Dart 2.0.0 定义、使用 get setgetter 和 setter 的好处是，你可以开始使用实例变量，后来 你可以把实例变量用函数包裹起来，而调用你代码的地方不需要修改。 定义 1234567891011class People &#123; String _name; set pName(String value) &#123; _name = value; &#125; String get pName &#123; return 'people is $&#123;_name&#125;'; &#125;&#125; 使用 123var p = new People();p.pName = 'ducafecat';print(p.pName); 简化 get set1234567class People &#123; String _name; set pName(String value) =&gt; _name = value; String get pName =&gt; 'people is $&#123;_name&#125;';&#125; 代码 getset.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 19 类","date":"2018-11-17T05:52:30.000Z","path":"2018/11/17/dart/dart-19-class/","text":"本节目标 定义、使用类 构造函数 简化构造 初始化列表 命名构造函数 重定向构造函数 环境 Dart 2.0.0 定义、使用类定义 12class Point &#123;&#125; 使用 1var p = new Point(); 构造函数定义 12345678class Point &#123; num x; num y; Point(num x, num y)&#123; this.x = x; this.y = y; &#125;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 简化构造定义 12345class Point &#123; num x; num y; Point(this.x, this.y);&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 初始化列表定义 123456class Point &#123; num x; num y; var origin; Point(this.x, this.y): origin = &#123;x:x, y:y&#125;;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y, p.origin]); 命名构造函数定义 12345678class Point &#123; num x; num y; Point.fromJson(Map json) &#123; x = json['x']; y = json['y']; &#125;&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 重定向构造函数定义 123456class Point &#123; num x; num y; Point(this.x, this.y); Point.fromJson(Map json) : this(json['x'], json['y']);&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 代码 class.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 18 异常","date":"2018-11-17T02:53:26.000Z","path":"2018/11/17/dart/dart-18-exceptions/","text":"本节目标 错误类型 抛出、捕获 环境 Dart 2.0.0 错误的两种类型Exception 类Exception class 名称 说明 DeferredLoadException 延迟加载错误 FormatException 格式错误 IntegerDivisionByZeroException 整数除零错误 IOException IO 错误 IsolateSpawnException 隔离产生错误 TimeoutException 超时错误 Error 类Error class 名称 说明 AbstractClassInstantiationError 抽象类实例化错误 ArgumentError 参数错误 AssertionError 断言错误 AsyncError 异步错误 CastError Cast 错误 ConcurrentModificationError 并发修改错误 CyclicInitializationError 周期初始错误 FallThroughError Fall Through 错误 JsonUnsupportedObjectError json 不支持错误 NoSuchMethodError 没有这个方法错误 NullThrownError Null 错误错误 OutOfMemoryError 内存溢出错误 RemoteError 远程错误 StackOverflowError 堆栈溢出错误 StateError 状态错误 UnimplementedError 未实现的错误 UnsupportedError 不支持错误 抛出错误12345678// Exception 对象// throw new FormatException('这是一个格式错误提示');// Error 对象// throw new OutOfMemoryError();// 任意对象// throw '这是一个异常'; 捕获错误12345678// try &#123;// // throw new FormatException('这是一个格式错误提示');// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// &#125; catch (e) &#123;// print(e);// &#125; 重新抛出错误12345678// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; Finally 执行12345678910// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; finally &#123;// print('end');// &#125; 代码 exception.dart 参考 language-tour Exception class Error class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 17 流程控制语句","date":"2018-11-12T07:56:51.000Z","path":"2018/11/12/dart/dart-17-controlFlow/","text":"本节目标 条件判断 循环控制 环境 Dart 2.0.0 if else1234bool isPrint = true;if (isPrint) &#123; print('hello');&#125; for123for (var i = 0; i &lt; 5; i++) &#123; print(i);&#125; while12345bool isDone = false;while(!isDone) &#123; print('is not done'); isDone = true;&#125; do while12345bool isRunning = true;do &#123; print('is running'); isRunning = false;&#125; while (isRunning); switch case12345678String name = 'cat';switch (name) &#123; case 'cat': print('cat'); break; default: print('not find');&#125; break12345678num i = 1;while(true) &#123; print('$&#123;i&#125; - run'); i++; if(i == 5) &#123; break; &#125;&#125; continue123456for (var i = 0; i &lt; 5; i++) &#123; if (i &lt; 3) &#123; continue; &#125; print(i);&#125; continue 指定位置1234567891011121314151617String command = \"close\";switch(command) &#123; case \"open\": print(\"open\"); break; case \"close\": print(\"close\"); continue doClose; doClose: case \"doClose\": print(\"DO_CLOSE\"); break; default: print(\"-----\");&#125; 代码 controlFlow.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 16 操作符","date":"2018-11-12T02:41:28.000Z","path":"2018/11/12/dart/dart-16-operators/","text":"本节目标 优先级 算术操作符 相等相关的操作符 类型判定操作符 赋值操作符 逻辑操作符 位和移位操作符 条件表达式 级联操作符 环境 Dart 2.0.0 操作符表 描述 操作符 \b 后缀操作 expr++ expr– () [] . ?. 前缀操作 -expr !expr ~expr ++expr –expr 乘除 * / % ~/ 加减 + - 位移 &lt;&lt; &gt;&gt; 按位与 &amp; 按位异或 ^ 按位或 \\ 类型操作 &gt;= &gt; &lt;= &lt; as is is! 相等 == != 逻辑与 &amp;&amp; 逻辑或 \\ \\ 是为为空 ?? 三目运算 expr1 ? expr2 : expr3 级联 .. 赋值 = *= /= ~/= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= \\ = ??= 优先级顺序 上面左边 优先级高于 右边下面 123if(x == 1 &amp;&amp; y == 2)&#123; ...&#125; 算术操作符 操作符 解释 + 加号 – 减号 -expr 负号 * 乘号 / 除号 ~/ 除号，但是返回值为整数 % 取模 123print(5/2);print(5~/2);print(5 % 2); 相等相关的操作符 操作符 解释 == 相等 != 不等 &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 类型判定操作符 操作符 解释 as 类型转换 is 如果对象是指定的类型返回 True is! 如果对象是指定的类型返回 False 123456int a = 123;String b = 'ducafecat';String c = 'abc';print(a as Object);print(b is String);print(c is! String); 条件表达式 操作符 解释 condition ? expr1 : expr2 如果 condition 是 true，执行 expr1 (并返回执行的结果)； 否则执行 expr2 并返回其结果。 expr1 ?? expr2 如果 expr1 是 non-null，返回其值； 否则执行 expr2 并返回其结果。 1234567bool isFinish = true;String txtVal = isFinish ? 'yes' : 'no';bool isFinish;isFinish = isFinish ?? false;orisFinish ??= false; 位和移位操作符 操作符 解释 &amp; 逻辑与 逻辑或 ^ 逻辑异或 ~expr 取反 &lt;&lt; 左移 &gt;&gt; 右移 级联操作符 操作符 解释 .. 可以在同一个对象上 连续调用多个函数以及访问成员变量。 123456StringBuffer sb = new StringBuffer();sb..write('hello')..write('word')..write('\\n')..writeln('doucafecat'); 其他操作符 操作符 解释 () 使用方法 代表调用一个方法 [] 访问 List 访问 list 中特定位置的元素 . 访问 Member 访问元素，例如 foo.bar 代表访问 foo 的 bar 成员 ?. 条件成员访问 和 . 类似，但是左边的操作对象不能为 null，例如 foo?.bar 如果 foo 为 null 则返回 null，否则返回 bar 成员 12String a;print(a?.length); 代码 operator.dart 参考 operators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 15 函数 Function","date":"2018-11-12T01:36:04.000Z","path":"2018/11/12/dart/dart-15-function/","text":"本节目标 函数定义 可选参数 默认值 命名参数 内部定义 环境 Dart 2.0.0 函数定义123456int add(int x) &#123; return x + 1;&#125;调用add(1); 可选参数123456789101112int add(int x, [int y, int z]) &#123; if (y == null) &#123; y = 1; &#125; if (z == null) &#123; z = 1; &#125; return x + y + z;&#125;调用int(1, 2); 可选参数 默认值123456int add(int x, [int y = 1, int z = 2]) &#123; return x + y;&#125;调用int(1, 2); 命名参数 默认值123456int add(&#123;int x = 1, int y = 1, int z = 1&#125;) &#123; return x + y + z;&#125;调用int(x: 1, y: 2); 函数内定义123456void main()&#123; int add(int x)&#123; return x + x; &#125; print(add(1));&#125; Funcation 返回函数对象1234567Function makeAdd(int x) &#123; return (int y) =&gt; x + y;&#125;调用var add = makeAdd(1);print(add(5)); 代码 function.dart 参考 Functions © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 14 symbol、enum、comments","date":"2018-10-27T03:05:15.000Z","path":"2018/10/27/dart/dart-14-symbol-enum-comments/","text":"本节目标 symbol enum comments 环境 Dart 2.0.0 符号 SymbolDart语言的标识符，在反射中用的很普及，特别是很多发布包都是混淆后的。 123456import 'dart:mirrors';Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); 枚举 Enum适合用在常量定义，类型比较很方便。 123enum Status &#123; none, running, stopped, paused &#125;Status.values.forEach((it) =&gt; print('$it - index: $&#123;it.index&#125;')); 注释 Comments单行注释1// Symbol libraryName = new Symbol('dart.core'); 多行注释12345678/* * Symbol * Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); */ 文档注释12345678/// `main` 函数////// 符号/// 枚举///void main() &#123; ...&#125; 可参考 String 类中的注释使用 代码 symbol-enum-comments.dart 参考 language-tour Symbol © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 13 Runes","date":"2018-10-27T00:51:21.000Z","path":"2018/10/27/dart/dart-13-runes/","text":"本节目标 Runes 基础知识 字符编码 ASCII、Unicode、UTF-8、UTF-16、UTF-32 环境 Dart 2.0.0 RunesRunes 对象是一个 32位 字符对象，用来表示一个字。这样设计也是考虑兼容 UTF-16 四个字节的情况。 length 和 runes.length 比较1234567String a = '👺';print(a.length);print(a.runes.length);&gt;&gt; 输出2 // 标识占 2 个 16 位字符1 // 表示占 1 个 32 位字符 runes 是一个 32 位字符对象 操作 32-bit Unicode 字符123456Runes b = new Runes('\\u&#123;1f596&#125; \\u6211');var c = String.fromCharCodes(b);或者String c = '\\u&#123;1f596&#125; \\u6211' 如果非4个数值，需要用 {…} 返回 16-bit code units 的 codeUnitAt codeUnits1234567var a = '👺';print(a.codeUnitAt(0));print(a.codeUnits);&gt;&gt; 输出55357 // 第 1 位的 10 进制数值[55357, 56442] // 显示 2 位的 10 进制数值 返回 32-bit Unicode 的 runes123456var a = '👺';print(a.runes);&gt;&gt; 输出(128122) // 显示 32 位的 10 进制数值 String 操作整理 名称 说明 codeUnitAt 某个字符的码 10进制 fromCharCodes Runes 转 String 工厂函数 runes 返回字对象 基础知识字符集ASCII ASCII 非 ASCII 中的 GB2312、GBK 汉字内码扩展规范 Unicode、UTF-8、UTF-16、UTF-32 UTF-8 UTF-16 UTF-32 代码 runes.dart 参考 language-tour Runes ASCII Unicode UTF-8 UTF-16 UTF-32 在线字符 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 12 Set","date":"2018-10-25T06:47:10.000Z","path":"2018/10/25/dart/dart-12-set/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 声明Set 是一个元素唯一的有序队列 松散12345678// var a = new Set();// a.add('java');// a.add('php');// a.add('python');// a.add('java');// a.add('sql');// a.add('swift');// a.add('dart'); 强类型12// var b = new Set&lt;String&gt;();// b.addAll(['dart', 'c#', 'j#', 'e#']); 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个 last 最后一个 length 个数 常用方法 名称 说明 addAll 添加 contains 查询单个 containsAll 查询多个 difference 集合不同 intersection 交集 union 联合 lookup 按对象查询到返回对象 remove 删除单个 removeAll 删除多个 clear 清空 firstWhere 按条件正向查询 lastWhere 按条件反向查询 removeWhere 按条件删除 retainAll 只保留几个 retainWhere 按条件只保留几个 1234567891011121314151617181920// b.addAll(['dart', 'c#', 'j#', 'e#']);// print(b.contains('dart'));// print(b.containsAll(['dart', 'swift']));// print('b =&gt; $b');// print(a.difference(b));// print(a.intersection(b));// print(b.lookup('dart'));// print(b.union(a));// b.remove('dart');// b.removeAll(['dart','c#']);// b.clear();// print(b.firstWhere((it) =&gt; it == 'c#'));// print(b.lastWhere((it) =&gt; it == 'c#'));// b.removeWhere((it) =&gt; it == 'c#');// b.retainAll(['e#']);// b.retainWhere((it) =&gt; it == 'e#');// b.retainWhere((it) &#123;// bool ret = it == 'e#';// return ret;// &#125;); 代码 set.dart 参考 language-tour Set © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 11 Map","date":"2018-10-23T07:36:12.000Z","path":"2018/10/23/dart/dart-11-map/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始key value 形式的集合 1var a = &#123;'name': 'ducafecat', 'web': 'www.ducafecat.tech'&#125;; 声明松散1234var a = new Map();a['name'] = 'ducafecat';a['web'] = 'www.ducafecat.tech';a[0] = 'abc'; 强类型123var b = new Map&lt;int, String&gt;();b[0] = 'java';b[1] = 'python'; 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 keys key 集合 values values 集合 length 个数 entries 加工数据入口 123456print(a.isEmpty);print(a.isNotEmpty);print(a.keys);print(a.values);print(a.length);print(a.entries); 常用方法 名称 说明 addAll 添加 addEntries 从入口添加 containsKey 按 key 查询 containsValue 按 value 查询 clear 清空 remove 删除某个 removeWhere 按条件删除 update 更新某个 updateAll 按条件更新 addAll1b.addAll(&#123;'first': 'java', 'second': 'python'&#125;); addEntries1b.addEntries(a.entries); containsKey1print(a.containsKey('name')); containsValue1print(a.containsValue('www.ducafecat.tech')); clear1b.clear(); remove1a.remove('name'); removeWhere1a.removeWhere((key,val) =&gt; key == 'name'); update1a.update('name', (val) =&gt; 'abc'); updateAll1a.updateAll((key, val) =&gt; \"---$val---\"); 操作符 名称 说明 [] 取值 []= 赋值 12print(a['name']);a['name'] = 'abc'; 代码 map.dart 参考 language-tour Map © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 10 列表","date":"2018-10-19T02:49:35.000Z","path":"2018/10/19/dart/dart-10-list/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始List 是一个有序列表 12var l = [1, 2, 3];print(l); 声明自动123456List&lt;int&gt; l = new List();l..add(1)..add(2)..add(3);print(l); 定长123456List&lt;int&gt; l = new List(3);// print(l[0]);l[0] = 1;l[1] = 2;l[2] = 3;print(l); 属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个对象 last 最后一个对象 length 个数 reversed 反转 1234567var l = [1, 2, 3];print(l.first);print(l.last);print(l.length);print(l.isEmpty);print(l.isNotEmpty);print(l.reversed); 方法 名称 说明 add 添加 addAll 添加多个 insert 插入 insertAll 插入多个 indexOf 查询 indexWhere 按条件查询 remove 删除 removeAt 按位置删除 fillRange 按区间填充 getRange 按区间获取 shuffle 随机变换顺序 sort 排序 sublist 创建子 添加12345678List&lt;int&gt; l = new List();l ..add(1) ..addAll([2, 3, 4, 5]) ..insert(0, 6) ..insertAll(6, [6, 6]) ; 查询12print(l.indexOf(5));print(l.indexWhere((it) =&gt; it == 4)); 删除1234l.remove(6);print(l);l.removeAt(5);print(l); Range12l.fillRange(0, 3, 9);print(l.getRange(0, 5)); 洗牌1234l.shuffle();print(l);l.shuffle();print(l); 排序12345678910111213数字l.sort();print(l);日期List&lt;DateTime&gt; dtList = new List();dtList.addAll([ DateTime.now(), DateTime.now().add(new Duration(days: -12)), DateTime.now().add(new Duration(days: -2)) ]);print(dtList);dtList.sort((a, b) =&gt; a.compareTo(b));print(dtList); 复制子列表123print(l);var l2 = l.sublist(1,4);print(l2); 操作符 名称 说明 + 连接 [] 取值 []= 赋值 12345var l1 = [1, 2, 3];var l2 = [4, 5, 6];print(l1 + l2);l1[2] = 9;print(l1[2]); 代码 list.dart 参考 language-tour List © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 09 日期时间","date":"2018-10-18T07:02:05.000Z","path":"2018/10/18/dart/dart-09-datetime/","text":"本节目标 声明 UTC 时间 公元时间 时间戳 解析标准时间 时间运算 环境 Dart 2.0.0 声明1234var now = new DateTime.now();print(now);var d = new DateTime(2018, 10, 10, 9, 30);print(d); 创建时间 UTC UTC 协调世界时 原子时 原子钟 12var d = new DateTime.utc(2018, 10, 10, 9, 30);print(d); 解析时间 IOS 8601 ISO 8601 时区 时区列表 1234var d1 = DateTime.parse('2018-10-10 09:30:30Z');print(d1);var d2 = DateTime.parse('2018-10-10 09:30:30+0800');print(d2); 时间增减量1234var d1 = DateTime.now();print(d1);print(d1.add(new Duration(minutes: 5)));print(d1.add(new Duration(minutes: -5))); 比较时间1234567var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);print(d1.isAfter(d2));print(d1.isBefore(d2));var d1 = DateTime.now();var d2 = d1.add(new Duration(milliseconds: 30));print(d1.isAtSameMomentAs(d2)); 时间差1234var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);var difference = d1.difference(d2);print([difference.inDays, difference.inHours]); 时间戳 公元 123var now = new DateTime.now();print(now.millisecondsSinceEpoch);print(now.microsecondsSinceEpoch); 代码 datetime.dart 参考 language-tour DateTime UTC 协调世界时 原子时 原子钟 ISO 8601 时区 时区列表 公元 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 08 字符串","date":"2018-10-18T05:48:22.000Z","path":"2018/10/18/dart/dart-08-string/","text":"本节目标 声明方式 字符串模板 字符串连接 转义操作 其它常用运算 环境 Dart 2.0.0 单引号或者双引号12String a = 'ducafecat';String b = \"ducafecat\"; 字符串模板123var a = 123;String b = 'ducafecat : $&#123;a&#125;';print(b); 字符串连接123456789101112131415var a = 'hello' + ' ' + 'ducafecat';var a = 'hello'' ''ducafecat';var a = 'hello' ' ' 'ducafecat';var a = 'hello'' ''ducafecat';var a = '''hello wordthis is multi line''';var a = \"\"\"hello wordthis is multi line\"\"\";print(a); 转义符号12var a = 'hello word \\n this is multi line';print(a); 取消转义12var a = r'hello word \\n this is multi line';print(a); 搜索12345var a = 'web site ducafecat.tech';print(a.contains('ducafecat'));print(a.startsWith('web'));print(a.endsWith('tech'));print(a.indexOf('site')); 提取数据1234print(a.substring(0,5));var b = a.split(' ');print(b.length);print(b[0]); 大小写转换12print(a.toLowerCase());print(a.toUpperCase()); 裁剪 判断空字符串12print(' hello word '.trim());print(''.isEmpty); 替换部分字符1print('hello word word!'.replaceAll('word', 'ducafecat')); 字符串创建123456var sb = StringBuffer();sb..write('hello word!')..write('my')..write(' ')..writeAll(['web', 'site', 'https://ducafecat.tech']);print(sb.toString()); 代码 string.dart 参考 language-tour String © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 07 布尔","date":"2018-10-17T09:37:31.000Z","path":"2018/10/17/dart/dart-07-bool/","text":"本节目标 布尔 声明、比较、默认值 断言、asset、isEmpty、isNaN 逻辑操作符 &amp;&amp;、||、! 关系运算符 == != &gt; &gt;= &lt; &lt;= 环境 Dart 2.0.0 声明为了代表布尔值，Dart 有一个名字为 bool 的类型。 只有两个对象是布尔类型的：true 和 false 所创建的对象， 这两个对象也都是编译时常量。 bool 12bool a;print(a); 只有 true 对象才被认为是 true。 所有其他的值都是 flase。 1234String name = 'ducafecat';if(name) &#123; print('this is name');&#125; assert 断言123456789var a = true;assert(a);var name = '';assert(name.isEmpty);assert(name.isNotEmpty);var num = 0 / 0;assert(num.isNaN); 注意： 断言只在检查模式下运行有效，如果在生产模式 运行，则断言不会执行。 逻辑运算符&amp;&amp; 逻辑与123bool a = true;bool b = true;assert(a &amp;&amp; b); || 逻辑或123bool a = true;bool b = false;assert(a || b); ! 逻辑非123bool a = true;bool b = !a;print(b); 关系运算符== 等于1if(a == b) &#123;&#125; != 不等于1if(a != b) &#123;&#125; &gt; 大于1if(a &gt; b) &#123;&#125; &gt;= 大于或等于1if(a &gt;= b) &#123;&#125; &lt; 小于1if(a &lt; b) &#123;&#125; &lt;= 小于或等于1if(a &lt;= b) &#123;&#125; 代码 bool.dart 参考 language-tour bool © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 06 数值","date":"2018-10-16T09:08:33.000Z","path":"2018/10/16/dart/dart-06-number/","text":"本节目标 数值类型 int、double、num 数值表示法 十进制、十六进制 科学计数法 数值转换 位运算 环境 Dart 2.0.0 数值数值类型int整数值，其取值通常位于 -253 和 253 之间。 int class double64-bit (双精度) 浮点数，符合 IEEE 754 标准。 double class numint 和 double 都是 num 的子类。 num class 数值表示法 十进制、十六进制123int a = 1001;int b = 0xABC;print([a, b]); 科学计数法12num a = 21.2e3;print([a]); 数值转换123456789101112131415// string -&gt; int// string -&gt; doubleint a = int.parse('123');double b = double.parse('1.223');// int -&gt; string// double -&gt; stringString a = 123.toString();String b = 1.223.toString();print([a, b]);// double -&gt; intdouble a = 1.8;int b = a.toInt();print(b); 位运算&amp; 与运算同时 1 才行 12341 0 1 0 100 0 1 0 2--------0 0 1 0 2 123var a = 10;var b = 2;print(a &amp; b); | 或运算有一个 1 就行 12341 0 1 0 100 0 1 0 2--------1 0 1 0 10 123var a = 10;var b = 2;print(a | b); 可以用在常量组合 123456const USE_LEFT = 0x1;const USE_TOP = 0x2;const USE_LEFT_TOP = USE_LEFT | USE_TOP;var result = USE_LEFT | USE_TOP;print(result);assert(USE_LEFT_TOP == result); ~ 非运算二进制数逐位进行逻辑非运算 1234560 1 0 0 1 +9 二进制 最高位 0 整数 1 负数0 0 1 1 0 补码1 1 0 0 1 取反1 1 0 1 0 加1--------1 1 0 1 0 -10 12var a = 9;print(~a); ^ 异或不相同的才出 1 12341 0 1 0 100 0 1 0 2--------1 0 0 0 8 123var a = 10;var b = 2;print(a ^ b); 计算机中可以用来取反色 移位运算符&lt;&lt; 左移12340 0 0 1 1 二进制0 0 1 0 左移一位 20 1 0 0 左移一位 41 0 0 0 左移一位 8 向左移动一位 12var a = 1 &lt;&lt; 1;print(a); &gt;&gt; 右移12341 0 0 0 8 二进制0 1 0 0 右移一位 40 0 1 0 右移一位 20 0 0 1 右移一位 1 向右移动一位 12var a = 8 &gt;&gt; 1;print(a); 代码 number.dart 参考 language-tour int class double class num class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 05 常量","date":"2018-10-10T06:49:26.000Z","path":"2018/10/10/dart/dart-05-constant/","text":"本节目标 常量的定义方式 final const 的区别 环境 Dart 2.0.0 定义类型声明可以省略12345final String a = 'ducafecat';final a = 'ducafecat';const String a = 'ducafecat';const a = 'ducafecat'; 初始后不能再赋值12345final a = 'ducafecat';a = 'abc';const a = 'ducafecat';a = 'abc'; 不能和 var 同时使用12final var a = 'ducafecat';const var a = 'ducafecat'; const 赋值 申明可省略12const List ls = const [11, 22, 33];const List ls = [11, 22, 33]; 区别需要确定的值123final dt = DateTime.now();const dt = const DateTime.now(); 不可变性可传递12345final List ls = [11, 22, 33];ls[1] = 44;const List ls = [11, 22, 33];ls[1] = 44; 内存中重复创建1234567final a1 = [11 , 22];final a2 = [11 , 22];print(identical(a1, a2));const a1 = [11 , 22];const a2 = [11 , 22];print(identical(a1, a2)); 代码 constant.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 04 变量的两种类型","date":"2018-10-10T02:18:25.000Z","path":"2018/10/10/dart/dart-04-variables/","text":"本节目标 了解 弱类型 强类型 常见 强类型 有哪些 如何选着何时用那种类型 环境 Dart 2.0.0 弱类型var如果没有初始值，可以变成任何类型 123456var a;a = 'ducafecat';a = 123;a = true;a = &#123;'key': 'val123'&#125;;a = ['abc']; Object动态任意类型，编译阶段检查类型 1234Object a = 'doucafecat';a = 123;a = [2222];a.p(); dynamic动态任意类型，编译阶段不检查检查类型 1234dynamic a = 'doucafecat';a = 123;a = [1111];a.p(); 比较 var 与 dynamic、Object唯一区别 var 如果有初始值，类型被锁定 1234var a = 'ducafecat';dynamic a = 'doucafecat';Object a = 'doucafecat';a = 123; 强类型申明类型声明后，类型被锁定 123String a;a = 'ducafecat';a = 123; 常见类型 名称 说明 num 数字 int 整型 double 浮点 bool 布尔 String 字符串 StringBuffer 字符串 buffer DateTime 时间日期 Duration 时间区间 List 列表 Sets 无重复队列 Maps kv 容器 enum 枚举 123456String a = 'doucafecat';int i = 123;double d = 0.12;bool b = true;DateTime dt = new DateTime.now();List l = [ a, i, d, b, dt]; 默认值一切都是 Object , 变量声明后默认都是 null 1234var a;String a;print(a);assert(a == null); assert 检查点函数，如果不符合条件直接抛出错误并终止程序进程 如何使用 在写 API 接口的时候，请用 强类型，一旦不符合约定，接收数据时能方便排查故障 你在写个小工具时，可以用 弱类型，这样代码写起来很快，类型自动适应 代码 variables.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 03 MacOS 下安装 SDK","date":"2018-09-30T07:41:49.000Z","path":"2018/09/30/dart/dart-03-install-macos/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 MacOS Dart SDK 2.0.0 下载 SDKSDK 列表 archive 下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 解压到磁盘 磁盘位置 ~/Documents/sdk/dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量12345678# 打开配置文件vim ~/.bash_profile# 尾部加入配置export PATH=~/Documents/sdk/dart-sdk/bin:$PATH# 重载配置文件source ~/.bash_profile 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"macos_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 02 Windows 下安装 SDK","date":"2018-09-30T06:41:49.000Z","path":"2018/09/30/dart/dart-02-install-windows/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 Windows 10 Dart SDK 2.0.0 下载 SDKSDK 列表 archive 源下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 解压到磁盘 磁盘位置 C:\\sdk\\dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量 环境变量 PATH 新增 C:\\sdk\\dart-sdk\\bin 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"windows_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 01 前言","date":"2018-09-30T02:00:48.000Z","path":"2018/09/30/dart/dart-01-introduce/","text":"本节目标 为什么学习 Dart 课程计划 如果获取课程资料、代码、视频 2018 Google 开发者大会大会官网 首页简介 bilibili 视频 介绍视频 Flutter官网 Flutter Dart官网 homepage 多平台开发 Platforms 课程计划12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879## 前言## 安装&amp;配置 - Windows## 安装&amp;配置 - MacOS## 变量 - 两种方式## 变量 - 常量## 类型 - 数字## 类型 - Bool## 类型 - 字符串## 类型 - 日期## 类型 - List## 类型 - Map## 类型 - Set## 类型 - Runes## 类型 - Symbol## 类型 - Enum## 注释 - Comments## 函数## 操作符## 流程控制## 异常## 类 - Class## 类 - getter、setter## 类 - 静态变量、方法## 类 - Abstract 抽象类、方法## 类 - Interface 接口## 类 - extends 继承## 类 - mixin 混合## 类 - 工厂构造函数## 类库 - Libraries## 泛型 - Generics## 异步 - Asynchrony## 生成器 - Generators## 可调用 - Callable## 隔离 - Isolate## 类型定义 - Typedef## 注解 - Metadata## 代码规范 - 代码风格## 代码规范 - 文档注释## 代码规范 - 最佳实践## 代码规范 - 设计指南 课程资料主站 https://ducafecat.tech资料 视频 youtube 优酷 文档 \b代码 参考 Dart 官网 Flutter 官网 2018 Google 开发者大会 bilibili © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://blog.ducafecat.tech/tags/dart/"}]}]