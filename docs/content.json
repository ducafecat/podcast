[{"title":"Flutter 实战从零开始 新闻客户端 - 13 使用 supernova 导入 adobe xd 自动生成用户中心代码","date":"2020-06-17T16:00:00.000Z","path":"2020/06/18/flutter-project/flutter-project-news-13-code-generate-supernova/","text":"本节目标 了解 supernova 代码生成器作用 导入 xd 设计稿 如何高效使用生成代码 正文supernova 代码生成器https://supernova.io/ 导入 xd 设计稿，生成代码 商业设计稿不好直接分享, 可以加微信联系 ducafecat 编写用户中心界面代码组织代码结构123456789101112131415161718192021class _AccountPageState extends State&lt;AccountPage&gt; &#123; // 个人页面 头部 Widget _buildUserHeader() &#123;&#125; // 列表项 Widget _buildCell() &#123;&#125; @override Widget build(BuildContext context) &#123; final appState = Provider.of&lt;AppState&gt;(context); return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildUserHeader(), _buildCell(), ], ), ); &#125;&#125; 直接使用生成的代码 个人页面 头部 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133Widget _buildUserHeader() &#123; return Container( height: 333, child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, right: 0, child: Container( height: 333, decoration: BoxDecoration( color: AppColors.primaryBackground, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: 2, decoration: BoxDecoration( color: AppColors.primaryElement, ), child: Container(), ), ], ), ), ), Positioned( left: 20, top: 40, right: 20, bottom: 21, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: 198, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Align( alignment: Alignment.topCenter, child: Container( width: 108, height: 108, child: Stack( alignment: Alignment.center, children: [ Positioned( top: 0, child: Container( width: 108, height: 108, decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: Radii.k54pxRadius, ), child: Container(), ), ), Positioned( top: 10, child: Image.asset( \"assets/images/image.png\", fit: BoxFit.none, ), ), ], ), ), ), Spacer(), Container( margin: EdgeInsets.only(bottom: 9), child: Text( \"Cameron Rogers\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 24, ), ), ), Text( \"@boltrogers\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: 16, ), ), ], ), ), Spacer(), Container( height: 44, child: FlatButton( onPressed: () =&gt; this.onButtonPressed(context), color: Color.fromARGB(255, 41, 103, 255), shape: RoundedRectangleBorder( borderRadius: BorderRadius.all(Radius.circular(6)), ), textColor: Color.fromARGB(255, 255, 255, 255), padding: EdgeInsets.all(0), child: Text( \"Get Premium - \\$9.99\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.secondaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), ), ], ), ), ], ), );&#125; 列表项 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990Widget _buildCell() &#123; return Container( height: 60, child: Stack( alignment: Alignment.centerLeft, children: [ Positioned( left: 0, right: 0, child: Container( height: 60, decoration: BoxDecoration( color: AppColors.secondaryElement, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: 1, decoration: BoxDecoration( color: AppColors.primaryElement, ), child: Container(), ), ], ), ), ), Positioned( right: 0, child: Row( mainAxisAlignment: MainAxisAlignment.end, children: [ Container( margin: EdgeInsets.only(right: 11), child: Text( \"12\", textAlign: TextAlign.right, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), Container( width: 24, height: 24, margin: EdgeInsets.only(right: 20), child: Image.asset( \"assets/images/icon.png\", fit: BoxFit.none, ), ), ], ), ), Positioned( left: 0, child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, right: 19, child: Container(), ), Positioned( left: 20, right: 0, child: Text( \"Favorite channels\", textAlign: TextAlign.left, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), ], ), ), ], ), );&#125; 抽取代码 lib/common/widgets/app.dart123456789/// 10像素 DividerWidget divider10Px(&#123;Color bgColor = AppColors.secondaryElement&#125;) &#123; return Container( height: duSetWidth(10), decoration: BoxDecoration( color: bgColor, ), );&#125; 修改代码 _buildUserHeader123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141// 个人页面 头部Widget _buildUserHeader() &#123; return Container( height: duSetWidth(333), child: Stack( alignment: Alignment.center, children: [ // 背景 Positioned( left: 0, right: 0, child: Container( height: duSetWidth(333), decoration: BoxDecoration( color: AppColors.primaryBackground, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: duSetWidth(2), decoration: BoxDecoration( color: AppColors.tabCellSeparator, ), child: Container(), ), ], ), ), ), Positioned( left: 20, top: 40, right: 20, bottom: 21, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ // 头像 Container( height: duSetWidth(198), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Align( alignment: Alignment.topCenter, child: Container( width: duSetWidth(108), height: duSetWidth(108), child: Stack( alignment: Alignment.center, children: [ Positioned( top: 0, child: Container( width: duSetWidth(108), height: duSetWidth(108), decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: BorderRadius.all( Radius.circular(duSetWidth(108) / 2)), ), child: Container(), ), ), Positioned( top: 10, child: Image.asset( \"assets/images/account_header.png\", height: duSetWidth(88), width: duSetWidth(88), fit: BoxFit.fill, ), ), ], ), ), ), // 文字 Spacer(), Container( margin: EdgeInsets.only(bottom: 9), child: Text( Global.profile.displayName, textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 24, ), ), ), Text( \"@boltrogers\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: 16, ), ), ], ), ), // 按钮 Spacer(), Container( height: 44, child: FlatButton( onPressed: () =&gt; &#123;&#125;, color: Color.fromARGB(255, 41, 103, 255), shape: RoundedRectangleBorder( borderRadius: BorderRadius.all(Radius.circular(6)), ), textColor: Color.fromARGB(255, 255, 255, 255), padding: EdgeInsets.all(0), child: Text( \"Get Premium - \\$9.99\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryElementText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: 18, ), ), ), ), ], ), ), ], ), );&#125; 修改代码 _buildCell123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117// 列表项Widget _buildCell(&#123; String title, String subTitle, int number, bool hasArrow = false, VoidCallback onTap,&#125;) &#123; return GestureDetector( onTap: onTap, child: Container( height: duSetWidth(60), color: Colors.white, child: Stack( alignment: Alignment.centerLeft, children: [ // 背景 Positioned( left: 0, right: 0, child: Container( height: duSetWidth(60), decoration: BoxDecoration( color: AppColors.primaryBackground, ), child: Column( mainAxisAlignment: MainAxisAlignment.end, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: duSetWidth(1), decoration: BoxDecoration( color: AppColors.tabCellSeparator, ), child: Container(), ), ], ), ), ), // 右侧 Positioned( right: 0, child: Row( mainAxisAlignment: MainAxisAlignment.end, children: [ // 数字 number == null ? Container() : Container( margin: EdgeInsets.only(right: 11), child: Text( number.toString(), textAlign: TextAlign.right, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), ), ), // 箭头 hasArrow == false ? Container() : Container( width: duSetWidth(24), height: duSetWidth(24), margin: EdgeInsets.only(right: 20), child: Icon( Icons.arrow_forward_ios, color: AppColors.primaryText, ), ), ], ), ), // 标题 title == null ? Container() : Positioned( left: 20, child: Text( title, textAlign: TextAlign.left, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), ), ), // 子标题 subTitle == null ? Container() : Positioned( right: 20, child: Text( subTitle, textAlign: TextAlign.left, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), ), ), ], ), ), );&#125; 修改代码 build12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455@overrideWidget build(BuildContext context) &#123; final appState = Provider.of&lt;AppState&gt;(context); return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildUserHeader(), divider10Px(), _buildCell( title: \"Email\", subTitle: \"boltrogers@gmail.com\", ), divider10Px(), _buildCell( title: \"Favorite channels\", number: 12, hasArrow: true, ), _buildCell( title: \"Bookmarks\", number: 294, hasArrow: true, ), _buildCell( title: \"Popular categories\", number: 7, hasArrow: true, ), divider10Px(), _buildCell( title: \"Newsletter\", hasArrow: true, ), _buildCell( title: \"Settings\", hasArrow: true, ), divider10Px(), _buildCell( title: \"Switch Gray Filter\", hasArrow: true, onTap: () =&gt; appState.switchGrayFilter(), ), _buildCell( title: \"Log out\", hasArrow: true, onTap: () =&gt; goLoginPage(context), ), divider10Px(), ], ), );&#125; 技巧 vscode 固定代码 总结 资源设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.13 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 12 采用 sentry 平台收集错误","date":"2020-06-04T16:00:00.000Z","path":"2020/06/05/flutter-project/flutter-project-news-12-error-sentry/","text":"本节目标 使用 sentry 平台 flutter 集成 android 集成 ios 集成 正文错误收集策略 sentry 平台https://sentry.io 收集 flutter 参考 https://docs.sentry.io/platforms/flutter/ pubspec.yaml 12dependencies: sentry: ^3.0.1 lib/main.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// 创建 SentryClient 用于将异常日志上报给 sentry 平台final SentryClient _sentry = new SentryClient( dsn: 'https://xxxxxxxxxx',);// 是否开发环境bool get isInDebugMode &#123; return false; // false 开始上传 sentry&#125;// 上报异常的函数Future&lt;void&gt; _reportError(dynamic error, dynamic stackTrace) async &#123; print('Caught error: $error'); if (isInDebugMode) &#123; print(stackTrace); &#125; else &#123; final SentryResponse response = await _sentry.captureException( exception: error, stackTrace: stackTrace, ); if (response.isSuccessful) &#123; print('Success! Event ID: $&#123;response.eventId&#125;'); &#125; else &#123; print('Failed to report to Sentry.io: $&#123;response.error&#125;'); &#125; &#125;&#125;Future&lt;Null&gt; main() async &#123; // 捕获并上报 Flutter 异常 FlutterError.onError = (FlutterErrorDetails details) async &#123; if (isInDebugMode == true) &#123; FlutterError.dumpErrorToConsole(details); &#125; else &#123; Zone.current.handleUncaughtError(details.exception, details.stack); &#125; &#125;; // 捕获并上报 Dart 异常 runZonedGuarded(() async &#123; await Global.init(); runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;.value( value: Global.appState, ), ], child: Consumer&lt;AppState&gt;(builder: (context, appState, _) &#123; if (appState.isGrayFilter) &#123; return ColorFiltered( colorFilter: ColorFilter.mode(Colors.white, BlendMode.color), child: NewsApp(), ); &#125; else &#123; return NewsApp(); &#125; &#125;), ), ); &#125;, (Object error, StackTrace stack) &#123; _reportError(error, stack); &#125;);&#125; 收集 android 参考 https://docs.sentry.io/platforms/android/ 集成 sdk 123456789101112131415161718// ADD JCENTER REPOSITORYrepositories &#123; jcenter()&#125;// ADD COMPATIBILITY OPTIONS TO BE COMPATIBLE WITH JAVA 1.8android &#123; compileOptions &#123; sourceCompatibility = JavaVersion.VERSION_1_8 targetCompatibility = JavaVersion.VERSION_1_8 &#125;&#125;// ADD SENTRY ANDROID AS A DEPENDENCYdependencies &#123; // https://github.com/getsentry/sentry-android/releases implementation &apos;io.sentry:sentry-android:&#123;version&#125;&apos;&#125; android/app/src/main/AndroidManifest.xml 12345678910&lt;application android:name=\"io.flutter.app.FlutterApplication\" android:label=\"猫哥新闻\" android:icon=\"@mipmap/launcher_icon\"&gt; ... &lt;!-- sentry --&gt; &lt;meta-data android:name=\"io.sentry.dsn\" android:value=\"xxxxxxxxxxxxxxxxx\" /&gt;&lt;/application&gt; android/app/src/main/kotlin/com/example/flutterducafecatnews/CrashHandler.java 1234567public class CrashHandler implements UncaughtExceptionHandler &#123; @Override public void uncaughtException(Thread t, Throwable e) &#123; Sentry.captureException(e); &#125;&#125; android/app/src/main/kotlin/com/example/flutterducafecatnews/MainActivity.kt 123456789import io.sentry.core.Sentryclass MainActivity: FlutterActivity() &#123; override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) &#123; val crashHandler = CrashHandler() Thread.setDefaultUncaughtExceptionHandler(crashHandler) GeneratedPluginRegistrant.registerWith(flutterEngine) &#125;&#125; 收集 ios 资料 https://docs.sentry.io/platforms/cocoa/?_ga=2.17974013.534595501.1591172359-228174411.1591172359&amp;_gac=1.12380800.1591172359.EAIaIQobChMIrICd9Jrl6QIVCj5gCh2zFw8lEAAYASAAEgJwyfD_BwE&amp;platform=javascript 集成 CocoaPods 123456platform :ios, &apos;8.0&apos;use_frameworks! # This is importanttarget &apos;YourApp&apos; do pod &apos;Sentry&apos;, :git =&gt; &apos;https://github.com/getsentry/sentry-cocoa.git&apos;, :tag =&gt; &apos;5.1.2&apos;end ios/Runner/AppDelegate.swift 123456789101112131415161718&#123; SentrySDK.start(options: [ \"dsn\": \"https://xxxxxxxxxxxxxxxxxxx\", \"debug\": true, // Enabled debug when first installing is always helpful \"enableAutoSessionTracking\": true ]) NSSetUncaughtExceptionHandler &#123; exception in print(exception) SentrySDK.capture(message: exception.description) SentrySDK.capture(exception: exception) &#125; GeneratedPluginRegistrant.register(with: self) return super.application(application, didFinishLaunchingWithOptions: launchOptions) &#125; 资源参考 https://docs.sentry.io/platforms/flutter/ https://docs.sentry.io/platforms/android/ https://docs.sentry.io/platforms/cocoa/?_ga=2.17974013.534595501.1591172359-228174411.1591172359&amp;_gac=1.12380800.1591172359.EAIaIQobChMIrICd9Jrl6QIVCj5gCh2zFw8lEAAYASAAEgJwyfD_BwE&amp;platform=javascript 设计稿蓝湖预览https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.12 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Docker - 02 前端全栈 windows 从零安装 vmware + centos + docker + yapi","date":"2020-05-28T16:00:00.000Z","path":"2020/05/29/docker/docker-02-windows-vmware-centos-setup/","text":"本节目标 前端全栈主力操作系统选哪个 ? windows 下使用 docker 为什么不行 ? VMWare 安装 centos 远程 centos 系统 centos 配置 docker环境 视频https://youtu.be/NJIwbs8qmDY 正文1. 主力操作系统分析从前端全栈角度考虑 windows macos ubuntu nodejs、java、go、python ok ok ok vue、react、electron、rn ok ok ok 小程序 ok ok ok ios ok android ok ok ok 办公 office wps ps 微信 QQ XD VSCode ok ok ok macos 专属 safri sketch ok 程序编译、文件名大小写严格 ok ok 2. windows 直接用 docker 存在的问题问题： https://docs.docker.com/get-started/overview/https://docs.docker.com/get-started/https://docs.microsoft.com/en-us/windows/wsl/about 容器架构不同 切到 linux 容器架构，频繁遇到存储驱动兼容问题 WSL 2 的路还很长 总结 开发环境与线上环境不一致，引发不必要的联调成本。 3. windows 下 vmware 安装 centos3.1 下载 centos 7http://isoredirect.centos.org/centos/7/isos/x86_64/ 3.2 安装 centos 7操作见视频 3.3 配置 centos 网卡操作见视频 指令记录 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 修改配置$ cd /etc/sysconfig/network-scripts$ ll$ vi ifcfg-eth0ONBOOT=yes# vi 文件编辑# cd 进入目录# ll 目录列表------------------------------# 重启网卡$ service network restart# service 管理系统服务------------------------------# 安装工具$ yum install -y net-tools# yum 软件包管理------------------------------# 查看ip$ ifconfig------------------------------# 固定ip、dns$ vi ifcfg-eth0BOOTPROTO=staticIPADDR=10.211.55.5NETMASK=255.255.255.0GATEWAY=10.211.55.1DNS1=223.5.5.5DNS2=223.6.6.6------------------------------# 重启服务、查看dns$ service network restart$ cat /etc/resolv.conf 3.4 远程 ssh 工具 finalshellhttp://www.hostbuf.com xshell、sftphttps://www.netsarang.com/zh/xshell/ puttyhttps://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html cmderhttp://cmder.net/ 3.6 安装 docker卸载旧版12345678$ sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine sudo root 用户可以不用 原生安装1234567891011121314151617181920212223242526272829# 系统工具$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 加仓库$ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo# 安装 docker ce cli$ sudo yum install -y docker-ce docker-ce-cli containerd.io# 启动服务$ sudo systemctl start docker# 开机启动$ sudo systemctl enable docker# 安装 docker-compose$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose# 阿里云加速$ sudo mkdir -p /etc/docker$ sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123; \"registry-mirrors\": [\"https://8stycbeq.mirror.aliyuncs.com\"]&#125;EOF$ sudo systemctl daemon-reload$ sudo systemctl restart docker 4. 运行 yapi4.1 docker-compose 配置这次修改了数据持久化在指定目录 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253version: \"3\"services: mongo-yapi: image: mongo container_name: mongo-ypai restart: always # ports: # - 27017:27017 environment: - TZ=Asia/Shanghai - MONGO_INITDB_DATABASE=yapi # - MONGO_INITDB_ROOT_USERNAME=root # - MONGO_INITDB_ROOT_PASSWORD=$&#123;PASSWORD&#125; volumes: - ./docker-data/mongo-yapi:/data/db networks: docker_net: ipv4_address: 172.22.0.11 # https://github.com/fjc0k/docker-YApi web-yapi: image: jayfong/yapi:latest container_name: web-ypai restart: always ports: - 3000:3000 depends_on: - mongo-yapi links: - mongo-yapi environment: - TZ=Asia/Shanghai - YAPI_ADMIN_ACCOUNT=admin@ducafecat.tech - YAPI_ADMIN_PASSWORD=$&#123;PASSWORD&#125; - YAPI_CLOSE_REGISTER=true - YAPI_DB_SERVERNAME=mongo-yapi - YAPI_DB_PORT=27017 - YAPI_DB_DATABASE=yapi # - YAPI_DB_USER=root # - YAPI_DB_PASS=$&#123;PASSWORD&#125; - YAPI_MAIL_ENABLE=false - YAPI_LDAP_LOGIN_ENABLE=false - YAPI_PLUGINS=[] networks: docker_net: ipv4_address: 172.22.0.12networks: docker_net: driver: bridge ipam: config: - subnet: 172.22.0.0/16 4.2 运行 yapi12345# 启动$ docker-compose up -d# 卸载$ docker-compose down 4.3 修改本地解析C:\\Windows\\System32\\drivers\\etc\\hosts 1127.0.0.1 api.news.ducafecat.tech 问题整理VMware Workstation 与 Device/Credential Guard 不兼容。网上说卸载 Hyper-V， 没必要卸载 管理员方式运行 cmd 执行 1bcdedit /set hypervisorlaunchtype off 然后重启电脑 参考 install docker https://docs.docker.com/engine/install/centos/ install docker-compose https://github.com/docker/compose/releases 阿里镜像 https://cr.console.aliyun.com/cn-beijing/instances/mirrors © 猫哥 https://ducafecat.tech","tags":[{"name":"Docker Linux","slug":"Docker-Linux","permalink":"https://ducafecat.tech/tags/Docker-Linux/"}]},{"title":"Docker - 01 windows 下安装 docker 并运行 yapi 服务","date":"2020-05-20T16:00:00.000Z","path":"2020/05/21/docker/docker-01-install-yapi/","text":"本节目标 安装 docker 启动 yapi 备份、恢复 yapi 正文安装 Windows 10 专业工作站版 i tell you https://msdn.itellyou.cn/ 选用 business 镜像 安装 docker 官网 https://www.docker.com/ 启用 Hyper-V 切换 linunx container 阿里镜像加速 阿里镜像加速 https://cr.console.aliyun.com/cn-zhangjiakou/instances/mirrors 123456&#123; \"registry-mirrors\": [\"https://你的代码.mirror.aliyuncs.com\"], \"insecure-registries\": [], \"debug\": true, \"experimental\": true&#125; docker-compose 配置 yapi .env 1PASSWORD=$V7iTNk5N8#AkOeiwO@BywzBFte2^WsAuI$eJ4k9CKV0riqe docker-compose.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657version: \"3\"services: mongo-yapi: image: mongo container_name: mongo-ypai restart: always # ports: # - 27017:27017 environment: - TZ=Asia/Shanghai - MONGO_INITDB_DATABASE=yapi # - MONGO_INITDB_ROOT_USERNAME=root # - MONGO_INITDB_ROOT_PASSWORD=$&#123;PASSWORD&#125; volumes: # - ./docker-data/mongo-yapi:/data/db - mongo-data:/data/db networks: docker_net: ipv4_address: 172.22.0.11 # https://github.com/fjc0k/docker-YApi web-yapi: image: jayfong/yapi:latest container_name: web-ypai restart: always ports: - 3000:3000 depends_on: - mongo-yapi links: - mongo-yapi environment: - TZ=Asia/Shanghai - YAPI_ADMIN_ACCOUNT=admin@ducafecat.tech - YAPI_ADMIN_PASSWORD=$&#123;PASSWORD&#125; - YAPI_CLOSE_REGISTER=true - YAPI_DB_SERVERNAME=mongo-yapi - YAPI_DB_PORT=27017 - YAPI_DB_DATABASE=yapi # - YAPI_DB_USER=root # - YAPI_DB_PASS=$&#123;PASSWORD&#125; - YAPI_MAIL_ENABLE=false - YAPI_LDAP_LOGIN_ENABLE=false - YAPI_PLUGINS=[] networks: docker_net: ipv4_address: 172.22.0.12volumes: mongo-data:networks: docker_net: driver: bridge ipam: config: - subnet: 172.22.0.0/16 启动、卸载 ypai 服务 启动 1$ docker-compose up -d 卸载 1$ docker-compose down 本地域名解析 C:\\Windows\\System32\\drivers\\etc\\hosts 1127.0.0.1 api.news.ducafecat.tech 查询 volume12345$ docker volume lsDRIVER VOLUME NAMElocal 2fc91e2fd47a7110c2ecc5c8b88b997c4e6ddcf471a1df04f3fb618238ffd8aalocal 26e58cd678a97108f6dcd2cab33b9de341f992ceedacb7fd772c196bec908306local yapi-volumes_mongo-data 备份数据1$ docker run --rm --volumes-from mongo-ypai -v c:\\backup:/backup ubuntu tar cvf /backup/backup.tar -C /data/db . 还原数据1$ docker run --rm --volumes-from mongo-ypai -v c:\\backup:/backup ubuntu bash -c \"cd /data/db &amp;&amp; tar xvf /backup/backup.tar -C /data/db \" 资源参考 https://github.com/fjc0k/docker-YApi https://cr.console.aliyun.com/cn-zhangjiakou/instances/mirrors https://docs.docker.com/storage/volumes/#backup-restore-or-migrate-data-volumes 视频代码https://github.com/ducafecat/docker-yapi.git © 猫哥 https://ducafecat.tech","tags":[{"name":"Docker","slug":"Docker","permalink":"https://ducafecat.tech/tags/Docker/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 11 APP升级、android动态授权","date":"2020-05-15T16:00:00.000Z","path":"2020/05/16/flutter-project/flutter-project-news-11-update-permission/","text":"本节目标 app 升级策略 android 动态授权 android 设备目录 ios 支持 swift 语言 快速提示框 正文ios 支持 swift 语言 出发点 社区第三方包都在用 swift 开发，打包的时候需要加入 swift 语言包。 操作 创建一个支持 swift 的新项目，然后把 lib assets pubspec.yaml 覆盖即可。 app 升级策略 代码实现定义接口 post /app/update 加入依赖包 pubspec.yaml 123456789101112131415161718dependencies: # 设备信息 device_info: ^0.4.2+3 # 包信息 package_info: ^0.4.0+18 # 路径查询 path_provider: ^1.6.8 # permission 权限 permission_handler: ^5.0.0+hotfix.6 # 安装 install_plugin: ^2.0.1 # 对话框 easy_dialog: ^1.0.5 升级工具类 lib/common/utils/update.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import 'dart:io';import 'package:dio/dio.dart';import 'package:easy_dialog/easy_dialog.dart';import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/apis/app.dart';import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/widgets/toast.dart';import 'package:flutter_ducafecat_news/global.dart';import 'package:install_plugin/install_plugin.dart';import 'package:path_provider/path_provider.dart';/// app 升级class AppUpdateUtil &#123; static AppUpdateUtil _instance = AppUpdateUtil._internal(); factory AppUpdateUtil() =&gt; _instance; BuildContext _context; AppUpdateResponseEntity _appUpdateInfo; AppUpdateUtil._internal(); /// 获取更新信息 Future run(BuildContext context) async &#123; _context = context; // 提交 设备类型、发行渠道、架构、机型 AppUpdateRequestEntity requestDeviceInfo = AppUpdateRequestEntity( device: Global.isIOS == true ? \"ios\" : \"android\", channel: Global.channel, architecture: Global.isIOS == true ? Global.iosDeviceInfo.utsname.machine : Global.androidDeviceInfo.device, model: Global.isIOS == true ? Global.iosDeviceInfo.name : Global.androidDeviceInfo.brand, ); _appUpdateInfo = await AppApi.update(context: context, params: requestDeviceInfo); _runAppUpdate(); &#125; /// 检查是否有新版 Future _runAppUpdate() async &#123; // 比较版本 final isNewVersion = (_appUpdateInfo.latestVersion.compareTo(Global.packageInfo.version) == 1); // 安装 if (isNewVersion == true) &#123; _appUpdateConformDialog(() &#123; Navigator.of(_context).pop(); if (Global.isIOS == true) &#123; // 去苹果店 InstallPlugin.gotoAppStore(_appUpdateInfo.shopUrl); &#125; else &#123; // apk 下载安装 toastInfo(msg: \"开始下载升级包\"); _downloadAPKAndSetup(_appUpdateInfo.fileUrl); &#125; &#125;); &#125; &#125; /// 下载文件 &amp; 安装 Future _downloadAPKAndSetup(String fileUrl) async &#123; // 下载 Directory externalDir = await getExternalStorageDirectory(); String fullPath = externalDir.path + \"/release.apk\"; Dio dio = Dio(BaseOptions( responseType: ResponseType.bytes, followRedirects: false, validateStatus: (status) &#123; return status &lt; 500; &#125;)); Response response = await dio.get( fileUrl, ); File file = File(fullPath); var raf = file.openSync(mode: FileMode.write); raf.writeFromSync(response.data); await raf.close(); // 安装 await InstallPlugin.installApk(fullPath, Global.packageInfo.packageName); &#125; /// 升级确认对话框 void _appUpdateConformDialog(VoidCallback onPressed) &#123; EasyDialog( title: Text( \"发现新版本 $&#123;_appUpdateInfo.latestVersion&#125;\", style: TextStyle(fontWeight: FontWeight.bold), textScaleFactor: 1.2, ), description: Text( _appUpdateInfo.latestDescription, textScaleFactor: 1.1, textAlign: TextAlign.center, ), height: 220, contentList: [ Row( mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: onPressed, child: new Text( \"同意\", textScaleFactor: 1.2, ), ), new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: () &#123; Navigator.of(_context).pop(); &#125;, child: new Text( \"取消\", textScaleFactor: 1.2, ), ), ], ) ]).show(_context); &#125;&#125; 读取设备信息 插件 https://pub.flutter-io.cn/packages/device_info 全局信息 lib/global.dart 12345678910111213141516171819202122232425262728/// 是否 iosstatic bool isIOS = Platform.isIOS;/// android 设备信息static AndroidDeviceInfo androidDeviceInfo;/// ios 设备信息static IosDeviceInfo iosDeviceInfo;/// 包信息static PackageInfo packageInfo;/// initstatic Future init() async &#123; ... // 读取设备信息 DeviceInfoPlugin deviceInfoPlugin = DeviceInfoPlugin(); if (Global.isIOS) &#123; Global.iosDeviceInfo = await deviceInfoPlugin.iosInfo; &#125; else &#123; Global.androidDeviceInfo = await deviceInfoPlugin.androidInfo; &#125; // 包信息 Global.packageInfo = await PackageInfo.fromPlatform(); ... 定义升级信息 entity lib/common/entitys/app.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class AppUpdateRequestEntity &#123; String device; String channel; String architecture; String model; AppUpdateRequestEntity(&#123; this.device, this.channel, this.architecture, this.model, &#125;); factory AppUpdateRequestEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; AppUpdateRequestEntity( device: json[\"device\"], channel: json[\"channel\"], architecture: json[\"architecture\"], model: json[\"model\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"device\": device, \"channel\": channel, \"architecture\": architecture, \"model\": model, &#125;;&#125;class AppUpdateResponseEntity &#123; String shopUrl; String fileUrl; String latestVersion; String latestDescription; AppUpdateResponseEntity(&#123; this.shopUrl, this.fileUrl, this.latestVersion, this.latestDescription, &#125;); factory AppUpdateResponseEntity.fromJson(Map&lt;String, dynamic&gt; json) =&gt; AppUpdateResponseEntity( shopUrl: json[\"shopUrl\"], fileUrl: json[\"fileUrl\"], latestVersion: json[\"latestVersion\"], latestDescription: json[\"latestDescription\"], ); Map&lt;String, dynamic&gt; toJson() =&gt; &#123; \"shopUrl\": shopUrl, \"fileUrl\": fileUrl, \"latestVersion\": latestVersion, \"latestDescription\": latestDescription, &#125;;&#125; api 请求 lib/common/apis/app.dart 123456789101112131415/// 系统相关class AppApi &#123; /// 获取最新版本信息 static Future&lt;AppUpdateResponseEntity&gt; update(&#123; @required BuildContext context, AppUpdateRequestEntity params, &#125;) async &#123; var response = await HttpUtil().post( '/app/update', context: context, params: params, ); return AppUpdateResponseEntity.fromJson(response); &#125;&#125; 提交信息 获取版本 lib/common/utils/update.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243/// 获取更新信息Future run(BuildContext context) async &#123; _context = context; // 提交 设备类型、发行渠道、架构、机型 AppUpdateRequestEntity requestDeviceInfo = AppUpdateRequestEntity( device: Global.isIOS == true ? \"ios\" : \"android\", channel: Global.channel, architecture: Global.isIOS == true ? Global.iosDeviceInfo.utsname.machine : Global.androidDeviceInfo.device, model: Global.isIOS == true ? Global.iosDeviceInfo.name : Global.androidDeviceInfo.brand, ); _appUpdateInfo = await AppApi.update(context: context, params: requestDeviceInfo); _runAppUpdate();&#125;/// 检查是否有新版Future _runAppUpdate() async &#123; // 比较版本 final isNewVersion = (_appUpdateInfo.latestVersion.compareTo(Global.packageInfo.version) == 1); // 安装 if (isNewVersion == true) &#123; _appUpdateConformDialog(() &#123; Navigator.of(_context).pop(); if (Global.isIOS == true) &#123; // 去苹果店 InstallPlugin.gotoAppStore(_appUpdateInfo.shopUrl); &#125; else &#123; // apk 下载安装 toastInfo(msg: \"开始下载升级包\"); _downloadAPKAndSetup(_appUpdateInfo.fileUrl); &#125; &#125;); &#125;&#125; android 动态授权 插件 https://pub.flutter-io.cn/packages/permission_handler 官方文章 https://developer.android.com/training/permissions/requesting https://developer.android.com/training/permissions/usage-notes AndroidManifest.xml 中加入权限 android/app/src/main/AndroidManifest.xml 123&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt; flutter 启动页中执行授权 lib/pages/index/index.dart 在 initState 是执行 延迟 3 秒，用户体验好些 123456789101112131415161718192021class _IndexPageState extends State&lt;IndexPage&gt; &#123; @override void initState() &#123; super.initState(); if (Global.isRelease == true) &#123; doAppUpdate(); &#125; &#125; Future doAppUpdate() async &#123; await Future.delayed(Duration(seconds: 3), () async &#123; if (Global.isIOS == false &amp;&amp; await Permission.storage.isGranted == false) &#123; await [Permission.storage].request(); &#125; if (await Permission.storage.isGranted) &#123; AppUpdateUtil().run(context); &#125; &#125;); &#125; android 目录权限 插件 https://pub.flutter-io.cn/packages/path_providerhttps://pub.flutter-io.cn/packages/install_plugin 文章 https://developer.android.com/reference/androidx/core/content/FileProvider.html lib/common/utils/update.dart 123456789101112131415161718192021222324/// 下载文件 &amp; 安装Future _downloadAPKAndSetup(String fileUrl) async &#123; // 下载 Directory externalDir = await getExternalStorageDirectory(); String fullPath = externalDir.path + \"/release.apk\"; Dio dio = Dio(BaseOptions( responseType: ResponseType.bytes, followRedirects: false, validateStatus: (status) &#123; return status &lt; 500; &#125;)); Response response = await dio.get( fileUrl, ); File file = File(fullPath); var raf = file.openSync(mode: FileMode.write); raf.writeFromSync(response.data); await raf.close(); // 安装 await InstallPlugin.installApk(fullPath, Global.packageInfo.packageName);&#125; EasyDialog 快速提示框 插件 https://pub.flutter-io.cn/packages/easy_dialog lib/common/utils/update.dart 123456789101112131415161718192021222324252627282930313233343536373839404142/// 升级确认对话框void _appUpdateConformDialog(VoidCallback onPressed) &#123; EasyDialog( title: Text( \"发现新版本 $&#123;_appUpdateInfo.latestVersion&#125;\", style: TextStyle(fontWeight: FontWeight.bold), textScaleFactor: 1.2, ), description: Text( _appUpdateInfo.latestDescription, textScaleFactor: 1.1, textAlign: TextAlign.center, ), height: 220, contentList: [ Row( mainAxisAlignment: MainAxisAlignment.end, children: &lt;Widget&gt;[ new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: onPressed, child: new Text( \"同意\", textScaleFactor: 1.2, ), ), new FlatButton( padding: const EdgeInsets.only(top: 8.0), textColor: Colors.lightBlue, onPressed: () &#123; Navigator.of(_context).pop(); &#125;, child: new Text( \"取消\", textScaleFactor: 1.2, ), ), ], ) ]).show(_context);&#125; 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.11 参考 文章 https://developer.android.com/training/permissions/requestinghttps://developer.android.com/training/permissions/usage-noteshttps://developer.android.com/reference/androidx/core/content/FileProvider.html flutter 插件 https://pub.flutter-io.cn/packages/device_infohttps://pub.flutter-io.cn/packages/path_providerhttps://pub.flutter-io.cn/packages/permission_handlerhttps://pub.flutter-io.cn/packages/install_pluginhttps://pub.flutter-io.cn/packages/easy_dialog VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 10 编译发布正式版","date":"2020-05-04T16:00:00.000Z","path":"2020/05/05/flutter-project/flutter-project-news-10-release/","text":"本节目标 编译 build releae 程序瘦身 混淆程序 修改程序名称 制作图标 制作启动画面 正文1. APP 图标规格说明https://developer.android.com/google-play/resources/icon-design-specifications https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/ 图标尺寸android 512x512 ios 1024x1024 在线工具https://www.designevo.com/cn/logo-maker/ flutter_launcher_icons 插件https://pub.dev/packages/flutter_launcher_icons pubspec.yaml12345678dev_dependencies: # icons flutter_launcher_icons: ^0.7.5flutter_icons: android: \"launcher_icon\" ios: true image_path: \"assets/icons/logo-1024.png\" 生成图标1flutter pub run flutter_launcher_icons:main 图标目录android/app/src/main/res ios/Runner/Assets.xcassets/AppIcon.appiconset 2. 启动图片规格说明https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#device-screen-sizes-and-orientations https://developer.android.com/about/dashboards/index.html#Screens https://uiiiuiii.com/screen/ 图片尺寸iPhone XS Max 1242px × 2688px android xxhdpi xhdpi 在线工具https://hotpot.ai/icon_resizer 3. Android 发布证书签名说明https://developer.android.com/studio/publish/app-signing?hl=zh-cn 生成证书12345# 进入目录 android/app/keytool -genkey -v -keystore ./key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key# 输出文件android/app/key.jks Gradle 配置 android/gradle.properties 1android.enableAapt2=false # 不检测依赖资源 android/key.properties 1234storePassword=123456keyPassword=123456keyAlias=keystoreFile=./key.jks android/app/build.gradle 123456789101112131415161718192021222324252627282930// 定义属性读取对象，读取 android/key.propertiesdef keystoreProperties = new Properties()def keystorePropertiesFile = rootProject.file('key.properties')if (keystorePropertiesFile.exists()) &#123; keystoreProperties.load(new FileInputStream(keystorePropertiesFile))&#125;android &#123; compileSdkVersion 28 ... // 签名配置 signingConfigs &#123; release &#123; keyAlias keystoreProperties['keyAlias'] keyPassword keystoreProperties['keyPassword'] storeFile file(keystoreProperties['storeFile']) storePassword keystoreProperties['storePassword'] &#125; &#125; buildTypes &#123; // 发布配置 release &#123; signingConfig signingConfigs.release &#125; &#125;&#125; 修改版本号 pubspec.yaml 1version: 1.0.0+1 修改程序名称 android/app/src/main/AndroidManifest.xml 1234&lt;application android:name=\"io.flutter.app.FlutterApplication\" android:label=\"猫哥新闻\" android:icon=\"@mipmap/launcher_icon\"&gt; 设置网络权限 android/app/src/main/AndroidManifest.xml 1234 &lt;/application&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;&lt;/manifest&gt; 编译打包1flutter build apk --split-per-abi 输出目录123✓ Built build/app/outputs/apk/release/app-armeabi-v7a-release.apk (7.2MB).✓ Built build/app/outputs/apk/release/app-arm64-v8a-release.apk (7.4MB).✓ Built build/app/outputs/apk/release/app-x86_64-release.apk (7.6MB). 混淆编译https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code android/gradle.properties 1extra-gen-snapshot-options=--obfuscate android/proguard-rules.pro 12345678#Flutter Wrapper-dontwarn io.flutter.**-keep class io.flutter.app.** &#123; *; &#125;-keep class io.flutter.plugin.** &#123; *; &#125;-keep class io.flutter.util.** &#123; *; &#125;-keep class io.flutter.view.** &#123; *; &#125;-keep class io.flutter.** &#123; *; &#125;-keep class io.flutter.plugins.** &#123; *; &#125; android/app/build.gradle 123456789101112buildTypes &#123; release &#123; signingConfig signingConfigs.release minifyEnabled true //资源压缩设置 useProguard true //代码压缩设置 //读取代码压缩配置文件 proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' &#125;&#125; 编译 1flutter build apk --split-per-abi 启动页 图片 android/app/src/main/res/values/colors.xml 1234&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;color name=\"cyan\"&gt;#deecec&lt;/color&gt;&lt;/resources&gt; android/app/src/main/res/drawable/launch_background.xml 12345678910&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!-- Modify this file to customize your launch splash screen --&gt;&lt;layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:drawable=\"@color/cyan\" /&gt; &lt;item&gt; &lt;bitmap android:gravity=\"center\" android:src=\"@mipmap/launch_image\" /&gt; &lt;/item&gt;&lt;/layer-list&gt; 4. IOS 发布启动页 修改程序名称 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.10 参考https://flutter.dev/docs/deployment/android https://flutter.dev/docs/deployment/ios https://flutter.dev/docs/deployment/obfuscate https://github.com/flutter/flutter/wiki/Obfuscating-Dart-Code https://pub.dev/packages/flutter_launcher_icons https://developer.android.com/google-play/resources/icon-design-specifications https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/ https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#device-screen-sizes-and-orientations https://developer.android.com/about/dashboards/index.html#Screens https://uiiiuiii.com/screen/ VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 09 详情页展示、分享、远程真机调试","date":"2020-04-23T16:00:00.000Z","path":"2020/04/24/flutter-project/flutter-project-news-09-webview/","text":"本节目标 详情页技术方案比较 载入 web 内容 自动计算高度 清除广告、推荐 拦截请求 loading 状态显示 分享插件 远程 android 设备调试 详情展示技术方案选择分析工具 UI automator view 文件位置 /Users/ducafecat/Library/Android/sdk/tools/bin/uiautomatorviewer 淘宝方案 混合方式 头条 混合方式 什么值得买 单一 webView 技术点分析 webView 原生 混合方式 计算 web 页面高度 拦截请求，自定义指令 内存占用（尽量少的 dom 元素） 安装插件 webview_flutter https://pub.flutter-io.cn/packages/webview_flutter pubspec.yaml 12dependencies: webview_flutter: ^0.3.20+2 ios/Runner/Info.plist 12&lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt;&lt;true/&gt; 构建界面代码123456789101112131415161718192021222324252627282930313233343536// 顶部导航Widget _buildAppBar() &#123; return Container();&#125;// 页标题Widget _buildPageTitle() &#123; return Container();&#125;// 页头部Widget _buildPageHeader() &#123; return Container();&#125;// web内容Widget _buildWebView() &#123; return Container();&#125;@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: _buildAppBar(), body: SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildPageTitle(), Divider(height: 1), _buildPageHeader(), _buildWebView(), ], ), ), );&#125; url 载入1234567891011121314Widget _buildWebView() &#123; return Container( height: _webViewHeight, child: WebView( initialUrl: '$SERVER_API_URL/news/content/$&#123;widget.item.id&#125;', //widget.url, javascriptMode: JavascriptMode.unrestricted, onWebViewCreated: (WebViewController webViewController) async &#123; _controller.complete(webViewController); &#125;, gestureNavigationEnabled: true, ), );&#125; 计算高度 PX DP https://blog.akanelee.me/2018/07/31/dpi-px-pt-dp-sp/ 设备像素密度 一个逻辑像素占用多少个实际像素 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/devicePixelRatio https://api.flutter.dev/flutter/dart-ui/Window/devicePixelRatio.html 注册 js 12345double _webViewHeight = 200; javascriptChannels: &lt;JavascriptChannel&gt;[ _invokeJavascriptChannel(context), ].toSet(), 123456789101112131415// 注册js回调JavascriptChannel _invokeJavascriptChannel(BuildContext context) &#123; return JavascriptChannel( name: 'Invoke', onMessageReceived: (JavascriptMessage message) &#123; print(message.message); var webHeight = double.parse(message.message); if (webHeight != null) &#123; setState(() &#123; _webViewHeight = webHeight; &#125;); &#125; &#125;);&#125; 回调 123456onPageFinished: (String url) &#123; _getWebViewHeight(); setState(() &#123; _isPageFinished = true; &#125;);&#125;, 123456789101112// 获取页面高度_getWebViewHeight() async &#123; await (await _controller.future)?.evaluateJavascript(''' try &#123; // Invoke.postMessage([document.body.clientHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight]); let scrollHeight = document.documentElement.scrollHeight; if (scrollHeight) &#123; Invoke.postMessage(scrollHeight); &#125; &#125; catch &#123;&#125; ''');&#125; 清除广告、推荐 https://cn.engadget.com/cn-2020-01-21-google-pixelbook-go-not-pink-available.html 删除广告 123456789onPageStarted: (String url) &#123; Timer(Duration(seconds: 1), () &#123; setState(() &#123; _isPageFinished = true; &#125;); _removeAd(); _getViewHeight(); &#125;);&#125;, 1234567891011121314151617181920212223_removeWebViewAd() async &#123; await (await _controller.future)?.evaluateJavascript(''' try &#123; function removeElement(elementName)&#123; let _element = document.getElementById(elementName); if(!_element) &#123; _element = document.querySelector(elementName); &#125; if(!_element) &#123; return; &#125; let _parentElement = _element.parentNode; if(_parentElement)&#123; _parentElement.removeChild(_element); &#125; &#125; removeElement('module-engadget-deeplink-top-ad'); removeElement('module-engadget-deeplink-streams'); removeElement('footer'); &#125; catch&#123;&#125; ''');&#125; 拦截请求 页面中 href 1234567891011&lt;div class=\"tags\"&gt; &lt;a href=\"/tag/chrome-os\" class=\"tag\"&gt;chrome os&lt;/a&gt; &lt;a href=\"/tag/chromebook\" class=\"tag\"&gt;chromebook&lt;/a&gt; &lt;a href=\"/tag/computer\" class=\"tag\"&gt;computer&lt;/a&gt; &lt;a href=\"/tag/gear\" class=\"tag\"&gt;gear&lt;/a&gt; &lt;a href=\"/tag/google\" class=\"tag\"&gt;google&lt;/a&gt; &lt;a href=\"/tag/laptop\" class=\"tag\"&gt;laptop&lt;/a&gt; &lt;a href=\"/tag/personal computing\" class=\"tag\"&gt;personal computing&lt;/a&gt; &lt;a href=\"/tag/personalcomputing\" class=\"tag\"&gt;personalcomputing&lt;/a&gt; &lt;a href=\"/tag/pixelbook-go\" class=\"tag\"&gt;pixelbook go&lt;/a&gt;&lt;/div&gt; navigation 拦截 1234567navigationDelegate: (NavigationRequest request) &#123; if (request.url != '$SERVER_API_URL/news/content/$&#123;widget.item.id&#125;') &#123; toastInfo(msg: request.url); return NavigationDecision.prevent; &#125; return NavigationDecision.navigate;&#125;, loading 状态显示12345678910111213141516171819202122232425262728bool _isPageFinished = false;@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: _buildAppBar(), body: Stack( children: &lt;Widget&gt;[ SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildPageTitle(), Divider(height: 1), _buildPageHeader(), _buildWebView(), ], ), ), _isPageFinished == true ? Container() : Align( alignment: Alignment.center, child: LoadingBouncingGrid.square(), ), ], ));&#125; 分享安装插件12dependencies: share: ^0.6.4 代码123onPressed: () &#123; Share.share('$&#123;widget.item.title&#125; $&#123;widget.item.url&#125;');&#125;, 真机调试 scrcpy https://github.com/Genymobile/scrcpy 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.9 参考https://pub.flutter-io.cn/packages/webview_flutterhttps://pub.flutter-io.cn/packages/loading_animationshttps://pub.flutter-io.cn/packages/sharehttps://github.com/Genymobile/scrcpy VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 08 路由管理 auto_route","date":"2020-04-16T16:00:00.000Z","path":"2020/04/17/flutter-project/flutter-project-news-08-auto-route/","text":"本节目标 安装插件 路由定义 自动生成路由控制类 转场动画 登录检查中间件 带参数传递 获取返回值 正文一些优秀的路由插件 fluro 前端的使用体验 router.navigateTo(context, “/users/1234”, transition: TransitionType.fadeIn); flutter_modular 功能强大的路由管理：中间件、懒加载、状态管理、动态路由、分组路由、动画、返回值、命名路由 auto_route 设计精简、低耦合其它功能 功能：中间件、自动生成路由代码、动态路由、动画、返回值、命名路由 安装插件 官网 https://pub.flutter-io.cn/packages/auto_route pubspec.yaml 1234567891011121314dependencies: flutter: sdk: flutter # 路由管理 auto_route: ^0.4.4dev_dependencies: flutter_test: sdk: flutter # 路由生成 auto_route_generator: ^0.4.4 build_runner: 路由定义 lib/common/router/router.dart 123456789101112131415@MaterialAutoRouter()class $AppRouter &#123; @initial IndexPage indexPageRoute; WelcomePage welcomePageRoute; SignInPage signInPageRoute; SignUpPage signUpPageRoute; ApplicationPage applicationPageRoute; DetailsPage detailsPageRoute;&#125; 注意 $ 符号 自动生成路由控制类 执行命令 1flutter packages pub run build_runner build 自动生成 lib/common/router/router.gr.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144// GENERATED CODE - DO NOT MODIFY BY HAND// **************************************************************************// AutoRouteGenerator// **************************************************************************import 'package:flutter/material.dart';import 'package:flutter/cupertino.dart';import 'package:auto_route/auto_route.dart';import 'package:flutter_ducafecat_news/pages/index/index.dart';import 'package:flutter_ducafecat_news/pages/welcome/welcome.dart';import 'package:flutter_ducafecat_news/pages/sign_in/sign_in.dart';import 'package:flutter_ducafecat_news/pages/sign_up/sign_up.dart';import 'package:flutter_ducafecat_news/pages/application/application.dart';import 'package:flutter_ducafecat_news/common/router/auth_grard.dart';import 'package:flutter_ducafecat_news/pages/details/details.dart';abstract class Routes &#123; static const indexPageRoute = '/'; static const welcomePageRoute = '/welcome-page-route'; static const signInPageRoute = '/sign-in-page-route'; static const signUpPageRoute = '/sign-up-page-route'; static const applicationPageRoute = '/application-page-route'; static const detailsPageRoute = '/details-page-route';&#125;class AppRouter extends RouterBase &#123; @override Map&lt;String, List&lt;Type&gt;&gt; get guardedRoutes =&gt; &#123; Routes.applicationPageRoute: [AuthGuard], Routes.detailsPageRoute: [AuthGuard], &#125;; //This will probably be removed in future versions //you should call ExtendedNavigator.ofRouter&lt;Router&gt;() directly static ExtendedNavigatorState get navigator =&gt; ExtendedNavigator.ofRouter&lt;AppRouter&gt;(); @override Route&lt;dynamic&gt; onGenerateRoute(RouteSettings settings) &#123; final args = settings.arguments; switch (settings.name) &#123; case Routes.indexPageRoute: if (hasInvalidArgs&lt;IndexPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;IndexPageArguments&gt;(args); &#125; final typedArgs = args as IndexPageArguments ?? IndexPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; IndexPage(key: typedArgs.key), settings: settings, ); case Routes.welcomePageRoute: if (hasInvalidArgs&lt;WelcomePageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;WelcomePageArguments&gt;(args); &#125; final typedArgs = args as WelcomePageArguments ?? WelcomePageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; WelcomePage(key: typedArgs.key), settings: settings, ); case Routes.signInPageRoute: if (hasInvalidArgs&lt;SignInPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;SignInPageArguments&gt;(args); &#125; final typedArgs = args as SignInPageArguments ?? SignInPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; SignInPage(key: typedArgs.key), settings: settings, ); case Routes.signUpPageRoute: if (hasInvalidArgs&lt;SignUpPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;SignUpPageArguments&gt;(args); &#125; final typedArgs = args as SignUpPageArguments ?? SignUpPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; SignUpPage(key: typedArgs.key), settings: settings, ); case Routes.applicationPageRoute: if (hasInvalidArgs&lt;ApplicationPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;ApplicationPageArguments&gt;(args); &#125; final typedArgs = args as ApplicationPageArguments ?? ApplicationPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; ApplicationPage(key: typedArgs.key), settings: settings, ); case Routes.detailsPageRoute: if (hasInvalidArgs&lt;DetailsPageArguments&gt;(args)) &#123; return misTypedArgsRoute&lt;DetailsPageArguments&gt;(args); &#125; final typedArgs = args as DetailsPageArguments ?? DetailsPageArguments(); return MaterialPageRoute&lt;dynamic&gt;( builder: (_) =&gt; DetailsPage(key: typedArgs.key), settings: settings, ); default: return unknownRoutePage(settings.name); &#125; &#125;&#125;//**************************************************************************// Arguments holder classes//***************************************************************************//IndexPage arguments holder classclass IndexPageArguments &#123; final Key key; IndexPageArguments(&#123;this.key&#125;);&#125;//WelcomePage arguments holder classclass WelcomePageArguments &#123; final Key key; WelcomePageArguments(&#123;this.key&#125;);&#125;//SignInPage arguments holder classclass SignInPageArguments &#123; final Key key; SignInPageArguments(&#123;this.key&#125;);&#125;//SignUpPage arguments holder classclass SignUpPageArguments &#123; final Key key; SignUpPageArguments(&#123;this.key&#125;);&#125;//ApplicationPage arguments holder classclass ApplicationPageArguments &#123; final Key key; ApplicationPageArguments(&#123;this.key&#125;);&#125;//DetailsPage arguments holder classclass DetailsPageArguments &#123; final Key key; DetailsPageArguments(&#123;this.key&#125;);&#125; 路由跳转 方式 1：带 context 方式 1ExtendedNavigator.of(context).pushNamed(Routes.signUpPageRoute); 方式 2：不带 context 方式 1ExtendedNavigator.ofRouter&lt;AppRouter&gt;().pushNamed(Routes.signUpPageRoute); 方式 3：如果你只有一个导航 1ExtenedNavigator.rootNavigator.pushNamed(Routes.signUpPageRoute); 转场动画 lib/common/router/router.dart 1234567891011121314Widget zoomInTransition(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation, Widget child) &#123; // you get an animation object and a widget // make your own transition return ScaleTransition(scale: animation, child: child);&#125;@MaterialAutoRouter()class $AppRouter &#123; ... @CustomRoute(transitionsBuilder: zoomInTransition) ApplicationPage applicationPageRoute;&#125; 重新生成 1flutter packages pub run build_runner build 登录检查中间件 创建 lib/common/router/auth_grard.dart 12345678910111213141516import 'package:auto_route/auto_route.dart';import 'package:flutter_ducafecat_news/common/router/router.gr.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';class AuthGuard extends RouteGuard &#123; @override Future&lt;bool&gt; canNavigate(ExtendedNavigatorState navigator, String routeName, Object arguments) async &#123; var isAuth = await isAuthenticated(); if (isAuth == false) &#123; ExtendedNavigator.rootNavigator.pushNamed(Routes.signInPageRoute); &#125; return isAuth; &#125;&#125; 注册 lib/main.dart 1234567891011121314class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'ducafecat.tech', debugShowCheckedModeBanner: false, builder: ExtendedNavigator&lt;AppRouter&gt;( initialRoute: Routes.indexPageRoute, router: AppRouter(), guards: [AuthGuard()], ), ); &#125;&#125; 定义 lib/common/router/router.dart 12345678@MaterialAutoRouter()class $AppRouter &#123; ... @GuardedBy([AuthGuard]) @CustomRoute(transitionsBuilder: zoomInTransition) ApplicationPage applicationPageRoute;&#125; 重新生成 1flutter packages pub run build_runner build 参数传递 设定初始参数 lib/pages/details/details.dart 123class DetailsPage extends StatefulWidget &#123; final String cid; DetailsPage(&#123;Key key, this.cid&#125;) : super(key: key); 定义 lib/common/router/router.dart 123@MaterialAutoRouter(generateNavigationHelperExtension: true)class $AppRouter &#123; ... 重新生成 1flutter packages pub run build_runner build lib/common/router/router.gr.dart 123456//DetailsPage arguments holder classclass DetailsPageArguments &#123; final Key key; final String cid; DetailsPageArguments(&#123;this.key, this.cid&#125;);&#125; 导航参数 1ExtendedNavigator.rootNavigator.pushDetailsPageRoute(cid: '123'); 获取返回值 12345ExtendedNavigator.rootNavigator .pushNamed(Routes.signUpPageRoute) .then((onValue) &#123; print(onValue);&#125;); 资源视频 b 站 油管镜像 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.8 参考https://pub.flutter-io.cn/packages/auto_route VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc Code Spell Checker © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 07 Provider、认证授权、骨架屏、磁盘缓存","date":"2020-04-07T16:00:00.000Z","path":"2020/04/08/flutter-project/flutter-project-news-07-provider/","text":"本节目标 第一次登录显示欢迎界面 离线登录 Provider 响应数据管理 实现 APP 色彩灰度处理 注销登录 Http Status 401 认证授权 首页磁盘缓存 首页缓存策略，延迟 1~3 秒 首页骨架屏 视频 b 站 油管镜像 资源 蓝湖设计稿（加微信给授权 ducafecat）https://lanhuapp.com/url/wbhGq YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.7 参考 provider pk_skeleton 第一次显示欢迎界面、离线登录 lib/global.dart 12345678910111213141516171819202122/// 是否第一次打开static bool isFirstOpen = false;/// 是否离线登录static bool isOfflineLogin = false;/// initstatic Future init() async &#123; ... // 读取设备第一次打开 isFirstOpen = !StorageUtil().getBool(STORAGE_DEVICE_ALREADY_OPEN_KEY); if (isFirstOpen) &#123; StorageUtil().setBool(STORAGE_DEVICE_ALREADY_OPEN_KEY, true); &#125; // 读取离线用户信息 var _profileJSON = StorageUtil().getJSON(STORAGE_USER_PROFILE_KEY); if (_profileJSON != null) &#123; profile = UserLoginResponseEntity.fromJson(_profileJSON); isOfflineLogin = true; &#125; lib/pages/index/index.dart 123456789101112131415161718192021222324class IndexPage extends StatefulWidget &#123; IndexPage(&#123;Key key&#125;) : super(key: key); @override _IndexPageState createState() =&gt; _IndexPageState();&#125;class _IndexPageState extends State&lt;IndexPage&gt; &#123; @override Widget build(BuildContext context) &#123; ScreenUtil.init( context, width: 375, height: 812 - 44 - 34, allowFontScaling: true, ); return Scaffold( body: Global.isFirstOpen == true ? WelcomePage() : Global.isOfflineLogin == true ? ApplicationPage() : SignInPage(), ); &#125;&#125; Provider 实现动态灰度处理https://pub.flutter-io.cn/packages/provider 步骤 1：安装依赖12dependencies: provider: ^4.0.4 步骤 2：创建响应数据类 lib/common/provider/app.dart 123456789101112import 'package:flutter/material.dart';/// 系统相应状态class AppState with ChangeNotifier &#123; bool _isGrayFilter; get isGrayFilter =&gt; _isGrayFilter; AppState(&#123;bool isGrayFilter = false&#125;) &#123; this._isGrayFilter = isGrayFilter; &#125;&#125; 步骤 3：初始响应数据方式一：先创建数据对象，再挂载 lib/global.dart 12/// 应用状态static AppState appState = AppState(); lib/main.dart 12345678910void main() =&gt; Global.init().then((e) =&gt; runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;.value( value: Global.appState, ), ], child: MyApp(), ), )); 方式二：挂载时，创建对象 lib/main.dart 12345678910void main() =&gt; Global.init().then((e) =&gt; runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;( Create: (_) =&gt; new AppState(), ), ], child: MyApp(), ), )); 步骤 4：通知数据发声变化 lib/common/provider/app.dart 123456789class AppState with ChangeNotifier &#123; ... // 切换灰色滤镜 switchGrayFilter() &#123; _isGrayFilter = !_isGrayFilter; notifyListeners(); &#125;&#125; 步骤 5：收到数据发声变化方式一：Consumer lib/main.dart 12345678910111213141516171819void main() =&gt; Global.init().then((e) =&gt; runApp( MultiProvider( providers: [ ChangeNotifierProvider&lt;AppState&gt;.value( value: Global.appState, ), ], child: Consumer&lt;AppState&gt;(builder: (context, appState, _) &#123; if (appState.isGrayFilter) &#123; return ColorFiltered( colorFilter: ColorFilter.mode(Colors.white, BlendMode.color), child: MyApp(), ); &#125; else &#123; return MyApp(); &#125; &#125;), ), )); 方式二：Provider.of lib/pages/account/account.dart 123456789101112final appState = Provider.of&lt;AppState&gt;(context);return Column( children: &lt;Widget&gt;[ MaterialButton( onPressed: () &#123; appState.switchGrayFilter(); &#125;, child: Text('灰色切换 $&#123;appState.isGrayFilter&#125;'), ), ],); 多个响应数据处理 挂载用 MultiProvider 接收用 Consumer2 ~ Consumer6 注销登录 lib/common/utils/authentication.dart 123456789101112131415161718/// 检查是否有 tokenFuture&lt;bool&gt; isAuthenticated() async &#123; var profileJSON = StorageUtil().getJSON(STORAGE_USER_PROFILE_KEY); return profileJSON != null ? true : false;&#125;/// 删除缓存 tokenFuture deleteAuthentication() async &#123; await StorageUtil().remove(STORAGE_USER_PROFILE_KEY); Global.profile = null;&#125;/// 重新登录Future goLoginPage(BuildContext context) async &#123; await deleteAuthentication(); Navigator.pushNamedAndRemoveUntil( context, \"/sign-in\", (Route&lt;dynamic&gt; route) =&gt; false);&#125; lib/pages/account/account.dart 12345678910111213141516171819class _AccountPageState extends State&lt;AccountPage&gt; &#123; @override Widget build(BuildContext context) &#123; final appState = Provider.of&lt;AppState&gt;(context); return Column( children: &lt;Widget&gt;[ Text('用户: $&#123;Global.profile.displayName&#125;'), Divider(), MaterialButton( onPressed: () &#123; goLoginPage(context); &#125;, child: Text('退出'), ), ], ); &#125;&#125; Http Status 401 认证授权dio 封装界面的上下文对象 BuildContext context lib/common/utils/http.dart 123456789101112Future post( String path, &#123; @required BuildContext context, dynamic params, Options options,&#125;) async &#123; Options requestOptions = options ?? Options(); requestOptions = requestOptions.merge(extra: &#123; \"context\": context, &#125;); ...&#125; 错误处理 401 去登录界面 lib/common/utils/http.dart 12345678910111213141516171819202122// 添加拦截器dio.interceptors .add(InterceptorsWrapper(onRequest: (RequestOptions options) &#123; return options; //continue&#125;, onResponse: (Response response) &#123; return response; // continue&#125;, onError: (DioError e) &#123; ErrorEntity eInfo = createErrorEntity(e); // 错误提示 toastInfo(msg: eInfo.message); // 错误交互处理 var context = e.request.extra[\"context\"]; if (context != null) &#123; switch (eInfo.code) &#123; case 401: // 没有权限 重新登录 goLoginPage(context); break; default: &#125; &#125; return eInfo;&#125;)); 首页磁盘缓存 lib/common/utils/net_cache.dart 12345678910111213141516171819202122232425// 策略 1 内存缓存优先，2 然后才是磁盘缓存// 1 内存缓存var ob = cache[key];if (ob != null) &#123; //若缓存未过期，则返回缓存内容 if ((DateTime.now().millisecondsSinceEpoch - ob.timeStamp) / 1000 &lt; CACHE_MAXAGE) &#123; return cache[key].response; &#125; else &#123; //若已过期则删除缓存，继续向服务器请求 cache.remove(key); &#125;&#125;// 2 磁盘缓存if (cacheDisk) &#123; var cacheData = StorageUtil().getJSON(key); if (cacheData != null) &#123; return Response( statusCode: 200, data: cacheData, ); &#125;&#125; 首页缓存策略，延迟 1~3 秒 lib/pages/main/channels_widget.dart 1234567891011// 如果有磁盘缓存，延迟3秒拉取更新档案_loadLatestWithDiskCache() &#123; if (CACHE_ENABLE == true) &#123; var cacheData = StorageUtil().getJSON(STORAGE_INDEX_NEWS_CACHE_KEY); if (cacheData != null) &#123; Timer(Duration(seconds: 3), () &#123; _controller.callRefresh(); &#125;); &#125; &#125;&#125; 首页骨架屏https://pub.flutter-io.cn/packages/pk_skeleton lib/pages/main/main.dart 12345678@overrideWidget build(BuildContext context) &#123; return _newsPageList == null ? cardListSkeleton() : EasyRefresh( enableControlFinishRefresh: true, controller: _controller, ... © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 06 代码规范、业务代码组织、新闻首页实现","date":"2020-03-30T16:00:00.000Z","path":"2020/03/31/flutter-project/flutter-project-news-06-main-ui/","text":"1 本节目标 代码规范 业务代码组织 首页代码编写 2 代码规范2.1 官方代码规范https://dart.dev/guides/language/effective-dart 2.3 chrome 插件 &lt;彩云小译 - 网页翻译插件&gt;https://chrome.google.com/webstore/detail/lingocloud-web-translatio/jmpepeebcbihafjjadogphmbgiffiajh 2.4 阿里项目规范https://github.com/alibaba/flutter-go/blob/master/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md 3 业务界面代码组织3.1 redux、fish-redux redux 架构 fish-redux 架构 进一步的细分，进行规范 https://github.com/alibaba/fish-redux/tree/master/dochttps://medium.com/@dave790602/flutter-architecture-fish-redux-9b753912224a fish-redux 代码 3.2 bloc 架构 https://bloclibrary.dev/#/ 代码组织 3.3 简单就是美 3.4 如何平衡 是否团队开发 是否简单业务（20 页面） 是否重交互（视频社交、聊天 A） 4 新闻首页实现4.1 界面组成分析 分类导航、推荐新闻、频道导航 新闻列表、广告 ad、邮件订阅 4.2 代码框架12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758...class _MainPageState extends State&lt;MainPage&gt; &#123; @override void initState() &#123; super.initState(); _loadAllData(); &#125; // 读取所有数据 _loadAllData() async &#123; &#125; // 分类菜单 Widget _buildCategories() &#123; return Container(); &#125; // 推荐阅读 Widget _buildRecommend() &#123; return Container(); &#125; // 频道 Widget _buildChannels() &#123; return Container(); &#125; // 新闻列表 Widget _buildNewsList() &#123; return Container(); &#125; // ad 广告条 // 邮件订阅 Widget _buildEmailSubscribe() &#123; return newsletterWidget(); &#125; @override Widget build(BuildContext context) &#123; return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildCategories(), Divider(height: 1), _buildRecommend(), Divider(height: 1), _buildChannels(), Divider(height: 1), _buildNewsList(), Divider(height: 1), _buildEmailSubscribe(), ], ), ); &#125;&#125; 4.3 实现业务 创建 widget 单独文件 分类导航 lib/pages/main/categories_widget.dart 1234567891011121314151617181920212223242526272829303132Widget newsCategoriesWidget(&#123; List&lt;CategoryResponseEntity&gt; categories, String selCategoryCode, Function(CategoryResponseEntity) onTap,&#125;) &#123; return SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( children: categories.map&lt;Widget&gt;((item) &#123; return Container( alignment: Alignment.center, height: duSetHeight(52), padding: EdgeInsets.symmetric(horizontal: 8), child: GestureDetector( child: Text( item.title, style: TextStyle( color: selCategoryCode == item.code ? AppColors.secondaryElementText : AppColors.primaryText, fontSize: duSetFontSize(18), fontFamily: 'Montserrat', fontWeight: FontWeight.w600, ), ), onTap: () =&gt; onTap(item), ), ); &#125;).toList(), ), );&#125; 频道导航 lib/pages/main/channels_widget.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879Widget newsChannelsWidget(&#123; List&lt;ChannelResponseEntity&gt; channels, Function(ChannelResponseEntity) onTap,&#125;) &#123; return Container( height: duSetHeight(137), child: SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( children: channels.map&lt;Widget&gt;((item) &#123; return Container( width: duSetWidth(70), height: duSetHeight(97), margin: EdgeInsets.symmetric(horizontal: duSetWidth(10)), child: InkWell( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ // 图标 Container( height: duSetWidth(64), margin: EdgeInsets.symmetric(horizontal: duSetWidth(3)), child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, top: 0, right: 0, child: Container( height: duSetWidth(64), decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: BorderRadius.all(Radius.circular(32)), ), child: Container(), ), ), Positioned( left: duSetWidth(10), top: duSetWidth(10), right: duSetWidth(10), child: Image.asset( \"assets/images/channel-$&#123;item.code&#125;.png\", fit: BoxFit.none, ), ), ], ), ), // 标题 Text( item.title, textAlign: TextAlign.center, overflow: TextOverflow.clip, maxLines: 1, style: TextStyle( color: AppColors.thirdElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(14), height: 1, ), ), ], ), onTap: () =&gt; onTap(item), ), ); &#125;).toList(), ), ), );&#125; 新闻行 Item lib/pages/main/news_item_widget.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116Widget newsItem(NewsItem item) &#123; return Container( height: duSetHeight(161), padding: EdgeInsets.all(duSetWidth(20)), child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 图 imageCached( item.thumbnail, width: duSetWidth(121), height: duSetWidth(121), ), // 右侧 SizedBox( width: duSetWidth(194), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 作者 Container( margin: EdgeInsets.all(0), child: Text( item.author, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), ), ), // 标题 Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Text( item.title, style: TextStyle( fontFamily: 'Montserrat', fontWeight: FontWeight.w500, color: AppColors.primaryText, fontSize: duSetFontSize(16), height: 1, ), overflow: TextOverflow.clip, maxLines: 3, ), ), // Spacer Spacer(), // 一行 3 列 Container( child: Row( crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ // 分类 ConstrainedBox( constraints: BoxConstraints( maxWidth: duSetWidth(60), ), child: Text( item.category, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.secondaryElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 添加时间 Container( width: duSetWidth(15), ), ConstrainedBox( constraints: BoxConstraints( maxWidth: duSetWidth(100), ), child: Text( '• $&#123;duTimeLineFormat(item.addtime)&#125;', style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 更多 Spacer(), InkWell( child: Icon( Icons.more_horiz, color: AppColors.primaryText, size: 24, ), onTap: () &#123;&#125;, ), ], ), ), ], ), ), ], ), );&#125; 邮件订阅 lib/pages/main/newsletter_widget.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283Widget newsletterWidget() &#123; return Container( margin: EdgeInsets.all(duSetWidth(20)), child: Column( children: &lt;Widget&gt;[ // newsletter Row( children: &lt;Widget&gt;[ Text( 'Newsletter', style: TextStyle( fontFamily: 'Montserrat', fontSize: duSetFontSize(18), fontWeight: FontWeight.w600, color: AppColors.thirdElement, ), ), Spacer(), IconButton( icon: Icon( Icons.close, color: AppColors.thirdElementText, size: duSetFontSize(17), ), onPressed: () &#123;&#125;, ), ], ), // email inputEmailEdit( marginTop: 19, keyboardType: TextInputType.emailAddress, hintText: \"Email\", isPassword: false, controller: null, ), // btn subcrible Padding( padding: EdgeInsets.only(top: 15), child: btnFlatButtonWidget( onPressed: () &#123;&#125;, width: duSetWidth(335), height: duSetHeight(44), fontWeight: FontWeight.w600, title: \"Subscribe\", ), ), // disc Container( margin: EdgeInsets.only(top: duSetHeight(29)), width: duSetWidth(261), child: Text.rich(TextSpan(children: &lt;TextSpan&gt;[ TextSpan( text: 'By clicking on Subscribe button you agree to accept', style: new TextStyle( color: AppColors.thirdElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(14), ), ), TextSpan( text: ' Privacy Policy', style: new TextStyle( color: AppColors.secondaryElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(14), ), recognizer: TapGestureRecognizer() ..onTap = () &#123; toastInfo(msg: 'Privacy Policy'); &#125;, ), ])), ), ], ), );&#125; 推荐阅读 lib/pages/main/recommend_widget.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101Widget recommendWidget(NewsRecommendResponseEntity newsRecommend) &#123; return Container( margin: EdgeInsets.all(duSetWidth(20)), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ // 图 imageCached( newsRecommend.thumbnail, width: duSetWidth(335), height: duSetHeight(290), ), // 作者 Container( margin: EdgeInsets.only(top: duSetHeight(14)), child: Text( newsRecommend.author, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), ), ), ), // 标题 Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Text( newsRecommend.title, style: TextStyle( fontFamily: 'Montserrat', fontWeight: FontWeight.w600, color: AppColors.primaryText, fontSize: duSetFontSize(24), height: 1, ), ), ), // 一行 3 列 Container( margin: EdgeInsets.only(top: duSetHeight(10)), child: Row( crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ // 分类 ConstrainedBox( constraints: const BoxConstraints( maxWidth: 120, ), child: Text( newsRecommend.category, style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.secondaryElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 添加时间 Container( width: duSetWidth(15), ), ConstrainedBox( constraints: const BoxConstraints( maxWidth: 120, ), child: Text( '• $&#123;duTimeLineFormat(newsRecommend.addtime)&#125;', style: TextStyle( fontFamily: 'Avenir', fontWeight: FontWeight.normal, color: AppColors.thirdElementText, fontSize: duSetFontSize(14), height: 1, ), overflow: TextOverflow.clip, maxLines: 1, ), ), // 更多 Spacer(), InkWell( child: Icon( Icons.more_horiz, color: AppColors.primaryText, size: 24, ), onTap: () &#123;&#125;, ), ], ), ), ], ), );&#125; 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.6 参考 Flutter Go 代码开发规范 0.1.0 版 effective-dart bloc VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 05 AppData、Cache、Fiddle、iconfont、主界面搭建","date":"2020-03-24T16:00:00.000Z","path":"2020/03/25/flutter-project/flutter-project-news-05-cache-iconfont/","text":"本节目标 全局数据、响应数据、持久化 http get 缓存 http proxy 代理 fiddle 抓包工具 iconfont 字体库 主界面搭建 BottomNavigationBar 导航控件 编写 api 接口代码 客户端数据管理数据类型 全局数据 存储在内存 用户数据、语言包 响应数据 存储在内存 用户登录状态、多语言、皮肤样式 Redux、Bloc、provider 持久化 APP 保持磁盘上 浏览器 cookie localStorage 编写全局管理 lib/global.dart 123456789101112131415161718192021222324252627282930313233343536373839404142/// 全局配置class Global &#123; /// 用户配置 static UserLoginResponseEntity profile = UserLoginResponseEntity( accessToken: null, ); /// 是否 release static bool get isRelease =&gt; bool.fromEnvironment(\"dart.vm.product\"); /// init static Future init() async &#123; // 运行初始 WidgetsFlutterBinding.ensureInitialized(); // 工具初始 await StorageUtil.init(); HttpUtil(); // 读取离线用户信息 var _profileJSON = StorageUtil().getJSON(STORAGE_USER_PROFILE_KEY); if (_profileJSON != null) &#123; profile = UserLoginResponseEntity.fromJson(_profileJSON); &#125; // http 缓存 // android 状态栏为透明的沉浸 if (Platform.isAndroid) &#123; SystemUiOverlayStyle systemUiOverlayStyle = SystemUiOverlayStyle(statusBarColor: Colors.transparent); SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle); &#125; &#125; // 持久化 用户信息 static Future&lt;bool&gt; saveProfile(UserLoginResponseEntity userResponse) &#123; profile = userResponse; return StorageUtil() .setJSON(STORAGE_USER_PROFILE_KEY, userResponse.toJson()); &#125;&#125; 调用运行 lib/main.dart 12345678void main() =&gt; Global.init().then((e) =&gt; runApp(MyApp()));class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Container(); &#125;&#125; Http 内存缓存缓存策略 代码 缓存工具类 lib/common/utils/net_cache.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import 'dart:collection';import 'package:dio/dio.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';class CacheObject &#123; CacheObject(this.response) : timeStamp = DateTime.now().millisecondsSinceEpoch; Response response; int timeStamp; @override bool operator ==(other) &#123; return response.hashCode == other.hashCode; &#125; @override int get hashCode =&gt; response.realUri.hashCode;&#125;class NetCache extends Interceptor &#123; // 为确保迭代器顺序和对象插入时间一致顺序一致，我们使用LinkedHashMap var cache = LinkedHashMap&lt;String, CacheObject&gt;(); @override onRequest(RequestOptions options) async &#123; if (!CACHE_ENABLE) return options; // refresh标记是否是\"下拉刷新\" bool refresh = options.extra[\"refresh\"] == true; // 如果是下拉刷新，先删除相关缓存 if (refresh) &#123; if (options.extra[\"list\"] == true) &#123; //若是列表，则只要url中包含当前path的缓存全部删除（简单实现，并不精准） cache.removeWhere((key, v) =&gt; key.contains(options.path)); &#125; else &#123; // 如果不是列表，则只删除uri相同的缓存 delete(options.uri.toString()); &#125; return options; &#125; // get 请求，开启缓存 if (options.extra[\"noCache\"] != true &amp;&amp; options.method.toLowerCase() == 'get') &#123; String key = options.extra[\"cacheKey\"] ?? options.uri.toString(); var ob = cache[key]; if (ob != null) &#123; //若缓存未过期，则返回缓存内容 if ((DateTime.now().millisecondsSinceEpoch - ob.timeStamp) / 1000 &lt; CACHE_MAXAGE) &#123; return cache[key].response; &#125; else &#123; //若已过期则删除缓存，继续向服务器请求 cache.remove(key); &#125; &#125; &#125; &#125; @override onError(DioError err) async &#123; // 错误状态不缓存 &#125; @override onResponse(Response response) async &#123; // 如果启用缓存，将返回结果保存到缓存 if (CACHE_ENABLE) &#123; _saveCache(response); &#125; &#125; _saveCache(Response object) &#123; RequestOptions options = object.request; // 只缓存 get 的请求 if (options.extra[\"noCache\"] != true &amp;&amp; options.method.toLowerCase() == \"get\") &#123; // 如果缓存数量超过最大数量限制，则先移除最早的一条记录 if (cache.length == CACHE_MAXCOUNT) &#123; cache.remove(cache[cache.keys.first]); &#125; String key = options.extra[\"cacheKey\"] ?? options.uri.toString(); cache[key] = CacheObject(object); &#125; &#125; void delete(String key) &#123; cache.remove(key); &#125;&#125; dio 封装 lib/common/utils/http.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 加内存缓存HttpUtil._internal() &#123; ... dio.interceptors.add(NetCache()); ...&#125;// 修改 get 请求/// restful get 操作/// refresh 是否下拉刷新 默认 false/// noCache 是否不缓存 默认 true/// list 是否列表 默认 false/// cacheKey 缓存keyFuture get( String path, &#123; dynamic params, Options options, bool refresh = false, bool noCache = !CACHE_ENABLE, bool list = false, String cacheKey,&#125;) async &#123; try &#123; Options requestOptions = options ?? Options(); requestOptions = requestOptions.merge(extra: &#123; \"refresh\": refresh, \"noCache\": noCache, \"list\": list, \"cacheKey\": cacheKey, &#125;); Map&lt;String, dynamic&gt; _authorization = getAuthorizationHeader(); if (_authorization != null) &#123; requestOptions = requestOptions.merge(headers: _authorization); &#125; var response = await dio.get(path, queryParameters: params, options: requestOptions, cancelToken: cancelToken); return response.data; &#125; on DioError catch (e) &#123; throw createErrorEntity(e); &#125;&#125; Http Proxy 代理 + Fiddle 抓包安装 Fiddlehttps://www.telerik.com/download/fiddler-everywhere dio 加入 proxy lib/common/utils/http.dart 1234567891011if (!Global.isRelease &amp;&amp; PROXY_ENABLE) &#123; (dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client) &#123; client.findProxy = (uri) &#123; return \"PROXY $PROXY_IP:$PROXY_PORT\"; &#125;; //代理工具会提供一个抓包的自签名证书，会通不过证书校验，所以我们禁用证书校验 client.badCertificateCallback = (X509Certificate cert, String host, int port) =&gt; true; &#125;;&#125; Iconfont 字体库引入流程 登录 https://www.iconfont.cn 创建字体项目 字体文件放入 assets/fonts/iconfont.ttf pubspec.yaml 12345fonts: ... - family: Iconfont fonts: - asset: assets/fonts/iconfont.ttf lib/common/utils/iconfont.dart 123456789101112import 'package:flutter/material.dart';class Iconfont &#123; // iconName: share static const share = IconData( 0xe60d, fontFamily: 'Iconfont', matchTextDirection: true, ); ...&#125; 自动生成字体库代码https://github.com/ymzuiku/iconfont_builder 拉取项目、编译 1234567891011# 拉取项目&gt; git clone https://github.com/ymzuiku/iconfont_builder# 更新包&gt; pub get# 安装工具&gt; pub global activate iconfont_builder# 检查环境配置export PATH=$&#123;PATH&#125;:~/.pub-cache/bin 参考我的配置 123456789101112131415# flutter sdkexport PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin# dart sdkexport PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin/cache/dart-sdk/binexport PATH=$&#123;PATH&#125;:~/.pub-cache/bin# flutter-io 国内镜像export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn# androidexport ANDROID_HOME=~/Library/Android/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools 生成字体类 12cd 你的项目根目录iconfont_builder --from ./assets/fonts --to ./lib/common/utils/iconfont.dart 编写 api 业务代码 yapi 配置 导入 doc/api.json 代码 搭建主界面框架 框架页面 lib/pages/application/application.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152...class _ApplicationPageState extends State&lt;ApplicationPage&gt; with SingleTickerProviderStateMixin &#123; // 当前 tab 页码 int _page = 0; // tab 页标题 final List&lt;String&gt; _tabTitles = [ 'Welcome', 'Cagegory', 'Bookmarks', 'Account' ]; // 页控制器 PageController _pageController; // 底部导航项目 final List&lt;BottomNavigationBarItem&gt; _bottomTabs = &lt;BottomNavigationBarItem&gt;[...]; // tab栏动画 void _handleNavBarTap(int index) &#123; ... &#125; // tab栏页码切换 void _handlePageChanged(int page) &#123; ... &#125; // 顶部导航 Widget _buildAppBar() &#123; return Container(); &#125; // 内容页 Widget _buildPageView() &#123; return Container(); &#125; // 底部导航 Widget _buildBottomNavigationBar() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: _buildAppBar(), body: _buildPageView(), bottomNavigationBar: _buildBottomNavigationBar(), ); &#125;&#125; 编写首页代码 首页代码 lib/pages/main/main.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263...class _MainPageState extends State&lt;MainPage&gt; &#123; NewsPageListResponseEntity _newsPageList; // 新闻翻页 NewsRecommendResponseEntity _newsRecommend; // 新闻推荐 List&lt;CategoryResponseEntity&gt; _categories; // 分类 List&lt;ChannelResponseEntity&gt; _channels; // 频道 String _selCategoryCode; // 选中的分类Code @override void initState() &#123; super.initState(); _loadAllData(); &#125; // 读取所有数据 _loadAllData() async &#123; ... &#125; // 分类菜单 Widget _buildCategories() &#123; return Container(); &#125; // 抽取前先实现业务 // 推荐阅读 Widget _buildRecommend() &#123; return Container(); &#125; // 频道 Widget _buildChannels() &#123; return Container(); &#125; // 新闻列表 Widget _buildNewsList() &#123; return Container(); &#125; // ad 广告条 // 邮件订阅 Widget _buildEmailSubscribe() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return SingleChildScrollView( child: Column( children: &lt;Widget&gt;[ _buildCategories(), _buildRecommend(), _buildChannels(), _buildNewsList(), _buildEmailSubscribe(), ], ), ); &#125;&#125; 抽取新闻分类 lib/pages/main/categories_widget.dart 123456789101112131415161718192021222324252627282930313233Widget newsCategoriesWidget( &#123;List&lt;CategoryResponseEntity&gt; categories, String selCategoryCode, Function(CategoryResponseEntity) onTap&#125;) &#123; return categories == null ? Container() : SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( children: categories.map&lt;Widget&gt;((item) &#123; return Container( alignment: Alignment.center, height: duSetHeight(52), padding: EdgeInsets.symmetric(horizontal: 8), child: GestureDetector( child: Text( item.title, style: TextStyle( color: selCategoryCode == item.code ? AppColors.secondaryElementText : AppColors.primaryText, fontSize: duSetFontSize(18), fontFamily: 'Montserrat', fontWeight: FontWeight.w600, ), ), onTap: () =&gt; onTap(item), ), ); &#125;).toList(), ), );&#125; 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat YAPI 接口管理http://yapi.demo.qunar.com/ git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.5 工具 json to object quicktype Fiddler 抓包 iconfont 阿里图标库 Iconfont 生成工具 VSCode 插件 Flutter、Dart Flutter Widget Snippets Awesome Flutter Snippets Paste JSON as Code bloc 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 04 YAPI接口管理、RESTful、生成代码、dio封装","date":"2020-03-15T16:00:00.000Z","path":"2020/03/16/flutter-project/flutter-project-news-04-entity-http/","text":"本节目标 前后端分离、契约开发模式 API 接口管理、工具 RESTful 接口规范 TOKEN 安全通讯 自动生成 entity 接口实体类 dio 封装 localstorage 本地存储 密码加密 1. 接口管理1.1 前后端分离、契约模式 1.2 常见接口管理工具 yapihttps://github.com/YMFE/yapi easymockhttps://github.com/easy-mock/easy-mock RAP2https://github.com/thx/RAP swaggerhttps://swagger.io/ 1.3 yapi 接口管理工具（猫哥推荐）http://yapi.demo.qunar.com/ 输入 输出 1.4 mock 模拟数据 1.5 单元测试 1.6 swagger 导入 2. restful 接口风格 REST wiki 理解 RESTful 架构 阮一峰 RESTful API 设计指南 阮一峰 RESTful API 最佳实践 阮一峰 RESTful 架构详解 2.1 http 操作方式 GET 取数据 POST 新建数据 PUT 更新全部数据 PATCH 更新部分数据 DELETE 删除数据 例子:12345678GET /zoos：列出所有动物园POST /zoos：新建一个动物园GET /zoos/ID：获取某个指定动物园的信息PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）DELETE /zoos/ID：删除某个动物园GET /zoos/ID/animals：列出某个指定动物园的所有动物DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物 2.2 state 状态控制 200 OK 400 错误的请求，比如数据结构不对 401 需要登录认证 403 已登录，但是当前资源没有授权 404 找不到，地址错误 500 服务程序错误 502 服务网关错误 503 服务挂了 504 服务网关超时 2.3 优秀实践 Github REST API v3 3. token 安全通讯3.1 基于令牌的安全机制 流程 思路 3.2 Bearer Type Access Token在通讯 HTTP HEADER 头中加入 123GET /resource HTTP/1.1Host: server.example.comAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c 3.3 JWT https://jwt.io/ JSON Web Token 入门教程 4. 自动生成 entity4.1 json_serializable （官方） https://pub.dev/packages/json_serializable 4.2 json to code （猫哥推荐） https://app.quicktype.io/ vscode 插件 https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype 5. dio 封装5.1 单例模式 dio https://pub.dev/packages/dio lib/common/utils/http.dart 单例常见封装方式 123456789class HttpUtil &#123; static HttpUtil _instance = HttpUtil._internal(); factory HttpUtil() =&gt; _instance; Dio dio; CancelToken cancelToken = new CancelToken(); HttpUtil._internal() &#123; ... 5.2 维护 token从本地 storage 中读取 localstorage https://pub.flutter-io.cn/packages/localstorage getLocalOptions() 12345678910Options getLocalOptions() &#123; Options options; String token = StorageUtil().getItem(STORAGE_USER_TOKEN_KEY); if (token != null) &#123; options = Options(headers: &#123; 'Authorization': 'Bearer $token', &#125;); &#125; return options;&#125; 5.3 处理异常格式化，错误信息，进行差别对待 createErrorEntity() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192ErrorEntity createErrorEntity(DioError error) &#123; switch (error.type) &#123; case DioErrorType.CANCEL: &#123; return ErrorEntity(code: -1, message: \"请求取消\"); &#125; break; case DioErrorType.CONNECT_TIMEOUT: &#123; return ErrorEntity(code: -1, message: \"连接超时\"); &#125; break; case DioErrorType.SEND_TIMEOUT: &#123; return ErrorEntity(code: -1, message: \"请求超时\"); &#125; break; case DioErrorType.RECEIVE_TIMEOUT: &#123; return ErrorEntity(code: -1, message: \"响应超时\"); &#125; break; case DioErrorType.RESPONSE: &#123; try &#123; int errCode = error.response.statusCode; // String errMsg = error.response.statusMessage; // return ErrorEntity(code: errCode, message: errMsg); switch (errCode) &#123; case 400: &#123; return ErrorEntity(code: errCode, message: \"请求语法错误\"); &#125; break; case 401: &#123; return ErrorEntity(code: errCode, message: \"没有权限\"); &#125; break; case 403: &#123; return ErrorEntity(code: errCode, message: \"服务器拒绝执行\"); &#125; break; case 404: &#123; return ErrorEntity(code: errCode, message: \"无法连接服务器\"); &#125; break; case 405: &#123; return ErrorEntity(code: errCode, message: \"请求方法被禁止\"); &#125; break; case 500: &#123; return ErrorEntity(code: errCode, message: \"服务器内部错误\"); &#125; break; case 502: &#123; return ErrorEntity(code: errCode, message: \"无效的请求\"); &#125; break; case 503: &#123; return ErrorEntity(code: errCode, message: \"服务器挂了\"); &#125; break; case 505: &#123; return ErrorEntity(code: errCode, message: \"不支持HTTP协议请求\"); &#125; break; default: &#123; // return ErrorEntity(code: errCode, message: \"未知错误\"); return ErrorEntity( code: errCode, message: error.response.statusMessage); &#125; &#125; &#125; on Exception catch (_) &#123; return ErrorEntity(code: -1, message: \"未知错误\"); &#125; &#125; break; default: &#123; return ErrorEntity(code: -1, message: error.message); &#125; &#125;&#125; 6. 登录调用6.1 编写 api 接口 lib/common/apis/user.dart 1234567891011import 'package:flutter_ducafecat_news/common/entitys/entitys.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';/// 用户class UserAPI &#123; /// 登录 static Future&lt;UserResponseEntity&gt; login(&#123;UserRequestEntity params&#125;) async &#123; var response = await HttpUtil().post('/user/login', params: params); return UserResponseEntity.fromJson(response); &#125;&#125; 6.2 密码加密 crypto https://pub.dev/packages/crypto lib/common/utils/security.dart 1234567891011import 'dart:convert';import 'package:crypto/crypto.dart';/// SHA256String duSHA256(String input) &#123; String salt = 'EIpWsyfiy@R@X#qn17!StJNdZK1fFF8iV6ffN!goZkqt#JxO'; // 加盐 var bytes = utf8.encode(input + salt); var digest = sha256.convert(bytes); return digest.toString();&#125; 6.3 调用接口 lib/pages/sign_in/sign_in.dart 123456789101112131415161718192021// 执行登录操作_handleSignIn() async &#123; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; UserRequestEntity params = UserRequestEntity( email: _emailController.value.text, password: duSHA256(_passController.value.text), ); UserResponseEntity res = await UserAPI.login(params: params); // 写本地 access_token , 不写全局，业务：离线登录 // 全局数据 gUser&#125; YAPI 接口管理http://yapi.demo.qunar.com/ git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.4 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 参考 RESTful REST wiki 理解 RESTful 架构 阮一峰 RESTful API 设计指南 阮一峰 RESTful API 最佳实践 阮一峰 RESTful 架构详解 Flutter packages localstorage json_serializable dio crypto VSCode 插件 Awesome Flutter Snippets Paste JSON as Code 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 03 静态路由、组件抽取、登录注册界面","date":"2020-03-11T16:00:00.000Z","path":"2020/03/12/flutter-project/flutter-project-news-03-sign-in-up/","text":"本节目标 静态路由 带阴影的椭圆图标 输入有效性校验 组件抽取方法 通用组件、业务组件 程序目录组织 抽取透明导航栏 toast 提示组件 1 静态路由1.1 定义静态路由 登录页 lib/pages/sign_in/sign_in.dart 注册页 lib/pages/sign_up/sign_up.dart 静态路由 lib/routes.dart 12345678import 'package:flutter_ducafecat_news/pages/sign_in/sign_in.dart';import 'package:flutter_ducafecat_news/pages/sign_up/sign_up.dart';/// 静态路由var staticRoutes = &#123; \"/sign-in\": (context) =&gt; SignInPage(), // 登录 \"/sign-up\": (context) =&gt; SignUpPage(), // 注册&#125;; 1.2 注册静态路由 lib/main.dart 1234567891011121314151617import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/pages/welcome/welcome.dart';import 'package:flutter_ducafecat_news/routes.dart';void main() =&gt; runApp(MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'ducafecat.tech', home: WelcomePage(), routes: staticRoutes, debugShowCheckedModeBanner: false, ); &#125;&#125; 2 登录界面2.1 维护色彩常量 lib/common/values/colors.dart 12345678910111213141516171819202122232425262728import 'dart:ui';class AppColors &#123; /// 主背景 白色 static const Color primaryBackground = Color.fromARGB(255, 255, 255, 255); /// 主文本 灰色 static const Color primaryText = Color.fromARGB(255, 45, 45, 47); /// 主控件-背景 蓝色 static const Color primaryElement = Color.fromARGB(255, 41, 103, 255); /// 主控件-文本 白色 static const Color primaryElementText = Color.fromARGB(255, 255, 255, 255); // ***************************************** /// 第二种控件-背景色 淡灰色 static const Color secondaryElement = Color.fromARGB(255, 246, 246, 246); /// 第二种控件-文本 浅蓝色 static const Color secondaryElementText = Color.fromARGB(255, 41, 103, 255); // ***************************************** /// 第三种控件-背景色 石墨色 static const Color thirdElement = Color.fromARGB(255, 45, 45, 47);&#125; 2.2 程序结构 lib/pages/sign_in/sign_in.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';class SignInPage extends StatefulWidget &#123; SignInPage(&#123;Key key&#125;) : super(key: key); @override _SignInPageState createState() =&gt; _SignInPageState();&#125;class _SignInPageState extends State&lt;SignInPage&gt; &#123; // logo Widget _buildLogo() &#123; return Container(); &#125; // 登录表单 Widget _buildInputForm() &#123; return Container(); &#125; // 第三方登录 Widget _buildThirdPartyLogin() &#123; return Container(); &#125; // 注册按钮 Widget _buildSignupButton() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( resizeToAvoidBottomInset: false, body: Center( child: Column( children: &lt;Widget&gt;[ _buildLogo(), _buildInputForm(), Spacer(), _buildThirdPartyLogin(), _buildSignupButton(), ], ), ), ); &#125;&#125; 2.3 画带阴影的椭圆图标 lib/pages/sign_in/sign_in.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071// logoWidget _buildLogo() &#123; return Container( width: duSetWidth(110), margin: EdgeInsets.only(top: duSetHeight(40 + 44.0)), // 顶部系统栏 44px child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Container( height: duSetWidth(76), width: duSetWidth(76), margin: EdgeInsets.symmetric(horizontal: duSetWidth(15)), child: Stack( alignment: Alignment.center, children: [ Positioned( left: 0, top: 0, right: 0, child: Container( height: duSetWidth(76), decoration: BoxDecoration( color: AppColors.primaryBackground, boxShadow: [ Shadows.primaryShadow, ], borderRadius: BorderRadius.all( Radius.circular(duSetWidth(76 * 0.5))), // 父容器的50% ), child: Container(), ), ), Positioned( top: duSetWidth(13), child: Image.asset( \"assets/images/logo.png\", fit: BoxFit.none, ), ), ], ), ), Container( margin: EdgeInsets.only(top: duSetHeight(15)), child: Text( \"SECTOR\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Montserrat\", fontWeight: FontWeight.w600, fontSize: duSetFontSize(24), height: 1, ), ), ), Text( \"news\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), height: 1, ), ), ], ), );&#125; 2.4 抽取输入框 lib/common/widgets/input.dart 1234567891011121314151617181920212223242526272829303132333435/// 输入框Widget inputTextEdit(&#123; @required TextEditingController controller, TextInputType keyboardType = TextInputType.text, String hintText, bool isPassword = false, double marginTop = 15,&#125;) &#123; return Container( height: duSetHeight(44), margin: EdgeInsets.only(top: duSetHeight(marginTop)), decoration: BoxDecoration( color: AppColors.secondaryElement, borderRadius: Radii.k6pxRadius, ), child: TextField( controller: controller, keyboardType: keyboardType, decoration: InputDecoration( hintText: hintText, contentPadding: EdgeInsets.fromLTRB(20, 10, 0, 9), border: InputBorder.none, ), style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(18), ), maxLines: 1, autocorrect: false, // 自动纠正 obscureText: isPassword, // 隐藏输入内容, 密码框 ), );&#125; 2.5 抽取扁平按钮 lib/common/widgets/button.dart 1234567891011121314151617181920212223242526272829303132333435/// 扁平圆角按钮Widget btnFlatButtonWidget(&#123; @required VoidCallback onPressed, double width = 140, double height = 44, Color gbColor = AppColors.primaryElement, String title = \"button\", Color fontColor = AppColors.primaryElementText, double fontSize = 18, String fontName = \"Montserrat\", FontWeight fontWeight = FontWeight.w400,&#125;) &#123; return Container( width: duSetWidth(width), height: duSetHeight(height), child: FlatButton( onPressed: onPressed, color: gbColor, shape: RoundedRectangleBorder( borderRadius: Radii.k6pxRadius, ), child: Text( title, textAlign: TextAlign.center, style: TextStyle( color: fontColor, fontFamily: fontName, fontWeight: fontWeight, fontSize: duSetFontSize(fontSize), height: 1, ), ), ), );&#125; 2.6 抽取社交登录按钮 lib/common/widgets/button.dart 12345678910111213141516171819202122/// 第三方按钮Widget btnFlatButtonBorderOnlyWidget(&#123; @required VoidCallback onPressed, double width = 88, double height = 44, String iconFileName,&#125;) &#123; return Container( width: duSetWidth(width), height: duSetHeight(height), child: FlatButton( onPressed: onPressed, shape: RoundedRectangleBorder( side: Borders.primaryBorder, borderRadius: Radii.k6pxRadius, ), child: Image.asset( \"assets/images/icons-$iconFileName.png\", ), ), );&#125; 2.7 封装 toast 提示框 lib/common/widgets/toast.dart 123456789101112131415Future&lt;bool&gt; toastInfo(&#123; @required String msg, Color backgroundColor = Colors.black, Color textColor = Colors.white,&#125;) async &#123; return await Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.TOP, timeInSecForIos: 1, backgroundColor: backgroundColor, textColor: textColor, fontSize: duSetFontSize(16), );&#125; 2.8 数据有效性检验 lib/pages/sign_in/sign_in.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293...class _SignInPageState extends State&lt;SignInPage&gt; &#123; //email的控制器 final TextEditingController _emailController = TextEditingController(); //密码的控制器 final TextEditingController _passController = TextEditingController();... // 执行登录操作 _handleSignIn() &#123; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; &#125;... // 登录表单 Widget _buildInputForm() &#123; return Container( width: duSetWidth(295), // height: 204, margin: EdgeInsets.only(top: duSetHeight(49)), child: Column( children: [ // email input inputTextEdit( controller: _emailController, keyboardType: TextInputType.emailAddress, hintText: \"Email\", marginTop: 0, ), // password input inputTextEdit( controller: _passController, keyboardType: TextInputType.visiblePassword, hintText: \"Password\", isPassword: true, ), // 注册、登录 横向布局 Container( height: duSetHeight(44), margin: EdgeInsets.only(top: duSetHeight(15)), child: Row( children: [ // 注册 btnFlatButtonWidget( onPressed: _handleNavSignUp, gbColor: AppColors.thirdElement, title: \"Sign up\", ), Spacer(), // 登录 btnFlatButtonWidget( onPressed: _handleSignIn, gbColor: AppColors.primaryElement, title: \"Sign in\", ), ], ), ), // Spacer(), // Fogot password Container( height: duSetHeight(22), margin: EdgeInsets.only(top: duSetHeight(20)), child: FlatButton( onPressed: () =&gt; &#123;&#125;, child: Text( \"Fogot password?\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.secondaryElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), height: 1, // 设置下行高，否则字体下沉 ), ), ), ), ], ), ); &#125; 3 注册界面3.1 程序结构 lib/pages/sign_up/sign_up.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import 'package:flutter/material.dart';import 'package:flutter_ducafecat_news/common/utils/utils.dart';import 'package:flutter_ducafecat_news/common/values/values.dart';import 'package:flutter_ducafecat_news/common/widgets/widgets.dart';class SignUpPage extends StatefulWidget &#123; SignUpPage(&#123;Key key&#125;) : super(key: key); @override _SignUpPageState createState() =&gt; _SignUpPageState();&#125;class _SignUpPageState extends State&lt;SignUpPage&gt; &#123; // logo Widget _buildLogo() &#123; return Container(); &#125; // 注册表单 Widget _buildInputForm() &#123; return Container(); &#125; // 第三方 Widget _buildThirdPartyLogin() &#123; return Container(); &#125; // 有账号 Widget _buildHaveAccountButton() &#123; return Container(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( resizeToAvoidBottomInset: false, ..., body: Center( child: Column( children: &lt;Widget&gt;[ Divider(height: 1), _buildLogo(), _buildInputForm(), Spacer(), _buildThirdPartyLogin(), _buildHaveAccountButton(), ], ), ), ); &#125;&#125; 3.2 透明导航栏 lib/common/widgets/app.dart 123456789101112131415161718192021/// 透明背景 AppBarWidget transparentAppBar(&#123; @required BuildContext context, List&lt;Widget&gt; actions,&#125;) &#123; return AppBar( backgroundColor: Colors.transparent, elevation: 0, title: Text(''), leading: IconButton( icon: Icon( Icons.arrow_back, color: AppColors.primaryText, ), onPressed: () &#123; Navigator.pop(context); &#125;, ), actions: actions, );&#125; lib/pages/sign_up/sign_up.dart 123456789101112131415161718@overrideWidget build(BuildContext context) &#123; return Scaffold( resizeToAvoidBottomInset: false, appBar: transparentAppBar( context: context, actions: &lt;Widget&gt;[ IconButton( icon: Icon( Icons.info_outline, color: AppColors.primaryText, ), onPressed: () &#123; toastInfo(msg: '这是注册界面'); &#125;, ) ], ), 3.2 注册表单 lib/pages/sign_up/sign_up.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980// 注册表单Widget _buildInputForm() &#123; return Container( width: duSetWidth(295), // height: 204, margin: EdgeInsets.only(top: duSetHeight(49)), child: Column( children: [ // fullName input inputTextEdit( controller: _fullnameController, keyboardType: TextInputType.text, hintText: \"Full name\", marginTop: 0, ), // email input inputTextEdit( controller: _emailController, keyboardType: TextInputType.emailAddress, hintText: \"Email\", ), // password input inputTextEdit( controller: _passController, keyboardType: TextInputType.visiblePassword, hintText: \"Password\", isPassword: true, ), // 创建 Container( height: duSetHeight(44), margin: EdgeInsets.only(top: duSetHeight(15)), child: btnFlatButtonWidget( onPressed: () &#123; if (!duCheckStringLength(_fullnameController.value.text, 5)) &#123; toastInfo(msg: '用户名不能小于5位'); return; &#125; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; Navigator.pop(context); &#125;, width: 295, fontWeight: FontWeight.w600, title: \"Create an account\", ), ), // Spacer(), // Fogot password Container( height: duSetHeight(22), margin: EdgeInsets.only(top: duSetHeight(20)), child: FlatButton( onPressed: _handleSignUp, child: Text( \"Fogot password?\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.secondaryElementText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), height: 1, // 设置下行高，否则字体下沉 ), ), ), ), ], ), );&#125; 3.3 检验有效性 lib/pages/sign_up/sign_up.dart 12345678910111213141516// 执行注册操作_handleSignUp() &#123; if (!duCheckStringLength(_fullnameController.value.text, 5)) &#123; toastInfo(msg: '用户名不能小于5位'); return; &#125; if (!duIsEmail(_emailController.value.text)) &#123; toastInfo(msg: '请正确输入邮件'); return; &#125; if (!duCheckStringLength(_passController.value.text, 6)) &#123; toastInfo(msg: '密码不能小于6位'); return; &#125; Navigator.pop(context);&#125; 3.4 社交按钮 lib/pages/sign_up/sign_up.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 第三方Widget _buildThirdPartyLogin() &#123; return Container( width: duSetWidth(295), margin: EdgeInsets.only(bottom: duSetHeight(40)), child: Column( children: &lt;Widget&gt;[ // title Text( \"Or sign in with social networks\", textAlign: TextAlign.center, style: TextStyle( color: AppColors.primaryText, fontFamily: \"Avenir\", fontWeight: FontWeight.w400, fontSize: duSetFontSize(16), ), ), // 按钮 Padding( padding: EdgeInsets.only(top: duSetHeight(20)), child: Row( children: &lt;Widget&gt;[ btnFlatButtonBorderOnlyWidget( onPressed: () &#123;&#125;, width: 88, iconFileName: \"twitter\", ), Spacer(), btnFlatButtonBorderOnlyWidget( onPressed: () &#123;&#125;, width: 88, iconFileName: \"google\", ), Spacer(), btnFlatButtonBorderOnlyWidget( onPressed: () &#123;&#125;, width: 88, iconFileName: \"facebook\", ), ], ), ), ], ), );&#125; 3.5 返回按钮 lib/pages/sign_up/sign_up.dart 12345678910111213141516171819// 返回上一页_handleNavPop() &#123; Navigator.pop(context);&#125;Widget _buildHaveAccountButton() &#123; return Container( margin: EdgeInsets.only(bottom: duSetHeight(20)), child: btnFlatButtonWidget( onPressed: _handleNavPop, width: 294, gbColor: AppColors.secondaryElement, fontColor: AppColors.primaryText, title: \"I have an account\", fontWeight: FontWeight.w500, fontSize: 16, ), );&#125; git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.3 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 参考 widgets fluttertoast 视频 b 站 油管镜像 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 02 设计稿适配、加入图片字体资源、欢迎界面","date":"2020-02-26T16:00:00.000Z","path":"2020/02/27/flutter-project/flutter-project-news-02-weclome/","text":"本节目标 加入图片资源 加入字体资源 设计稿适配 编写界面代码的逻辑和组织 1 加入图片资源1.1 flutter 图片资源规则 官方说明 https://flutter.dev/docs/development/ui/assets-and-images 按这个规则编排，flutter 自动适配分辨率图片 assets 目录 yaml 配置 12assets: - assets/images/ 代码调用 1Image.asset(\"assets/images/logo.png\") 1.2 蓝湖切图 注意选着下 ios 目标，这样会自动切图 1x 2x 3x 三种格式 2 加入字体资源 官方说明 https://flutter.dev/docs/cookbook/design/fonts assets 目录 只上传用到的 ttf 字体，这样能控制打包大小 yaml 配置 123456789fonts: - family: Avenir fonts: - asset: assets/fonts/Avenir-Book.ttf weight: 400 - family: Montserrat fonts: - asset: assets/fonts/Montserrat-SemiBold.ttf weight: 600 代码调用 3 编写欢迎界面3.1 从上到下、从左到右、由大到小 3.2 设计稿适配插件 flutter_screenutil https://pub.flutter-io.cn/packages/flutter_screenutil 按设计稿比例适配 3.3 工具函数 screen.dart 设计稿适配函数 12345678910111213141516import 'package:flutter_screenutil/flutter_screenutil.dart';/// 设置宽度double duSetWidth(double width) &#123; return ScreenUtil().setWidth(width);&#125;/// 设置宽度double duSetHeight(double height) &#123; return ScreenUtil().setHeight(height);&#125;/// 设置字体尺寸double duSetFontSize(double fontSize) &#123; return ScreenUtil().setSp(fontSize);&#125; utils.dart 导出类库 123library utils;export 'screen.dart'; 3.4 常量配置 colors.dart 颜色 123456789101112import 'dart:ui';class AppColors &#123; /// 主文本 static const Color primaryText = Color.fromARGB(255, 45, 45, 47); /// 主控件-背景 static const Color primaryElement = Color.fromARGB(255, 41, 103, 255); /// 主控件-文本 static const Color primaryElementText = Color.fromARGB(255, 255, 255, 255);&#125; values.dart 导出类库 123library values;export 'colors.dart'; 3.5 代码拆分 尽可能的拆分到不同的函数，方便维护 再复杂的业务，可以拆分到不同的组件文件，如 welcome_header_widget.dart welcome_feature_widget.dart welcome_buttons_widget.dart git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.1 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat 视频 b 站 油管镜像 参考 flutter_screenutil Adding assets and images Use a custom font © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 实战从零开始 新闻客户端 - 01 需求分析、使用蓝湖标注工具、项目目录构建","date":"2020-02-25T16:00:00.000Z","path":"2020/02/26/flutter-project/flutter-project-news-01-setup/","text":"本节目标 需求分析 使用蓝湖平台作为标注工具 构建 Flutter 项目 1 需求说明 1.1 样式表 颜色 组件 图标 1.2 整理页面+组件列表 页面名称 组件数量 欢迎页 3 登录页 3 首页 6 搜索页 4 新闻页 4 1.3 排查技术点 数据拉取 图片懒加载 图片缓存 新闻、频道、搜索历史数据缓存 2 使用蓝湖平台作为标注工具2.1 上传蓝湖支持 Sketch、Adobe Photoshop、Adobe XD、设计图片 PNG 2.2 标注 2.3 代码提示 2.4 原型展示 3 构建 Flutter 项目3.1 可复用小型项目结构 蓝湖设计稿https://lanhuapp.com/url/lYuz1密码: gSKl 蓝湖现在收费了，所以查看标记还请自己上传 xd 设计稿商业设计稿文件不好直接分享, 可以加微信联系 ducafecat git 代码https://github.com/ducafecat/flutter_learn_news/releases/tag/v1.0.1 视频 b 站 油管镜像 参考 蓝湖-上传设计图 © 猫哥 微信: ducafecat https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 18 基础组件 Stack IndexedStack Positioned","date":"2019-10-11T16:00:00.000Z","path":"2019/10/12/flutter/flutter-18-stack-indexedstack/","text":"本节目标 Stack IndexedStack Positioned Stack 和 IndexStack 都是层叠布局方式，类似于 Android 里的 FrameLayout 帧布局，内部子元素是有层级堆起来的。 Stack 继承自 MultiChildRenderObjectWidget，Stack 也是多子元素的一个组件之一（内部可以包含多个子元素）。 而 IndexedStack 继承自 Stack，扩展了 Stack 的一些特性。它的作用是显示第 index 个子元素，其他子元素都是不可见的。所以 IndexedStack 的尺寸永远是跟最大的子元素尺寸一致。 Stack 的布局行为，是根据子元素是 positioned 还是 non-positioned 来区分的： 对于 positioned 的子元素，它们的位置会根据所设置的 top、bottom、right 或 left 属性来确定，这几个值都是相对于 Stack 的左上角；对于 non-positioned 的子元素，它们会根据 Stack 的 aligment 来设置位置。Stack 布局的子元素层级堆叠顺序：最先布局绘制的子元素在最底层，越后绘制的越在顶层。类似于 Web 中的 z-index。 Stack12345678910111213Stack(&#123; Key key, // 对齐方式，默认是左上角（topStart） this.alignment = AlignmentDirectional.topStart, // 对齐方向 this.textDirection, // 定义如何设置无定位子元素尺寸，默认为loose this.fit = StackFit.loose, // 超过的部分子元素处理方式 this.overflow = Overflow.clip, // 子元素 List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;) alignment 1234567891011121314151617181920212223242526// 左上角static const Alignment topLeft = Alignment(-1.0, -1.0);// 主轴顶部对齐，交叉轴居中static const Alignment topCenter = Alignment(0.0, -1.0);// 主轴顶部对齐，交叉轴偏右static const Alignment topRight = Alignment(1.0, -1.0);// 主轴居中，交叉轴偏左static const Alignment centerLeft = Alignment(-1.0, 0.0);// 居中static const Alignment center = Alignment(0.0, 0.0);// 主轴居中，交叉轴偏右static const Alignment centerRight = Alignment(1.0, 0.0);// 主轴底部对齐，交叉轴偏左static const Alignment bottomLeft = Alignment(-1.0, 1.0);// 主轴底部对齐，交叉轴居中static const Alignment bottomCenter = Alignment(0.0, 1.0);// 主轴底部对齐，交叉轴偏右static const Alignment bottomRight = Alignment(1.0, 1.0); fit 12345678910enum StackFit &#123; // 子元素宽松的取值，可以从min到max的尺寸 loose, // 子元素尽可能的占用剩余空间，取max尺寸 expand, // 不改变子元素的约束条件 passthrough,&#125; overflow 1234567enum Overflow &#123; // 超出部分不会被裁剪，正常显示 visible, // 超出部分会被裁剪 clip,&#125; IndexedStack12345678910IndexedStack(&#123; Key key, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection textDirection, StackFit sizing = StackFit.loose, // 多了一个索引，索引的这个元素显示，其他元素隐藏 this.index = 0, // 子元素 List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;) Positioned12345678910const Positioned(&#123; Key key, this.left, // 上下左右位置 this.top, this.right, this.bottom, this.width, // 宽高 this.height, @required Widget child,&#125;) 代码https://github.com/ducafecat/flutter-learn/tree/master/state_less_ful_app 参考 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 17 基础组件 Fex Expanded","date":"2019-10-10T16:00:00.000Z","path":"2019/10/11/flutter/flutter-17-flex-expanded/","text":"本节目标 expanded flex Flex 组件是 Row 和 Column 的父类，主要用于弹性布局，类似于 HTML 中的 Flex 弹性盒子布局，可以按照一定比例进行分类布局空间。 Flex 继承自 MultiChildRenderObjectWidget，Flex 也是多子元素的一个组件之一（内部可以包含多个子元素）。 Flex 一般和 Expanded 搭配使用，Expanded 组件从名字就可以看出它的特点，就是让子元素扩展占用 Flex 的剩余空间。 Expanded Flex 构造函数 单独看 Flex 组件没有意义，因为一般直接用它的子类 Row 和 Column 来使用。而 Flex 主要是和 Expanded 搭配使用。我们再看下 Expanded 组件构造方法： 123456789101112131415161718192021Flex(&#123; Key key, // 子元素排列方向：横向还是纵向 @required this.direction, this.mainAxisAlignment = MainAxisAlignment.start, this.mainAxisSize = MainAxisSize.max, this.crossAxisAlignment = CrossAxisAlignment.center, this.textDirection, this.verticalDirection = VerticalDirection.down, this.textBaseline, List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;)const Expanded(&#123; Key key, // 占用空间比重、权重 int flex = 1, // 子元素 @required Widget child, &#125;) 例子 Expanded12345678910111213Row( children: &lt;Widget&gt;[ Container( width: 50, color: Colors.cyan, ), Expanded( child: Container( color: Colors.brown, ), ), ],) 例子 Flex12345678910111213141516Column( children: &lt;Widget&gt;[ Expanded( flex: 1, child: Container( color: Colors.cyan, ), ), Expanded( flex: 4, child: Container( color: Colors.brown, ), ) ],) 代码https://github.com/ducafecat/flutter-learn/tree/master/flex_expanded_widget 参考 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 16 基础组件 Row Column","date":"2019-10-09T16:00:00.000Z","path":"2019/10/10/flutter/flutter-16-row-column/","text":"本节目标 Row 行组件 Column 列组件 mainAxisAlignment 主轴 crossAxisAlignment 交叉轴 textDirection 排列方向 verticalDirection 交叉轴起始位置 RowRow 布局组件类似于 Android 中的 LinearLayout 线性布局，它用来做水平横向布局使用，里面的 children 子元素按照水平方向进行排列。 构造 1234567891011121314151617Row(&#123; Key key, // 主轴方向上的对齐方式（Row的主轴是横向轴） MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, // 在主轴方向（Row的主轴是横向轴）占有空间的值，默认是max MainAxisSize mainAxisSize = MainAxisSize.max, // 在交叉轴方向(Row是纵向轴)的对齐方式，Row的高度等于子元素中最高的子元素高度 CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, // 水平方向子元素的排列方向：从左到右排列还是反向 TextDirection textDirection, // 表示纵轴（垂直）的对齐排列方向，默认是VerticalDirection.down，表示从上到下。这个参数一般用于Column组件里 VerticalDirection verticalDirection = VerticalDirection.down, // 字符对齐基线方式 TextBaseline textBaseline, // 子元素集合 List&lt;Widget&gt; children = const &lt;Widget&gt;[], &#125;) MainAxisAlignment 主轴属性：主轴方向上的对齐方式，Row 是横向轴为主轴 12345678910111213141516171819enum MainAxisAlignment &#123; // 按照主轴起点对齐，例如：按照靠近最左侧子元素对齐 start, // 将子元素放置在主轴的末尾，按照末尾对齐 end, // 子元素放置在主轴中心对齐 center, // 将主轴方向上的空白区域均分，使得子元素之间的空白区域相等，首尾子元素都靠近首尾，没有间隙。有点类似于两端对齐 spaceBetween, // 将主轴方向上的空白区域均分，使得子元素之间的空白区域相等，但是首尾子元素的空白区域为1/2 spaceAround, // 将主轴方向上的空白区域均分，使得子元素之间的空白区域相等，包括首尾子元素 spaceEvenly,&#125; CrossAxisAlignment 交叉属性：在交叉轴方向的对齐方式，Row 是纵向轴。Row 的高度等于子元素中最高的子元素高度 12345678910111213141516enum CrossAxisAlignment &#123; // 子元素在交叉轴上起点处展示 start, // 子元素在交叉轴上末尾处展示 end, // 子元素在交叉轴上居中展示 center, // 让子元素填满交叉轴方向 stretch, // 在交叉轴方向，使得子元素按照baseline对齐 baseline,&#125; MainAxisSize 在主轴方向子元素占有空间的方式，Row 的主轴是横向轴。默认是 max 1234567enum MainAxisSize &#123; // 根据传入的布局约束条件，最大化主轴方向占用可用空间，也就是尽可能充满可用宽度 max, // 与max相反，是最小化占用主轴方向的可用空间 min,&#125; ColumnColumn 是纵向排列子元素 参数用法同上 例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// Row 行组件Widget _buildRow() &#123; return Row( mainAxisAlignment: MainAxisAlignment.center, verticalDirection: VerticalDirection.up, textBaseline: TextBaseline.ideographic, children: &lt;Widget&gt;[ RaisedButton( color: Colors.blue, child: Text('按钮1'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.grey, child: Text('按钮2'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.orange, child: Text('按钮3'), onPressed: () &#123;&#125;, ), ], );&#125;// Column 列组件Widget _buildColumn() &#123; return Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ RaisedButton( color: Colors.blue, child: Text('按钮1'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.grey, child: Text('按钮2'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.orange, child: Text('按钮3'), onPressed: () &#123;&#125;, ), ], );&#125;// Row Column 组件嵌套Widget _buildRowColumn() &#123; return Column( mainAxisAlignment: MainAxisAlignment.center, // crossAxisAlignment: CrossAxisAlignment.center, children: &lt;Widget&gt;[ Row( // 元素排列顺序 textDirection: TextDirection.rtl, // 主轴方向 mainAxisAlignment: MainAxisAlignment.center, // 交叉轴的起始位置 verticalDirection: VerticalDirection.up, // 交叉轴对齐方式 crossAxisAlignment: CrossAxisAlignment.end, children: &lt;Widget&gt;[ RaisedButton( color: Colors.blue, child: Text('按钮1'), onPressed: () &#123;&#125;, ), RaisedButton( color: Colors.blue, child: Text('按钮2222222'), onPressed: () &#123;&#125;, ), Container( width: 100, height: 100, color: Colors.yellow, ) ], ) ], );&#125;return MaterialApp( title: 'Material App', home: Scaffold( appBar: AppBar( title: Text('Material App Bar'), ), body: //_buildRow(), // _buildColumn(), _buildRowColumn(), ),); 代码https://github.com/ducafecat/flutter-learn/blob/master/row_column_widget 参考 Row class Column class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 15 基础组件 MaterialApp Scaffold","date":"2019-10-08T16:00:00.000Z","path":"2019/10/09/flutter/flutter-15-scaffold/","text":"本节目标 MaterialApp Scafford Scaffold.of MaterialAppMaterial 风格的程序的构建，如 Key 导航 路由 首页 样式 多语言 调试 构造 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const MaterialApp(&#123; Key key, // 导航键 , key的作用提高复用性能 this.navigatorKey, // 主页 this.home, // 路由 this.routes = const &lt;String, WidgetBuilder&gt;&#123;&#125;, // 初始命名路由 this.initialRoute, // 路由构造 this.onGenerateRoute, // 未知路由 this.onUnknownRoute, // 导航观察器 this.navigatorObservers = const &lt;NavigatorObserver&gt;[], // 建造者 this.builder, // APP 标题 this.title = '', // 生成标题 this.onGenerateTitle, // APP 颜色 this.color, // 样式定义 this.theme, // 主机暗色模式 this.darkTheme, // 样式模式 this.themeMode = ThemeMode.system, // 多语言 本地化 this.locale, // 多语言代理 this.localizationsDelegates, // 多语言回调 this.localeListResolutionCallback, this.localeResolutionCallback, // 支持的多国语言 this.supportedLocales = const &lt;Locale&gt;[Locale('en', 'US')], // 调试显示材质网格 this.debugShowMaterialGrid = false, // 显示性能叠加 this.showPerformanceOverlay = false, // 检查缓存图片的情况 this.checkerboardRasterCacheImages = false, // 检查不必要的setlayer this.checkerboardOffscreenLayers = false, // 显示语义调试器 this.showSemanticsDebugger = false, // 显示debug标记 右上角 this.debugShowCheckedModeBanner = true,&#125;) ScaffoldScaffold 是一个页面布局脚手架，实现了基本的 Material 布局，继承自 StatefulWidget，是有状态组件。我们知道大部分的应用页面都是含有标题栏，主体内容，底部导航菜单或者侧滑抽屉菜单等等构成，那么每次都重复写这些内容会大大降低开发效率，所以 Flutter 提供了 Material 风格的 Scaffold 页面布局脚手架，可以很快地搭建出这些元素部分 构造 1234567891011121314151617181920212223242526272829303132const Scaffold(&#123; Key key, // 菜单栏 this.appBar, // 中间主体内容部分 this.body, // 悬浮按钮 this.floatingActionButton, // 悬浮按钮位置 this.floatingActionButtonLocation, // 悬浮按钮动画 this.floatingActionButtonAnimator, // 固定在下方显示的按钮 this.persistentFooterButtons, // 左侧 侧滑抽屉菜单 this.drawer, // 右侧 侧滑抽屉菜单 this.endDrawer, // 底部菜单 this.bottomNavigationBar, // 底部拉出菜单 this.bottomSheet, // 背景色 this.backgroundColor, // 自动适应底部padding this.resizeToAvoidBottomPadding, // 重新计算body布局空间大小，避免被遮挡 this.resizeToAvoidBottomInset, // 是否显示到底部，默认为true将显示到顶部状态栏 this.primary = true, this.drawerDragStartBehavior = DragStartBehavior.down, &#125;) Scaffold.ofScaffold.of 函数来获取 ScaffoldState 对象 contenxt 是动态获取的 所以需要用 Builder 套一个构造器 12345678static ScaffoldState of(BuildContext context, &#123; bool nullOk = false &#125;) &#123; assert(nullOk != null); assert(context != null); final ScaffoldState result = context.ancestorStateOfType(const TypeMatcher&lt;ScaffoldState&gt;()); if (nullOk || result != null) return result; throw FlutterError( ... 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102return MaterialApp( // APP 标题 title: 'Material App', // APP 颜色 color: Colors.yellow, // 样式 theme: ThemeData(primaryColor: Colors.green), // 主机暗色模式 android 下无效 ios 可以 darkTheme: ThemeData(primaryColor: Colors.yellow), // 调试显示材质网格 debugShowMaterialGrid: false, // 显示性能叠加 showPerformanceOverlay: false, // 检查缓存图片的情况 checkerboardRasterCacheImages: false, // 检查不必要的setlayer checkerboardOffscreenLayers: false, // 显示语义调试器 showSemanticsDebugger: false, // 显示debug标记 右上角 debugShowCheckedModeBanner: false, // 主页 home: Scaffold( // 菜单栏 appBar: AppBar( title: Text('Material App Bar'), ), // 悬浮按钮 floatingActionButton: FloatingActionButton( onPressed: () &#123;&#125;, child: Icon(Icons.add_photo_alternate), ), // 悬浮按钮位置 floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat, // 固定在下方显示的按钮 persistentFooterButtons: [ Text('persistentFooterButtons1'), Text('persistentFooterButtons2'), ], // 左侧 侧滑抽屉菜单 drawer: Drawer( child: Text('data'), ), // 右侧 侧滑抽屉菜单 endDrawer: Drawer( child: Text('data'), ), // 底部菜单 bottomNavigationBar: Text('bottomNavigationBar'), // 底部拉出菜单 bottomSheet: Text('bottomSheet'), // 背景色 backgroundColor: Colors.amberAccent, // 自动适应底部padding resizeToAvoidBottomPadding: true, // 压缩顶部菜单空间 primary: false, // drawerDragStartBehavior: DragStartBehavior.start, // 正文 body: Builder( builder: (BuildContext context) &#123; return Center( child: Container( child: RaisedButton( onPressed: () &#123; // Scaffold.of(context).openDrawer(); Scaffold.of(context).showSnackBar(new SnackBar( content: new Text('Hello!'), )); &#125;, child: Text('data'), ), ), ); &#125;, ), ), //); 代码https://github.com/ducafecat/flutter-learn/blob/master/container_widget 参考 MaterialApp class Scaffold class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 14 基础组件 Container","date":"2019-10-07T16:00:00.000Z","path":"2019/10/08/flutter/flutter-14-container/","text":"本节目标 基础用法 Padding 和 Margin BoxDecoration 装饰 BoxShadow 阴影 RadialGradient 渐变 基础用法Container 是一个组合类容器，它本身不对应具体的 RenderObject，它是 DecoratedBox、ConstrainedBox、Transform、Padding、Align 等组件组合的一个多功能容器，所以我们只需通过一个 Container 组件可以实现同时需要装饰、变换、限制的场景。下面是 Container 的定义： 构造函数 12345678910111213141516171819202122232425Container(&#123; Key key, // 容器子Widget对齐方式 this.alignment, // 容器内部padding this.padding, // 背景色 Color color, // 背景装饰 Decoration decoration, // 前景装饰 this.foregroundDecoration, // 容器的宽度 double width, // 容器的高度 double height, // 容器大小的限制条件 BoxConstraints constraints, // 容器外部margin this.margin, // 变换，如旋转 this.transform, // 容器内子Widget this.child, &#125;) BoxDecoration 装饰123456789101112131415161718const BoxDecoration(&#123; // 背景色 this.color, // 背景图片 this.image, // 边框样式 this.border, // 边框圆角 this.borderRadius, // 阴影 this.boxShadow, // 渐变 this.gradient, // 背景混合模式 this.backgroundBlendMode, // 形状 this.shape = BoxShape.rectangle,&#125;) 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263Container( constraints: BoxConstraints.expand( height: 200.0, ), margin: const EdgeInsets.all(20.0), padding: const EdgeInsets.all(8.0), // 背景色 // color: Colors.teal.shade700, // 子Widget居中 alignment: Alignment.centerLeft, // 子Widget元素 child: Text('Hello World', style: Theme.of(context) .textTheme .display1 .copyWith(color: Colors.white)), // 背景装饰 decoration: BoxDecoration( // 背景色 color: Colors.blueAccent, // 圆角 // borderRadius: BorderRadius.all( // Radius.circular(20.0), // ), // 渐变 gradient: RadialGradient( colors: [Colors.red, Colors.orange], center: Alignment.topLeft, radius: .98, ), // 阴影 boxShadow: [ BoxShadow( blurRadius: 2, offset: Offset(0, 2), color: Colors.blue, ), ], // 背景图 // image: DecorationImage( // image: AssetImage('assets/flutter.png'), // fit: BoxFit.cover, // ), // 背景混合模式 backgroundBlendMode: BlendMode.color, // 形状 shape: BoxShape.circle, ), // 前景装饰 // foregroundDecoration: BoxDecoration( // image: DecorationImage( // image: AssetImage('assets/flutter.png'), // ), // ), // Container旋转 // transform: Matrix4.rotationZ(0.1), ), 代码https://github.com/ducafecat/flutter-learn/blob/master/container_widget 参考 Container class BoxDecoration class RadialGradient class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 13 基础组件 Button FlatButton RaisedButton OutlineButton","date":"2019-10-06T16:00:00.000Z","path":"2019/10/07/flutter/flutter-13-widget-button/","text":"本节目标常用按钮操作 FlatButton（扁平化） RaisedButton（有按下状态） OutlineButton（有边框） MaterialButton（Material 风格） RawMaterialButton（没有应用 style 的 Material 风格按钮） FloatingActionButton（悬浮按钮） Button在 Flutter 中 Button 有很多封装好的 Widget 类： FlatButton（扁平化） RaisedButton（有按下状态） OutlineButton（有边框） MaterialButton（Material 风格） RawMaterialButton（没有应用 style 的 Material 风格按钮） FloatingActionButton（悬浮按钮） BackButton（返回按钮） IconButton（Icon 图标） CloseButton（关闭按钮） ButtonBar（可以排列放置按钮元素的） 其中大部分的 Button 都是基于 RawMaterialButton 进行的修改定制而成的。 构造函数 12345678910111213141516171819202122232425262728293031const FlatButton(&#123; Key key, // 点击事件 @required VoidCallback onPressed, // 高亮改变，按下和抬起时都会调用的方法 ValueChanged&lt;bool&gt; onHighlightChanged, // 定义按钮的基色，以及按钮的最小尺寸，内部填充和形状的默认值 ButtonTextTheme textTheme, // 按钮文字的颜色 Color textColor, // 按钮禁用时的文字颜色 Color disabledTextColor, // 按钮背景颜色 Color color, // 按钮禁用时的背景颜色 Color disabledColor, // 按钮按下时的背景颜色 Color highlightColor, // 点击时，水波动画中水波的颜色，不要水波纹效果设置透明颜色即可 Color splashColor, // 按钮主题，默认是浅色主题，分为深色和浅色 Brightness colorBrightness, // 按钮的填充间距 EdgeInsetsGeometry padding, // 外形 ShapeBorder shape, Clip clipBehavior = Clip.none, MaterialTapTargetSize materialTapTargetSize, // 按钮的内容，里面可以放子元素 @required Widget child, &#125;) 示例 后退、关闭 12345678ButtonBar( children: &lt;Widget&gt;[ BackButton( color: Colors.orange, ), CloseButton(), ],), 扁平按钮 FlatButton 12345678910111213141516ButtonBar( children: &lt;Widget&gt;[ FlatButton( child: Text('扁平按钮'), onPressed: () &#123; print('我是扁平按钮'); &#125;, ), FlatButton( child: Text( '扁平按钮 禁用', ), onPressed: null, ), ],), 扁平带图标按钮 FlatButton.icon 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ FlatButton.icon( label: Text('带图标扁平按钮'), icon: Icon(Icons.add_call, size: 18.0), onPressed: () &#123;&#125;, ), FlatButton.icon( icon: const Icon(Icons.add_call, size: 18.0), label: const Text('带图标扁平按钮 禁用'), onPressed: null, ), ],), 带框按钮 OutlineButton 123456789101112ButtonBar( children: &lt;Widget&gt;[ OutlineButton( onPressed: () &#123;&#125;, child: Text('带框按钮'), ), OutlineButton( onPressed: null, child: Text('带框按钮 禁用'), ), ],), 带框图标按钮 OutlineButton.icon 123456789101112131415ButtonBar( children: &lt;Widget&gt;[ OutlineButton.icon( label: Text('带框图标按钮'), icon: Icon(Icons.add_to_photos, size: 18.0), onPressed: () &#123;&#125;, ), OutlineButton.icon( disabledTextColor: Colors.orange, icon: Icon(Icons.add_to_photos, size: 18.0), label: Text('带框图标按钮 禁用'), onPressed: null, ), ],), 立体按钮 RaisedButton 123456789101112ButtonBar( children: &lt;Widget&gt;[ RaisedButton( child: Text('立体按钮'), onPressed: () &#123;&#125;, ), RaisedButton( child: Text('立体按钮 禁用'), onPressed: null, ), ],), 立体按钮带图标 RaisedButton.icon 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ RaisedButton.icon( icon: Icon(Icons.add, size: 18.0), label: Text('立体按钮带图标'), onPressed: () &#123;&#125;, ), RaisedButton.icon( icon: Icon(Icons.add, size: 18.0), label: Text('立体按钮带图标 禁用'), onPressed: null, ), ],), Material 按钮 MaterialButton 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ MaterialButton( child: Text('Material按钮'), onPressed: () &#123; // Perform some action &#125;, ), MaterialButton( child: Text('Material按钮 禁用'), onPressed: null, ), ],), RawMaterial 按钮 RawMaterialButton 1234567891011121314ButtonBar( children: &lt;Widget&gt;[ RawMaterialButton( child: Text('RawMaterial按钮'), onPressed: () &#123; // Perform some action &#125;, ), RawMaterialButton( child: Text('RawMaterial按钮 禁用'), onPressed: null, ), ],), 浮动按钮 FloatingActionButton 123456789101112131415161718ButtonBar( children: &lt;Widget&gt;[ FloatingActionButton( child: const Icon(Icons.add), heroTag: '浮动按钮', onPressed: () &#123; // Perform some action &#125;, tooltip: '浮动按钮提示1', ), FloatingActionButton( child: const Icon(Icons.add), onPressed: null, heroTag: '浮动按钮 禁用', tooltip: '浮动按钮提示2', ), ],), 代码https://github.com/ducafecat/flutter-learn/blob/master/button_widget 参考 FlatButton class RaisedButton class OutlineButton class MaterialButton class RawMaterialButton class FloatingActionButton class BackButton class IconButton class CloseButton class ButtonBar class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 12 基础组件 Image Asset NetworkImage","date":"2019-10-06T16:00:00.000Z","path":"2019/10/07/flutter/flutter-12-widget-image/","text":"本节目标 image 构造函数的 5 种方式 加载图片 Asset、NetworkImage 占位图 FadeInImage 头像 CircleAvatar 圆角 ClipRRect 图片 fit 方式 1. Image图片显示组件 支持图像格式 JPEG，PNG，GIF，动画 GIF，WebP，动画 WebP，BMP 和 WBMP 五种构造方式 构造 说明 Image() ImageProvider 适配图片 Image.asset 加载资源图片 Image.file 加载本地图片 Image.network 加载网络图片 Image.memory 加载 Uint8List 资源图片 构造参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128//通过ImageProvider来加载图片const Image(&#123; Key key, // ImageProvider，图像显示源 @required this.image, this.semanticLabel, this.excludeFromSemantics = false, //显示宽度 this.width, //显示高度 this.height, //图片的混合色值 this.color, //混合模式 this.colorBlendMode, //缩放显示模式 this.fit, //对齐方式 this.alignment = Alignment.center, //重复方式 this.repeat = ImageRepeat.noRepeat, //当图片需要被拉伸显示的时候，centerSlice定义的矩形区域会被拉伸，类似.9图片 this.centerSlice, //类似于文字的显示方向 this.matchTextDirection = false, //图片发生变化后，加载过程中原图片保留还是留白 this.gaplessPlayback = false, //图片显示质量 this.filterQuality = FilterQuality.low, &#125;)// 加载网络图片，封装类：NetworkImageImage.network( //路径 String src, &#123; Key key, //缩放 double scale = 1.0, this.semanticLabel, this.excludeFromSemantics = false, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, this.filterQuality = FilterQuality.low, Map&lt;String, String&gt; headers, &#125;)// 加载本地File文件图片，封装类：FileImageImage.file( //File对象 File file, &#123; Key key, double scale = 1.0, this.semanticLabel, this.excludeFromSemantics = false, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, this.filterQuality = FilterQuality.low, &#125;)// 加载本地资源图片,例如项目内资源图片// 需要把图片路径在pubspec.yaml文件中声明一下，如：// assets:// - packages/fancy_backgrounds/backgrounds/background1.png// 封装类有：AssetImage、ExactAssetImageImage.asset( //文件名称，包含路径 String name, &#123; Key key, // 用于访问资源对象 AssetBundle bundle, this.semanticLabel, this.excludeFromSemantics = false, double scale, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, String package, this.filterQuality = FilterQuality.low, &#125;)// 加载Uint8List资源图片/从内存中获取图片显示// 封装类：MemoryImageImage.memory( // Uint8List资源图片 Uint8List bytes, &#123; Key key, double scale = 1.0, this.semanticLabel, this.excludeFromSemantics = false, this.width, this.height, this.color, this.colorBlendMode, this.fit, this.alignment = Alignment.center, this.repeat = ImageRepeat.noRepeat, this.centerSlice, this.matchTextDirection = false, this.gaplessPlayback = false, this.filterQuality = FilterQuality.low, &#125;) 29 种混合模式 123enum BlendMode &#123; clear,src,dst,srcOver,dstOver,srcIn,dstIn,srcOut,dstOut,srcATop,dstATop,xor,plus，modulate,screen,overlay,darken,lighten,colorDodge,colorBurn,hardLight,softLight,difference,exclusion,multiply,hue,saturation,color,luminosity,&#125; 主要的混合模式效果如下 缩放 enum BoxFit 枚举对象 名称 说明 fill 图片按照指定的大小在 Image 中显示，拉伸显示图片，不保持原比例，填满 Image。 contain 以原图正常显示为目的，如果原图大小大于 Image 的 size，就按照比例缩小原图的宽高，居中显示在 Image 中。如果原图 size 小于 Image 的 size，则按比例拉升原图的宽和高，填充 Image 一边并居中显示。 cover 以原图填满 Image 为目的，如果原图 size 大于 Image 的 size，按比例缩小，居中显示在 Image 上。如果原图 size 小于 Image 的 size，则按比例拉升原图的宽和高，填充 Image 居中显示。 fitWidth 以原图正常显示为目的，如果原图宽大小大于（小于）Image 的宽，就缩小（放大）原图的宽与 Image 一致，居中显示在 Image 中。 fitHeight 以原图正常显示为目的，如果原图高大小大于（小于）Image 的高，就缩小（放大）原图的高与 Image 一致，居中显示在 Image 中。 none 保持原图的大小，显示在 Image 的中心。当原图的 size 大于 Image 的 size 时，多出来的部分被截掉。 scaleDown 以原图正常显示为目的，如果原图大小大于 Image 的 size，就按照比例缩小原图的宽高，居中显示在 Image 中。如果原图 size 小于 Image 的 size，则不做处理居中显示图片。 示例 pubspec.yaml 12assets: - assets/images/ main.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// assetsText('assets'),Image.asset(_assetImg),// 网络读取Text('网络读取'),Image.network(_imgUrl),// NetworkImageText('NetworkImage'),Image(image: NetworkImage(_imgUrl)),// 占位图Text('占位图'),FadeInImage( fadeInCurve: Curves.bounceIn, placeholder: AssetImage(_assetImg), image: NetworkImage(_imgUrl)),// 原型头像Text('原型头像'),CircleAvatar( backgroundColor: Colors.brown.shade800, child: Text('圆角图片'), backgroundImage: AssetImage(_assetHeaderImg), radius: 50.0),// 图标Text('图标'),ImageIcon( NetworkImage(_imgUrl), size: 100,),// ClipRRect 圆角Text('ClipRRect 圆角'),ClipRRect( child: Image.network(_imgUrl), borderRadius: BorderRadius.all(Radius.circular(20)),),// 圆角矩形框Text('圆角矩形框'),Container( width: 200, height: 80, decoration: BoxDecoration( shape: BoxShape.rectangle, borderRadius: BorderRadius.circular(10.0), image: DecorationImage( image: NetworkImage(_imgUrl), fit: BoxFit.cover), ),),// 椭圆图Text('椭圆图'),ClipOval( child: Image.network( _imgUrl, scale: 8.5, ),),// 混色Text('混色'),Image.asset( _assetHeaderImg, color: Colors.amber, colorBlendMode: BlendMode.dstATop,),// 裁剪Text('裁剪'),Image.asset( _assetImg, width: 400, height: 50, fit: BoxFit.cover,), 代码https://github.com/ducafecat/flutter-learn/tree/master/image_widget 参考 Image class NetworkImage class FadeInImage class ClipRRect class ClipOval class ImageIcon class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 11 基础组件 Text RichText TextSpan","date":"2019-10-05T16:00:00.000Z","path":"2019/10/06/flutter/flutter-11-widget-text/","text":"本节目标 Text 构造参数 TextStyle 样式构造参数 Text.rich、RichText、TextSpan 处理复杂字符显示 TextText Widget，从名字也可以看出，在 Flutter 里是用来负责显示文本信息的一个组件，功能类似于 Android 的 TextView、HTML 的一些文本标签等等，属于基础组件。 基础用法 1Text('hello word!'); 构造函数 Text 1234567891011121314151617181920212223242526const Text( //要显示的文字内容 this.data, &#123; //key类似于id Key key, //文字显示样式和属性 this.style, this.strutStyle, //文字对齐方式 this.textAlign, //文字显示方向 this.textDirection, //设置语言环境 this.locale, //是否自动换行 this.softWrap, //文字溢出后处理方式 this.overflow, //字体缩放 this.textScaleFactor, //最大显示行数 this.maxLines, //图像的语义描述，用于向Andoid上的TalkBack和iOS上的VoiceOver提供图像描述 this.semanticsLabel, &#125;) TextStyle style 属性比较常用，传入的是 TextStyle 对象，我们细看下它可以配置哪些属性样式。 12345678910111213141516171819202122232425262728293031323334353637383940const TextStyle(&#123; //是否继承父类组件属性 this.inherit = true, //字体颜色 this.color, //文字大小，默认14px this.fontSize, //字体粗细 this.fontWeight, //字体样式,normal或italic this.fontStyle, //字母间距，默认为0，负数间距缩小，正数间距增大 this.letterSpacing, //单词间距，默认为0，负数间距缩小，正数间距增大 this.wordSpacing, //字体基线 this.textBaseline, //行高 this.height, //设置区域 this.locale, //前景色 this.foreground, //背景色 this.background, //阴影 this.shadows, //文字划线，下换线等等装饰 this.decoration, //划线颜色 this.decorationColor, //划线样式，虚线、实线等样式 this.decorationStyle, //描述信息 this.debugLabel, //字体 String fontFamily, List&lt;String&gt; fontFamilyFallback, String package, &#125;) 示例 颜色、大小、样式 123456Text('字体24下划线', style: TextStyle( color: Colors.blue, // 蓝色 fontSize: 24, // 24 号字体 decoration: TextDecoration.underline, // 下划线 )), 缩放、加粗 12345678Text('放大加粗', textScaleFactor: 1.2, // 放大 1.2 style: TextStyle( fontWeight: FontWeight.bold, // 加粗 bold fontSize: 24, // 24 号字体 color: Colors.green, // 绿色 decoration: TextDecoration.none, // 不要下滑线 )), 文字溢出 1234567891011Text( '缩放，Each line here is progressively more opaque. The base color is material.Colors.black, and Color.withOpacity is used to create a derivative color with the desired opacity. The root TextSpan for this RichText widget is explicitly given the ambient DefaultTextStyle, since RichText does not do that automatically. The inner TextStyle objects are implicitly mixed with the parent TextSpans TextSpan.style.', textScaleFactor: 1.0, textAlign: TextAlign.center, softWrap: true, maxLines: 3, // 3 行 overflow: TextOverflow.ellipsis, // 剪切 加省略号 style: TextStyle( fontWeight: FontWeight.bold, fontSize: 18, )), Text.rich、RichText 、TextSpan构造函数可以在 Text 里加入一些 Span 标签，对某部分文字进行个性化改变样式，如加入 @ 符号，加入超链接、变色、加表情等等。Text.rich(…) 等价于 RichText(…)，用哪个都可以。 12345678910111213141516171819202122232425262728293031const Text.rich( // 样式片段标签TextSpan this.textSpan, &#123; Key key, this.style, this.strutStyle, this.textAlign, this.textDirection, this.locale, this.softWrap, this.overflow, this.textScaleFactor, this.maxLines, this.semanticsLabel, &#125;)const RichText(&#123; Key key, // 样式片段标签TextSpan @required this.text, this.textAlign = TextAlign.start, this.textDirection, this.softWrap = true, this.overflow = TextOverflow.clip, this.textScaleFactor = 1.0, this.maxLines, this.locale, this.strutStyle, &#125;) textSpan 类型是 TextSpan ，其它参数同上 12345678910const TextSpan(&#123; //样式片段 this.style, //要显示的文字 this.text, //样式片段TextSpan数组，可以包含多个TextSpan this.children, //用于手势进行识别处理,如点击跳转 this.recognizer, &#125;) 示例 拼接字符 123456789101112131415161718192021Text.rich(TextSpan( text: 'TextSpan', style: TextStyle( color: Colors.red, fontSize: 24.0, ), children: &lt;TextSpan&gt;[ new TextSpan( text: 'aaaaa', style: new TextStyle( color: Colors.blueGrey, ), ), new TextSpan( text: 'bbbbbb', style: new TextStyle( color: Colors.cyan, ), ), ],)), 添加交互 123456789101112131415Text.rich(TextSpan( children: &lt;TextSpan&gt;[ new TextSpan( text: 'Tap点击', style: new TextStyle( color: Colors.blueGrey, ), recognizer: new TapGestureRecognizer() ..onTap = () &#123; //增加一个点击事件 print('被点击了'); &#125;, ), ],)), recognizer 用来识别事件 TapGestureRecognizer tap 点击手势 代码https://github.com/ducafecat/flutter-learn/tree/master/text_widget 参考 Text class TextSpan class RichText class © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 见闻 - 01 Flutter 1.9 正式发布 实现三端编译发布 android ios web","date":"2019-09-15T16:00:00.000Z","path":"2019/09/16/flutter-daily/flutter-daily-01-update-sdk19/","text":"本节目标 在 web 平台运行 Flutter macOS Catalina 和 iOS 13 支持 全新的 Material widget 全球语言支持 Dart 2.5 发布 工具链优化 在 web 平台运行 Flutter 更新 SDK 12&gt; flutter channel master&gt; flutter upgrade 启用 web 支持 123&gt; flutter config --enable-web&gt; flutter devices 更新现有项目 1&gt; flutter create . 创建新项目 1&gt; flutter create myapp 运行 web 1&gt; flutter run -d chrome 编译 web 1&gt; flutter build web Flutter Widget Livebook一个在网页上展示 widget 运行效果的网站，它使用 Flutter 开发，并直接运行在网页上。 https://flutter-widget-livebook.blankapp.org/basics/introduction/ Panache则是一款为 Flutter 创建主题的工具，您可以下载创建好的主题，然后将其直接添加到代码中。 https://rxlabz.github.io/panache_web/#/ macOS Catalina 和 iOS 13 支持 iOS 13 的拖拽式工具栏 https://github.com/flutter/flutter/pull/35829 触感反馈 https://github.com/flutter/flutter/pull/37724 开发者已经提交了 pull request https://github.com/flutter/flutter/issues/35541 启用 Bitcode 实验性支持 https://github.com/flutter/flutter/wiki/Creating-an-iOS-Bitcode-enabled-app-(experimental) 全新的 Material widget ToggleButtons 示例 它能为您的应用按钮实现更加多元化的设计——不论是单选还是多选，选择至少一个或是零个，尖角还是圆角、粗边或细边，图标或文本——ToggleButtons widget 全都可以满足。 https://github.com/csells/flutter_toggle_buttons ColorFiltered 示例 允许您更改子 widget 树的颜色，用来灵活的调整配色服务。 https://github.com/csells/flutter_color_filter 全球语言支持还新增了南非语 (Afrikaans)、祖鲁语 (Zulu) 等 24 种语言的支持。 Dart 2.5 发布 ML 代码补全 https://github.com/dart-lang/sdk/wiki/Previewing-Dart-code-completions-powered-by-machine-learning 用于 Dart-C 互操作的 ffi 外部函数接口 改进常量表达式 1234const Object i = 3;const list = [i as int];const set = &#123;if (list is List&lt;int&gt;) ...list&#125;;const map = &#123;if (i is int) i: \"int\"&#125;; 工具链优化 从 Flutter 1.9 开始，iOS 新项目默认使用 Swift 语言，而非 Objective-C；Android 新项目则默认使用 Kotlin，而非 Java。 Swift 编译瘦身 改善错误信息提示 https://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;mid=2652050546&amp;idx=1&amp;sn=2c81e067ac34da40f89558f426e97af6&amp;chksm=808cb437b7fb3d2127431c7858beb3a03a29186c1c6a78aa0a2e97cd895e756b7ee3367ec935&amp;scene=21#wechat_redirect 参考 Building a web application with Flutter flutter_web Flutter 1.9 正式发布！| 全平台创新开发体验 腾讯视频链接 Flutter Widget Livebook 更精准更简洁: Flutter 改进错误信息提示 Panache iOS 13 的拖拽式工具栏 触感反馈 开发者已经提交了 pull request 启用 Bitcode 实验性支持&gt;) ToggleButtons ColorFiltered ML 代码补全 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 10 stateless stateful 有状态、无状态组件","date":"2019-08-17T16:00:00.000Z","path":"2019/08/18/flutter/flutter-10-stateless-stateful-widget/","text":"本节目标 stateless、stateless 差别 动手封装两个 widget 来体验 点击切换 点击切换 安装插件Awesome Flutter Snippets 第一步：编写 statefull 主程序12345678910111213141516171819202122import 'package:flutter/material.dart';main(List&lt;String&gt; args) &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Text('data'), ), ); &#125;&#125; 第二步：编写 stateless 图片显示1234567891011121314151617import 'package:flutter/material.dart';class MyPicView extends StatefulWidget &#123; final String picName; MyPicView(&#123;Key key, this.picName&#125;) : super(key: key); _MyPicViewState createState() =&gt; _MyPicViewState();&#125;class _MyPicViewState extends State&lt;MyPicView&gt; &#123; @override Widget build(BuildContext context) &#123; return Container( child: Image.asset('assets/$&#123;widget.picName&#125;'), ); &#125;&#125; 第三步：编写切换图片路径状态1234567891011121314151617181920212223242526272829303132333435363738394041import 'package:flutter/material.dart';import 'my_pic_view.dart';main(List&lt;String&gt; args) &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; String fileName = 'p1.jpg'; @override Widget build(BuildContext context) &#123; return MaterialApp( home: Scaffold( body: Column( children: &lt;Widget&gt;[ MyPicView( picName: fileName, ), RaisedButton( onPressed: () &#123; String tmpFileName = 'p1.jpg'; if (fileName == 'p1.jpg') &#123; tmpFileName = 'p2.jpg'; &#125; setState(() &#123; fileName = tmpFileName; &#125;); &#125;, child: Text('切换图片'), ) ], )), ); &#125;&#125; 代码https://github.com/ducafecat/flutter-learn/tree/master/state_less_ful_app 参考 插件 Awesome Flutter Snippets Flutter Stateless and Stateful Widget Flutter: Stateful vs Stateless Widget © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 09 一切都是 widget","date":"2019-08-16T16:00:00.000Z","path":"2019/08/17/flutter/flutter-09-widgets/","text":"本节目标 整体架构设计 层次分类 整体架构设计架构图 源码目录…/sdk/flutter/packages/flutter/lib 目录功能 名称 说明 Foundation 基础部分 Animation 动画 Painting 边框绘制、颜色、裁剪图像处理、画笔、插值器等跟绘制、图像、装饰相关的类 Gestures 事件类、长按、触摸、放大等等 Rendering 渲染 Widget 的基础库 Widget 依赖 Rendering 层进行构建，Widget 是 Flutter 的核心 Material Android 平台的风格 Cupertino iOS 平台风格的扁平化 widget 分类主要分为 StatelessWidget 和 StatefulWidget 官方分类 基础组件 Widget（Basics）： Container、Row、Column、Image、Text、Icon、RaisedButton、Scaffold、Appbar、FlutterLogo、Placeholder Material Components： App 结构和导航类 Scaffold、Appbar、BottomNavigationBar、TabBar、TabBarView、MaterialApp、WidgetsApp、Drawer、SliverAppBar 按钮类 RaisedButton、FloatingActionButton、FlatButton、IconButton、DropdownButton、PopupMenuButton、ButtonBar 输入和选择类 TextField、Checkbox、Raido、Switch、Slider、Date&amp;Time Pickers 对话框和控制面板类 SimpleDialog、AlertDialog、BottomSheet、ExpansionPanel、SnackBar）； 信息显示类（Image、Icon、Chip、Tooltip、DataTable、Card、LinearProgressIndicator、CircularProgressIndicator、GridView 布局类 ListTile、Stepper、Divider Cupertino （iOS-style widgets）： CupertinoActionSheet、CupertinoActivityIndicator、CupertinoAlertDialog、CupertinoButton、CupertinoDatePicker、CupertinoDialog、CupertinoDialogAction、CupertinoFullscreenDialogTransition、CupertinoPageScaffold、CupertinoPageTransition、CupertinoPicker、CupertinoPopupSurface、CupertinoSegmentedControl、CupertinoSlider、CupertinoSwitch、CupertinoNavigationBar、CupertinoTabBar、CupertinoTabScaffold、CupertinoTabView、CupertinoTextField、CupertinoTimerPicker Layout： 单个子元素的布局 Widget Container、Padding、Center、Align、FittedBox、AspectRatio、ConstrainedBox、Baseline、FractionallySizedBox、IntrinsicHeight、IntrinsicWidth、LimitedBox、Offstage、OverflowBox、SizedBox、SizedOverflowBox、Transform、CustomSingleChildLayout 多个子元素的布局 Widget Row、Column、Stack、IndexedStack、GridView、Flow、Table、Wrap、ListBody、CustomMultiChildLayout、LayoutBuilder、ListView、Expanded Text 文本显示类： Text、RichText、DefaultTextStyle Assets、图片、Icons 类： Image、Icon、RawImage、AssetBundle Input 输入类： Form、FormField、RawKeyboardListener 动画和 Motion 类： AnimatedContainer、AnimatedCrossFade、Hero、AnimatedBuilder、DecoratedBoxTransition、FadeTransition、PositionedTransition、RotationTransition、ScaleTransition、SizeTransition、SlideTransition、AnimatedDefaultTextStyle、AnimatedListState、AnimatedModalBarrier、AnimatedOpacity、AnimatedPhysicalModel、AnimatedPositioned、AnimatedSize、AnimatedWidget、AnimatedWidgetBaseState 交互模型类： 触摸交互 Draggable、LongPressDraggable、GestureDetector、DragTarget、Dismissible、IgnorePointer、AbsorbPointer、Scrollable 路由导航 Hero、Navigator 样式类： Padding、Theme、MediaQuery 绘制和效果类： Transform、Opacity、DecoratedBox、FractionalTranslation、RotatedBox、ClipOval、ClipPath、ClipRect、CustomPaint、BackdropFilter Async 异步模型类： FutureBuilder、StreamBuilder 滚动类： GridView、ListView、NestedScrollView、SingleChildScrollView、Scrollable、Scrollbar、CustomScrollView、NotificationListener、ScrollConfiguration、RefreshIndicator、PageView 辅助功能类： Semantics、MergeSemantics、ExcludeSemantics widget 地图 img 参考 Widget catalog © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 08 开发规范","date":"2019-08-15T16:00:00.000Z","path":"2019/08/16/flutter/flutter-08-standard/","text":"本节目标 Dart 规范 Flutter 阿里规范 VSCode 格式化 右键菜单 当 Save 时自动格式化 规范精要使用小写加下划线来命名库和源文件1234library peg_parser.source_scanner;import 'file_system.dart';import 'slider_menu.dart'; 优先使用小驼峰法作为常量命名1234567const pi = 3.14;const defaultTimeout = 1000;final urlScheme = RegExp('^([a-z]+):');class Dice &#123; static final numberGenerator = Random();&#125; 所有流控制结构，请使用大括号12345if (isWeekDay) &#123; print('Bike to work!');&#125; else &#123; print('Go dancing or read a book!');&#125; Doc 注释使用///文档注释来记录成员和类型。 12/// The number of characters in this chunk when unsplit.int get length =&gt; ... 导入 lib 下文件库，统一指定包名，避免过多的123```dartpackage:flutter_go/使用相邻字符串连接字符串文字123raiseAlarm( 'ERROR: Parts of the spaceship are on fire. Other ' 'parts are overrun by martians. Unclear which are which.'); 优先使用模板字符串1'Hello, $name! You are $&#123;year - birth&#125; years old.'; 在不需要的时候，避免使用花括号12'Hi, $name!'\"Wear your wildest $decade's outfit.\" 不要使用.length 查看集合是否为空12if (lunchBox.isEmpty) return 'so hungry...';if (words.isNotEmpty) return words.join(' '); 遍历一个序列123for (var person in people) &#123; ...&#125; 不要显式地将变量初始化为空123456789101112int _nextId;class LazyId &#123; int _id; int get id &#123; if (_nextId == null) _nextId = 0; if (_id == null) _id = _nextId++; return _id; &#125;&#125; 在不需要的时候不要用 this1234567891011class Box &#123; var value; void clear() &#123; update(null); &#125; void update(value) &#123; this.value = value; &#125;&#125; 尽可能使用初始化的形式1234class Point &#123; num x, y; Point(this.x, this.y);&#125; 不要使用 new12345678910Widget build(BuildContext context) &#123; return Row( children: [ RaisedButton( child: Text('Increment'), ), Text('Click!'), ], );&#125; 优先使用 async/await 代替原始的 futures123456789101112Future&lt;int&gt; countActivePlayers(String teamName) async &#123; try &#123; var team = await downloadTeam(teamName); if (team == null) return 0; var players = await team.roster; return players.where((player) =&gt; player.isActive).length; &#125; catch (e) &#123; log.error(e); return 0; &#125;&#125; 当异步没有任何用处时，不要使用它123Future afterTwoThings(Future first, Future second) &#123; return Future.wait([first, second]);&#125; 参考 Dart 官方规范 阿里 Flutter Go 代码开发规范 0.1.0 版 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 07 我们的第一个程序 hello word","date":"2019-08-11T16:00:00.000Z","path":"2019/08/12/flutter/flutter-07-first-app-helloword/","text":"本节目标 程序基础结构 pubspec.yaml 配置 布局，样式使用 目录文件结构 名称 说明 lib Flutter 代码 android Android 项目 ios IOS 项目 test 测试目录 .idea IDEA 编辑器配置 pubspec.yaml Flutter 配置文件 pubspec.lock 包版本锁定 build 编译目录 一、编写最基础 helloword 步骤 1231. 第一步 runApp(...)2. 第二步 MaterialApp(...)3. 第三步 指定 widget Text(...) 代码 1234567891011import 'package:flutter/material.dart';main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: Text('hello word!'), ));&#125; 二、采用界面脚手架 标题 侧栏 正文12345678910111213141516171819202122main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: // 第四步 页面脚手架 Scaffold( // 第五步 程序标题 appBar: AppBar( title: Text('我们第一个程序'), ), // 第六步 侧栏 drawer: Drawer( child: Text('侧栏'), ), // 正文 body: Text('hello word!'), ), ));&#125; 三、布局 样式 图片12345678910111213141516171819202122232425262728293031323334353637main(List&lt;String&gt; args) &#123; // 第一步 runApp(...) runApp( // 第二步 MaterialApp MaterialApp( // 第三步 指定 widget home: // 第四步 页面脚手架 Scaffold( // 第五步 程序标题 appBar: AppBar( title: Text('我们第一个程序'), ), // 第六步 侧栏 drawer: Drawer( child: Text('侧栏'), ), // 正文 body: // 居中 Center( child: Column( children: &lt;Widget&gt;[ // 载入图片 Image.asset('assets/p1.jpg'), // 文字 Text( '雷神', // 样式 style: TextStyle(fontSize: 28, color: Colors.red), ), ], ), ), ), ));&#125; 代码https://github.com/ducafecat/flutter-learn/tree/master/helloword 参考 Write your first Flutter app, part 1 widgets © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 06 Windows10 下配置 Flutter 开发环境","date":"2019-08-10T16:00:00.000Z","path":"2019/08/11/flutter/flutter-06-setup-windows10/","text":"本节目标 安装 JDK 1.8 安装 Flutter SDK 安装 Android Studio 安装 VSCode 配置 VSCode 插件 配置 Android 插件 配置 Android 模拟器 环境介绍 window10 专业版 jdk1.8 flutter 1.7.8 vscode 1.37.1 android studio 3.5 1. 安装 JDK 1.8 下载地址 https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 选取 windows x64 2. 安装 Flutter SDK 下载地址 https://flutter.dev/docs/development/tools/sdk/releases?tab=windows#windows 解压 我放在了 c:\\sdk\\flutter 配置环境变量 12345678# PathC:\\sdk\\flutter\\bin# FLUTTER_STORAGE_BASE_URLhttps://storage.flutter-io.cn# PUB_HOSTED_URLhttps://pub.flutter-io.cn 执行检查 1Flutter doctor 3. 安装 Android Studio 下载 https://developer.android.com/studio/ 配置 SDK 包 配置 SDK Tools 配置环境变量 123456# PathC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk\\toolsC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk\\platform-tools# ANDROID_HOMEC:\\Users\\ducaf\\AppData\\Local\\Android\\Sdk 安装 Android 证书 123flutter doctor --android-licenses一路按 Y 4. 安装 VSCode 下载地址 https://code.visualstudio.com/ 5. 配置 VSCode 插件 Flutter 必装 Awesome Flutter Snippets Paste JSON as Code bloc 6. 配置 Android 插件 flutter 7. 配置 Android 模拟器 © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 05 配置 IDE Macos","date":"2019-06-20T16:00:00.000Z","path":"2019/06/21/flutter/flutter-05-setup-ide-macos/","text":"本节目标 配置 VSCode 配置 Intellij IDEA 配置 Android Studio Dart DevTools 调试视图 Hot Reload 热更新 配置 VSCode下载安装https://code.visualstudio.com/ 安装插件 Dart 安装插件 Flutter 安装插件 Awesome Flutter Snippets 创建项目 flutter: new project 创建完成 创建模拟器 被提示需要 android 配置 Install Sources for Android 27 安装模拟器镜像 android-27 Google Play Intel x86 Atom System Image (system-images;android-27;google_apis_playstore;x86) x86 模拟器加速器 Intel x86 Emulator Accelerator (HAXM installer) android 模拟器 ios 模拟器 F5 运行 打开 Dart DevTools 配置 Intellij IDEA安装http://www.jetbrains.com/ 安装插件 Flutter new project 选择 flutter 注意 选择 sdk 位置 选项 点击 more 更多设置 module name 为英文 运行 调试器 inspector outline 配置 Android Studio安装插件 Flutter 创建项目 主面板 导航 运行同 IDEA 效果 hot reload热更新已支持 参考 Flutter SDK MacOS install Set up an editor Hot reload © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 04 配置 Android 开发环境 MacOS","date":"2019-06-19T16:00:00.000Z","path":"2019/06/20/flutter/flutter-04-setup-android-macos/","text":"本节目标 安装 Android Studio 配置 Flutter 连接 Android Studio 配置 Android 模拟器 在 Android 模拟器中运行 Flutter App 1. 安装 Android Studiohttps://developer.android.google.cn/studio 1.2 “unable to access android sdk add-on list” 点击取消 unable to access android sdk add-on list 1.3 自定义安装，全选项目 all 1.4 配置模拟器 进去 AVD Manage 不要选最新的模拟器镜像 配置模拟器参数 大家机器好点的，就多给点内存和空间吧，这样模拟器运行的快些 运行模拟器 2. 配置环境变量12345678&gt; vi ~/.bash_profile# androidexport ANDROID_HOME=~/Library/Android/sdkexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-toolsexport PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/toolssource ~/.bash_profile 3. 运行 Flutter3.1 创建项目 crate &amp; run 1234567891011121314151617181920&gt; flutter create my_app&gt; cd my_app&gt; flutter runUsing hardware rendering with device Android SDK built for x86. If you get graphics artifacts, consider enabling software renderingwith \"--enable-software-rendering\".Launching lib/main.dart on Android SDK built for x86 in debug mode...Initializing gradle... 1.4sResolving dependencies... 2.2sRunning Gradle task 'assembleDebug'...Running Gradle task 'assembleDebug'... Done 2.2sBuilt build/app/outputs/apk/debug/app-debug.apk.Installing build/app/outputs/apk/app.apk... 2.2sD/EGL_emulation( 5614): eglMakeCurrent: 0xe2c05300: ver 3 0 (tinfo 0xe2c03350)Syncing files to device Android SDK built for x86... 2,067ms (!)🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on Android SDK built for x86 is available at: http://127.0.0.1:64823/uqW8O20byg8=/For a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\". 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 03 配置 IOS 开发环境 MacOS","date":"2019-06-18T16:00:00.000Z","path":"2019/06/19/flutter/flutter-03-setup-ios-macos/","text":"本节目标 安装 xcode 配置 flutter 连接 xcode 在 IOS 模拟器中运行 flutter app 1. 安装 XCode安装 Xcode 9.0 以上版本 (访问 Apple网站 下载或者，Mac App Store 方式安装). 2. 第一次启动 XCode 安装所需组件 3. 配置 Xcode command-line tools1234&gt; sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer检验 打印 license&gt; sudo xcodebuild -license 4. 启动模拟器1open -a Simulator 5. 创建 Flutter 项目5.1 create &amp; run1234567&gt; flutter create my_app&gt; cd my_app&gt; flutter run🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on iPhone Xʀ is available at: http://127.0.0.1:62341/ztmtijcoJrI=/For a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\". 模拟器运行 5.2 vm 报告1http://127.0.0.1:62341/ztmtijcoJrI=/#/vm vm 6. 部署到真机6.1 安装软件包1234567&gt; brew update&gt; brew install --HEAD usbmuxd&gt; brew link usbmuxd&gt; brew install --HEAD libimobiledevice&gt; brew install ideviceinstaller ios-deploy cocoapods&gt; pod setup 安装 homebrew pod setup 很慢的问题 手动下载 git clone https://github.com/CocoaPods/Specs 复制 ~/.cocoapods/repos/Specs-master 执行 pod update 复制 master 下的 .git 到 Specs-master 停止 pod update 重命名 Specs-master 为 master 进入项目的 ios 目录下 pod install 成功 6.2 配置AppStore开发者账号1open ios/Runner.xcworkspace Add Account 开发者登录 https://developer.apple.com/cn/programs/ 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 02 安装 SDK MacOS","date":"2019-06-17T16:00:00.000Z","path":"2019/06/18/flutter/flutter-02-install-sdk-macos/","text":"本节目标 采用 git 方式安装 SDK 编译代码 flutter tool 检查环境 flutter doctor 1. 安装 SDK1.1 方式一：下载SDK包 SDK包下载 解压到 ~/Documents/sdk/flutter 1.2 方式二：git 拉取源码123&gt; mkdir ~/Documents/sdk&gt; cd ~/Documents/sdk&gt; git clone -b stable https://github.com/flutter/flutter.git 1.3 持续升级下次更新直接进入目录升级 123&gt; cd ~/Documents/sdk/flutter&gt; git pull&gt; flutter --version 2. 配置环境变量12345678910&gt; vi ~/.bash_profile# flutter , 注意没有单引号export PATH=$&#123;PATH&#125;:~/Documents/sdk/flutter/bin# 以下两行适合国内export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn&gt; source ~/.bash_profile 3. zsh 用户修改配置文件123456&gt; vi ~/.zshrc最后一行加入source ~/.bash_profile重启终端生效 4. 命令行运行 flutter123456789101112131415161718192021222324252627&gt; flutter doctorxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrunBuilding flutter tool... ╔════════════════════════════════════════════════════════════════════════════╗ ║ Welcome to Flutter! - https://flutter.dev ║ ║ ║ ║ The Flutter tool anonymously reports feature usage statistics and crash ║ ║ reports to Google in order to help Google contribute improvements to ║ ║ Flutter over time. ║ ║ ║ ║ Read about data we send with crash reports: ║ ║ https://github.com/flutter/flutter/wiki/Flutter-CLI-crash-reporting ║ ║ ║ ║ See Google's privacy policy: ║ ║ https://www.google.com/intl/en/policies/privacy/ ║ ║ ║ ║ Use \"flutter config --no-analytics\" to disable analytics and crash ║ ║ reporting. ║ ╚════════════════════════════════════════════════════════════════════════════╝Doctor summary (to see all details, run flutter doctor -v):Oops; flutter has exited unexpectedly.Crash report written to /Users/ducafecat/flutter_01.log;please let us know at https://github.com/flutter/flutter/issues. 第一次运行会进行 build CommandLineTools 工具推荐，先安装 xcode （早晚都要安装的） 然后 Terminal 运行 xcode-select –install xcode-select --install 5. 检查环境 flutter doctor123456789101112131415161718192021222324252627282930313233343536373839&gt; flutter doctorDoctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel stable, v1.5.4-hotfix.2, on Mac OS X 10.14.5 18F132, locale zh-Hans-CN)[!] Android toolchain - develop for Android devices (Android SDK version 29.0.0) ✗ Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses[✗] iOS toolchain - develop for iOS devices ✗ Xcode installation is incomplete; a full installation is necessary for iOS development. Download at: https://developer.apple.com/xcode/download/ Or install Xcode via the App Store. Once installed, run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run: brew update brew install --HEAD usbmuxd brew link usbmuxd brew install --HEAD libimobiledevice brew install ideviceinstaller ✗ ios-deploy not installed. To install: brew install ios-deploy ✗ CocoaPods not installed. CocoaPods is used to retrieve the iOS platform side's plugin code that responds to your plugin usage on the Dart side. Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS. For more info, see https://flutter.dev/platform-plugins To install: brew install cocoapods pod setup[!] Android Studio (version 3.4) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] IntelliJ IDEA Ultimate Edition (version 2019.1.3) ✗ Flutter plugin not installed; this adds Flutter specific functionality. ✗ Dart plugin not installed; this adds Dart specific functionality.[!] VS Code (version 1.35.1) ✗ Flutter extension not installed; install from https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter[!] Connected device ! No devices available! Doctor found issues in 6 categories. 6. 查看版本 version12345&gt; flutter --versionFlutter 1.5.4-hotfix.2 • channel stable • https://github.com/flutter/flutter.gitFramework • revision 7a4c33425d (9 weeks ago) • 2019-04-29 11:05:24 -0700Engine • revision 52c7a1e849Tools • Dart 2.3.0 (build 2.3.0-dev.0.5 a1668566e5) 参考 Flutter SDK MacOS install © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Flutter 零基础入门中文教学 - 01 前言","date":"2019-06-16T16:00:00.000Z","path":"2019/06/17/flutter/flutter-01-introduce/","text":"本节目标 介绍 Flutter 课程计划 如果获取课程资料、代码、视频 适合人群 泛移动开发人员 原生移动开发人员 前端开发人员 跨平台: 移动、Web、桌面、嵌入 跨平台 Flutter 框架结构 Flutter Framework Framework 这一层使用 Dart 语言开发，它实现了一套基础库。 Foundation、Animation、Painting、Gestures 为 Dart 实现的 UI 层，提供动画、手势及绘制。 Rendering 渲染层，依赖 UI 层，在运行时 Rendering 层会构建一个 Widget 树，当有变化时，会更具一定的算法计算出有变化的部分，然后更新 Widget 树。 Widgets 层是 Flutter 提供的的一套基础组件库，在基础组件库之上，Flutter 还提供了 Material 和 Cupertino 两种视觉风格的组件库。 Flutter Engine Skia 是一个开源的二维图形库，提供各种常用的 API，并可在多种软硬件平台上运行。谷歌 Chrome 浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。 Skia 由谷歌出资管理，任何人都可基于 BSD 免费软件许可证使用 Skia。Skia 开发团队致力于开发其核心部分， 并广泛采纳各方对于 Skia 的开源贡献。 因为没有使用原生的 UI 和绘制框架，所以才保证了 Flutter 的高性能体验。 Skia官网 image-20190626154959148 Skia是一个开源的二维图形库，提供各种常用的API，并可在多种软硬件平台上运行。谷歌Chrome浏览器、Chrome OS、安卓、火狐浏览器、火狐操作系统以及其它许多产品都使用它作为图形引擎。 Skia由谷歌出资管理，任何人都可基于BSD免费软件许可证使用Skia。Skia开发团队致力于开发其核心部分， 并广泛采纳各方对于Skia的开源贡献。 Flutter for Webhttps://flutter.dev/web 通过对比，可以发现，web框架层和mobile的几乎一模一样。因此只需要重新实现一下引擎和嵌入层，不用变动Flutter API就可以完全可以将UI代码从Android / IOS Flutter App移植到Web。Dart能够使用Dart2Js编译器把Dart代码编译成Js代码。大多数原生App元素能够通过DOM实现，DOM实现不了的元素可以通过Canvas来实现。 Fuchsia OS 许中兴博士演讲：Fuchsia OS 简介及幻灯片下载 桌面系统 手机OS 平板 华为荣耀Play Flutter 特点 多平台支持 iOS Android Linux 未来 Fuchsia OS 原生用户界面 120fps 超高性能 两套成熟 UI 库 Material Design 和 Cupertino 响应式的框架 Redux、RxDart、BloC 业务和 UI 分离 Flutter 支持 Hot Reload 国内阿里咸鱼、腾讯、京东、国外的谷歌等公司都已经有上线产品在使用 Flutter 开发 showcase Flutter 横向对比 Cordova 基于 WebView 渲染，遇到动画、大列表 性能慢 React Native、Weex 基于虚拟 DOM 生成原生组件，比 Cordova 这类的性能好，但是遇到负责项目会有叠加 view 过多性能瓶颈 Flutter 自己封装的组件和渲染引擎，在设计上肯定会比 RN 这类的性能好，用的自家 Dart 语言深度编译，不需要像 RN 桥接 JavaScript 进行通讯，也会在性能上有优势 Flutter 生态资源 Flutter应用展示 官方包管理平台 awesome 课程计划123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118- 开篇写在最前 - Flutter 介绍 - 学习方法推荐 - 课程计划- 开发环境搭建和工具配置 - Flutter 环境配置 MacOS - IOS 环境配置 MacOS - Android 环境配置 MacOS - Flutter 环境配置 Windows10 - Android 环境配置 Windows10 - 开发工具的选择 VSCode、IDEA、AndroidStudio- 基础知识 - 项目及配置文件介绍 - 开发规范 - 一切都是 widget - StatelessWidget、StatefulWidget - 框架组件 MaterialApp、Scaffold - 布局组件 Container、Center、Row、Column - 基础组件 Text、Image、Button - 路由导航 Routes、Navigator - 生命周期- 快熟上手实战 - 新闻应用程序结构分析 - 使用布局组件搭建新闻列表界面 - 采用第三方 Http Dio 程序包读取数据 - 解析 Json 到 Modle - 使用自定义组件展示新闻行信息 - 点击新闻条路由导航到详情页 - 采用Web容器展示新闻内容 - 上拉刷新、下拉加载新闻列表 - 定制 Loading 效果 - 采用矢量图标库 - 采用 Sqlite 实现新闻列表首页缓存 - Redux 管理主题样式 - 加入应用启动画面 - 打包 Android APK 文件 - 打包 IOS IPA 文件- 基础组件 - Widget 与 Element - StatelessWidget - StatefulWidget - Text - Image - Button - AppBar - AlertDialog - Icon - TextField - Form - Switch - Checkbox- 布局组件 - 线性 Row - 线性 Column - 弹性 Flex - 弹性 Expanded - 层叠 Stack - 层叠 IndexedStack - 层叠 Positioned - 流式 Flow - 流式 Wrap- 容器组件 - Scaffold - Container - Center - Padding - ConstrainedBox - SizedBox - DecoratedBox - Transform- 导航组件 - TabBar - NavigationBar - PageView- 可滚动组件 - CustomScrollView - ListView - GridView - ScrollView - ExpansionPanel - ScrollController- 表格组件 - Table - DataTables- 功能型组件 - WillPopScope - InheritedWidget - 主题 Theme- 事件处理与通知 - 事件处理 - 手势识别 - 全局事件总线 - 通知消息- 自定义 Widget - 组合其它 Widget - 自绘 CustomPaint、Canvas- 进阶 - 文件操作 - Http 请求 - WebSocket 连接 - Json 解析 - 包与插件 - 国际化 - 数据库缓存 - Redux 参考 flutter.io skia showcase An open list of apps built with Flutter Flutter: a Portable UI Framework for Mobile, Web, Embedded, and Desktop © 猫哥 https://ducafecat.tech","tags":[{"name":"flutter","slug":"flutter","permalink":"https://ducafecat.tech/tags/flutter/"}]},{"title":"Dart语言学习 - 38 代码分格 API 设计 effective-design","date":"2019-01-28T08:44:13.000Z","path":"2019/01/28/dart/dart-38-effective-design/","text":"本节目标 API 设计 环境 Dart 2.1.0 要 使用一致的术语12345pageCount // 一个成员变量updatePageCount() // 和 pageCount 名字一致。toSomething() // 和 Iterable 的 toList() 一致。asSomething() // 和 List 的 asMap() 一致。Point // 广为人知的概念。 避免 缩写1234pageCountbuildRectanglesIOStreamHttpRequest 推荐 把最具描述性的名词放到最后1234pageCount // A count (of pages).ConversionSink // A sink for doing conversions.ChunkedConversionSink // A ConversionSink that's chunked.CssFontFaceRule // A rule for font faces in CSS. 考虑 尽量让代码看起来像普通的句子12345678// \"If errors is empty...\"if (errors.isEmpty) ...// \"Hey, _subscription, cancel!\"_subscription.cancel();// \"Get the monsters where the monster has claws.\"monsters.where((monster) =&gt; monster.hasClaws); 推荐 使用非命令式动词短语命名布尔类型的变量和属性123456isEmptyhasElementscanCloseclosesWindowcanShowPopuphasShownPopup 考虑 省略命名布尔参数的动词123Isolate.spawn(entryPoint, message, paused: false)new List.from(elements, growable: true)new RegExp(pattern, caseSensitive: false) 推荐 使用命令式动词短语来命名带有副作用的函数或者方法1234list.add()queue.removeFirst()window.refresh()connection.downloadData() 考虑 使用名词短语或者非命令式动词短语命名返回数据为主要功能的方法或者函数12list.elementAt(3)string.codeUnitAt(4) 推荐 使用 to___() 来命名把对象的状态转换到一个新的对象的函数123list.toSet()stackTrace.toString()dateTime.toLocal() 使用 as___() 来命名把原来对象转换为另外一种表现形式的函数123list.asMap()bytes.asFloat32List()subscription.asFuture() 避免 在方法或者函数名称中描述参数12list.add(element)map.remove(key) 避免 定义使用简单的方法可以替代的只有一个成员的抽象类和 Java 不同的是， Dart 支持一等方法（first-class functions）、闭包和优雅的语法来使用它们。 如果你需要的只是一个回调函数，使用方法即可。 如果你定义了一个类，里面只有一个名字无意义的函数， 例如 call 或者 invoke， 这种情况最好用方法替代 1typedef bool Predicate(item); 避免 定义只包含静态成员的类12345DateTime mostRecent(List&lt;DateTime&gt; dates) &#123; return dates.reduce((a, b) =&gt; a.isAfter(b) ? a : b);&#125;const _favoriteMammal = 'weasel'; 然后，这条规则并不是强制的。对于一些常量或者枚举型的类型， 使用类来把相关的成员组织到一起可能也是合理的。当然， 使用库也是同样合理的。1234567class Color &#123; static const red = '#f00'; static const green = '#0f0'; static const blue = '#00f'; static const black = '#000'; static const white = '#fff';&#125; 推荐 使用构造函数而不是静态函数来创建对象1234567class Point &#123; num x, y; Point(this.x, this.y); Point.polar(num theta, num radius) : x = radius * math.cos(theta), y = radius * math.sin(theta);&#125; 要 使用 getter 来定义访问属性的操作如果函数的名字带有 get 前缀，或者是一个像 length 或者 size 这样 的名称，这种情况通常最好定义该函数为一个 getter。 当全部满足下面的条件的时候，你应该使用一个 getter： 没有参数。返回一个值没有副作用 调用一个 getter 不应该改变对象外部可见的状态 (内部缓存和延时初始化的状态可以发生变化) 如果对象的状态在多次调用同一个 getter 之间没有发生变化，则 多次调用同一个 getter 应该返回同一个值 123rectangle.widthcollection.isEmptybutton.canShow 要 对于本质上为修改对象属性的函数要使用 setter12rectangle.width = 3;button.visible = false; 不要 为 setter 指定返回类型1set foo(Foo value) &#123;...&#125; 推荐 为私有成员提供类型在公开的 API 上使用类型可以帮助使用你的库的用户。同样， 是私有代码上使用类型，可以帮助你的你的同事或者代码维护者。 另外，在私有成员上使用类型，对于将来自己查看代码 也有帮助。 12345678class CallChainVisitor &#123; final SourceVisitor _visitor; final Expression _target; void _writeCall(Expression call) &#123; ... &#125; ...&#125; 避免 在方法表达式上使用类型1var names = people.map((person) =&gt; person.name); 避免 在没必要的地方使用 dynamic 类型在大部分 Dart 代码中，类型可以忽略，这样该参数类型会自动设置为 dynamic。 所以没必要手动指定类型为 dynamic 的， 只需要省略类型即可。 12345lookUpOrDefault(String name, Map map, defaultValue) &#123; var value = map[name]; if (value != null) return value; return defaultValue;&#125; 避免 使用 Function 类型 正确 1bool isValidString(String value, bool predicate(String string)) &#123; ... &#125; 错误 1bool isValidString(String value, Function predicate) &#123; ... &#125; 要 使用 Object 来替代 dynamic 来表示可以接受任意对象1234567891011// Accepts any object.void log(Object object) &#123; print(object.toString());&#125;// Only accepts bool or String, which can't be expressed in a type annotation.bool convertToBool(arg) &#123; if (arg is bool) return arg; if (arg is String) return arg == 'true'; throw new ArgumentError('Cannot convert $arg to a bool.');&#125; 考虑使用命名参数或者命名构造函数以及命名常量来清晰 的表明您的意图：1234new Task.oneShot();new Task.repeating();new ListBox(scroll: true, showScrollbars: true);new Button(ButtonState.enabled); 对于 setter 则没有这个要求，应为 setter 的名字已经明确的 表明了值所代表的意义12listBox.canScroll = true;button.isEnabled = false; 避免 把用户想要忽略的参数放到位置可选参数的前列123456789101112131415161718String.fromCharCodes(Iterable&lt;int&gt; charCodes, [int start = 0, int end])DateTime(int year, [int month = 1, int day = 1, int hour = 0, int minute = 0, int second = 0, int millisecond = 0, int microsecond = 0])Duration( &#123;int days: 0, int hours: 0, int minutes: 0, int seconds: 0, int milliseconds: 0, int microseconds: 0&#125;) 避免 使用强制无意义的参数1string.substring(start) 要 使用包含开始位置并且不包含结束位置的范围参数如果你定义一个函数或者方法让用户从基于位置排序的集合中 选择一些元素，需要一个开始位置索引和结束位置索引分别制定开始 元素的位置以及结束元素的位置。结束位置通常是指 大于最后一个元素的位置的值。 核心库就是这样定义的，所以最好和核心库保持一致 12[0, 1, 2, 3].sublist(1, 3) // [1, 2].'abcd'.substring(1, 3) // \"bc\". 不要 在自定义 == 操作符中判断 null语言规范表明了这种判断已经自动执行了，你的 == 自定义操作符只有当 右侧对象不为 null 的时候才会执行。 正确 123456class Person &#123; final String name; operator ==(other) =&gt; other is Person &amp;&amp; name == other.name;&#125; 错误 12345678class Person &#123; final String name; operator ==(other) =&gt; other != null &amp;&amp; other is Person &amp;&amp; name == other.name;&#125; 参考 design © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 37 代码分格 最佳实践 effective-usage","date":"2019-01-28T07:30:46.000Z","path":"2019/01/28/dart/dart-37-effective-usage/","text":"本节目标 最佳实践 环境 Dart 2.1.0 使用相邻的字符串字面量定义来链接字符串123raiseAlarm( 'ERROR: Parts of the spaceship are on fire. Other ' 'parts are overrun by martians. Unclear which are which.'); 使用插值的形式来组合字符串和值1'Hello, $name! You are $&#123;year - birth&#125; years old.'; 避免在字符串插值中使用多余的大括号123'Hi, $name!'\"Wear your wildest $decade's outfit.\"'Wear your wildest $&#123;decade&#125;s outfit.' 尽可能的使用集合字面量来定义集合12var points = [];var addresses = &#123;&#125;; 如果有必要还可以提供泛型类型12var points = &lt;Point&gt;[];var addresses = &lt;String, Address&gt;&#123;&#125;; 不要 使用 .length 来判断集合是否为空12if (lunchBox.isEmpty) return 'so hungry...';if (words.isNotEmpty) return words.join(' '); 使用高阶（higher-order）函数来转换集合数据123var aquaticNames = animals .where((animal) =&gt; animal.isAquatic) .map((animal) =&gt; animal.name); 避免 在 Iterable.forEach() 中使用函数声明形式123for (var person in people) &#123; ...&#125; forEach() 方法通常在 JavaScript 中使用，原因是系统内置的 for-in 循环并不能提供期望的结果。 相反，在 Dart 中如果需要遍历一个集合，通常使用循环语句 如果你只想在每个集合元素上调用一个已经定义好的函数，则可以使用 forEach() 函数1people.forEach(print); 要 用方法声明的形式来给方法起个名字 正确 12345void main() &#123; localFunction() &#123; ... &#125;&#125; 错误示范 12345void main() &#123; var localFunction = () &#123; ... &#125;;&#125; 不要 显式的把变量初始化为 null123456789101112int _nextId;class LazyId &#123; int _id; int get id &#123; if (_nextId == null) _nextId = 0; if (_id == null) _id = _nextId++; return _id; &#125;&#125; 在 Dart 中没有初始化的变量和域会自动的 初始化为 null。在语言基本就保证了该行为的可靠性。 在 Dart 中没有 “未初始化的内存”这个概念。所以添加 = null 是多余的。 不要 创建没必要的 getter 和 setter12345678910```# 段落 1- 正确```dartclass Box &#123; var contents;&#125; 错误 1234567class Box &#123; var _contents; get contents =&gt; _contents; set contents(value) &#123; _contents = value; &#125;&#125; 推荐 使用 final 关键字来限定只读属性123class Box &#123; final contents = [];&#125; 考虑 用 =&gt; 来实现只有一个单一返回语句的函数123get width =&gt; right - left;bool ready(num time) =&gt; minTime == null || minTime &lt;= time;containsValue(String value) =&gt; getValues().contains(value); 要 尽可能的在定义变量的时候初始化其值1234567class Folder &#123; final String name; final List&lt;Document&gt; contents = []; Folder(this.name); Folder.temp() : name = 'temporary';&#125; 要 尽可能的使用初始化形式1234class Point &#123; num x, y; Point(this.x, this.y);&#125; 要 把 super() 调用放到构造函数初始化列表之后调用123View(Style style, List children) : _children = children, super(style) &#123; 要 使用 rethrow 来重新抛出捕获的异常123456try &#123; somethingRisky();&#125; catch(e) &#123; if (!canHandle(e)) rethrow; handle(e);&#125; 推荐 使用 async/await 而不是直接使用底层的特性123456789Future&lt;bool&gt; doAsyncComputation() async &#123; try &#123; var result = await longRunningCalculation(); return verifyResult(result.summary); &#125; catch(e) &#123; log.error(e); return false; &#125;&#125; 不要 在没有有用效果的情况下使用 async123Future afterTwoThings(Future first, second) &#123; return Future.wait([first, second]);&#125; 参考 usage © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 36 - 代码分格 文档 effective-documentation","date":"2019-01-28T07:15:00.000Z","path":"2019/01/28/dart/dart-36-effective-documentation/","text":"本节目标 文档分格 环境 Dart 2.1.0 按照句子的格式来格式化评论12// Not if there is nothing before it.if (_chunks.isEmpty) return false; 如果第一个单词不是大小写相关的标识符，则首字母要大写。使用标点符号结尾 （句号、感叹号、问号）。对于所有的注释都是这样要求的：文档注释、 行内注释、甚至 TODO 注释。即使是一句话的一半也需要如此。 使用块注释作为解释说明1234greet(name) &#123; // Assume we have a valid name. print('Hi, $name!');&#125; 使用 /// 文档注释来注释成员和类型12/// The number of characters in this chunk when unsplit.int get length =&gt; ... 把第一个语句定义为一个段落12345/// Defines a flag.////// Throws an [ArgumentError] if there is already an option named [name] or/// there is already an option using abbreviation [abbr]. Returns the new flag.Flag addFlag(String name, String abbr) &#123; ... &#125; 注释文档中的第一个段落应该是简洁的、面向用户的注释。例如下面的示例， 通常不是一个完成的语句。 用第三人称来开始函数或者方法的文档注释12345/// Returns `true` if every element satisfies the [predicate].bool all(bool predicate(T element)) &#123; ... &#125;/// Starts the stopwatch if not already running.void start() &#123; ... &#125; 使用名词短语来开始变量、getter、setter 的注释12345/// The current day of the week, where `0` is Sunday.int weekday;/// The number of checked buttons on the page.int get checkedCount &#123; ... &#125; 注释文档应该表述这个属性是什么。虽然 getter 函数会做些计算， 但是也要求这样，调用者关心的是其结果而 不是如何计算的 使用名词短语来开始库和类型注释1234/// A chunk of non-breaking output text terminated by a hard or soft newline.////// ...class Chunk &#123; ... &#125; 在程序中，类的注释通常是最重要的文档。 类的注释描述了类型的不变性、介绍其使用的术语、 提供类成员使用的上下文信息。为类提供一些注释可以让 其他类成员的注释更易于理解和编写。 在文档注释中添加示例代码1234/// Returns the lesser of two numbers.////// min(5, 3); // 3.num min(num a, num b) &#123; ... &#125; 人类非常擅长从示例中抽象出实质内容，所以即使提供 一行最简单的示例代码都可以让 API 更易于理解。 而 Dart 把参数、返回值等描述放到文档注释中，并使用方括号来引用 以及高亮这些参数和返回值12345/// Defines a flag.////// Throws an [ArgumentError] if there is already an option named [name] or/// there is already an option using abbreviation [abbr]. Returns the new flag.Flag addFlag(String name, String abbr) &#123; ... &#125; 把注释文档放到注解之前123/// _Deprecated: Use [newMethod] instead._@deprecatedoldMethod(); 使用 “this” 而不是 “the” 来引用实例成员1234567class Box &#123; /// The value this wraps. var _value; /// True if this box contains a value. bool get hasValue =&gt; _value != null;&#125; 参考 documentation © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 35 - 代码分格 effective style","date":"2019-01-28T06:43:12.000Z","path":"2019/01/28/dart/dart-35-effective-style/","text":"本节目标 代码分格 环境 Dart 2.1.0 使用 UpperCamelCase 风格来命名类型名称12345class SliderMenu &#123; ... &#125;class HttpRequest &#123; ... &#125;typedef bool Predicate&lt;T&gt;(T value); 使用 lowercase_with_underscores 风格来命名库和文件名名字1234library peg_parser.source_scanner;import 'file_system.dart';import 'slider_menu.dart'; 使用 lowercase_with_underscores 风格命名导入的前缀1234import 'dart:json' as json;import 'dart:math' as math;import 'package:javascript_utils/javascript_utils.dart' as js_utils;import 'package:js/js.dart' as js; 使用 lowerCamelCase 风格来命名其他的标识符1234567var item;HttpRequest httpRequest;align(clearItems) &#123; // ...&#125; 使用 lowerCamelCase 来命名常量1234567const pi = 3.14;const defaultTimeout = 1000;final urlScheme = new RegExp('^([a-z]+):');class Dice &#123; static final numberGenerator = new Random();&#125; 把 “dart:” 导入语句放到其他导入语句之前12345import 'dart:async';import 'dart:html';import 'package:bar/bar.dart';import 'package:foo/foo.dart'; 把 “package:” 导入语句放到相对导入语句之前1234import 'package:bar/bar.dart';import 'package:foo/foo.dart';import 'a.dart'; 把”第三方” “package:” 导入语句放到其他语句之前。12345import 'package:bar/bar.dart';import 'package:foo/foo.dart';import 'package:myapp/io.dart';import 'package:myapp/util.dart'; 把导出（export）语句放到所有导入语句之后的部分1234import 'src/error.dart';import 'src/string_source.dart';export 'src/error.dart'; 按照字母顺序来排序每个部分中的语句12345import 'package:bar/bar.dart';import 'package:foo/bar.dart';import 'a.dart';import 'a/b.dart'; 在所有的控制结构上使用大括号12345if (true) &#123; print('sanity');&#125; else &#123; print('opposite day!');&#125; 当只有 if 语句没有 else 语句并且 所有语句可以放到一行的时候，可以省略大括号1if (arg == null) return defaultValue; 通常用于当条件满足的时候就跳出 if 或者 返回的情况。 但是对于其他表达式，如果可以放到一行中， 也可以这样使用1if (parameter == null) parameter = defaultValue; 在每个语句或者声明后面添加一个空行123456main() &#123; first(statement); second(statement);&#125;anotherDeclaration() &#123; ... &#125; 在关键字 operator 后面添加一个空格1bool operator ==(other) =&gt; ...; 在二元和三元操作符之间添加空格1234average = (a + b) / 2;largest = a &gt; b ? a : b;if (obj is! SomeType) print('not SomeType');optional([parameter = defaultValue]) &#123; ... &#125; 不要 在一元操作符前后添加空格12!conditionindex++ 把开始的大括号 ({) 放到同一行上123456789class Foo &#123; method() &#123; if (true) &#123; // ... &#125; else &#123; // ... &#125; &#125;&#125; 在函数和方法体的 { 之前添加一个空格123getEmptyFn(a) &#123; return () &#123;&#125;;&#125; 把三元操作符放到多个表达式的下一行开始位置123return someCondition ? whenTrue : whenFalse; 把 . 放到下一行开头当表达式换行的时候12someVeryLongVariable.withAVeryLongProperty .aMethodOnThatObject(); 把构造函数初始化列表中的每个参数和值都放到同一行123456MyClass() : firstField = 'some value', secondField = 'another', thirdField = 'last' &#123; // ...&#125; 当无法在一行写完集合的时候，把每个元素都用集合定义的方式来表达12345678910mapInsideList([ &#123; 'a': 'b', 'c': 'd' &#125;, &#123; 'a': 'b', 'c': 'd' &#125;,]); 用两个空格来缩进代码块和集合体123456789if (condition) &#123; print('hi'); [ long, list, literal ];&#125; 缩进 switch case 两个空格， case 体四个空格123456789switch (fruit) &#123; case 'apple': print('delish'); break; case 'durian': print('stinky'); break;&#125; 只少使用两个空格来缩进多行函数级联调用1234buffer ..write('Hello, ') ..write(name) ..write('!'); 使用四个空格来缩进同一行的换行12345someLongObject.aReallyLongMethodName(longArg, anotherLongArg, wrappedToNextLine);bobLikes() =&gt; isDeepFried || (hasPieCrust &amp;&amp; !vegan) || containsBacon; 当表达式包含多行函数或者 集合声明定义的时候除外123456789new Future.delayed(const Duration(seconds: 1), () &#123; print('I am a callback');&#125;);args.addAll([ '--mode', 'release', '--checked']); 参考 style © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 34 注解 Metadata","date":"2019-01-21T16:15:56.000Z","path":"2019/01/22/dart/dart-34-metadata/","text":"本节目标 了解内置注解 deprecated override 自定义注解，并使用反射实现 环境 Dart 2.1.0 作用官方称之为 元数据 , 其实在 java 里就是注解 简化代码编写，方便阅读，和重用 内置 deprecated用来注解 不建议使用、老旧的 成员对象 1234567891011121314151617class Television &#123; @deprecated void activate() &#123; turnOn(); &#125; void turnOn() &#123; print('on!'); &#125;&#125;main(List&lt;String&gt; args) &#123; var t = new Television(); t.activate(); t.turnOn();&#125; 内置 override表明你的函数是想覆写超类的一个函数 超类就是被你集成的父类 下面的代码中父类是 Object 1234567891011class A &#123; @override noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125;main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.message();&#125; 内置 proxy注解来避免警告信息 在 Dart2 中已经被标记为过时老旧 1234567891011@proxyclass A &#123; noSuchMethod(Invocation mirror) &#123; print('没有找到方法'); &#125;&#125;main(List&lt;String&gt; args) &#123; dynamic a = new A(); a.say();&#125; 自定义注解使用反射可以在运行时获取元数据信息 比如服务端的控制器开发 下面的代码 展示了如何在反射中读取 metadata 信息 123456789101112131415161718192021222324252627282930import 'dart:mirrors';@Todo('seth', 'make this do something')void doSomething() &#123; print('do something');&#125;class Todo &#123; final String who; final String what; const Todo(this.who, this.what);&#125;main(List&lt;String&gt; args) &#123; currentMirrorSystem().libraries.forEach((uri, lib) &#123; // print('lib: $&#123;uri&#125;'); lib.declarations.forEach((s, decl) &#123; // print('decl: $&#123;s&#125;'); decl.metadata.where((m) =&gt; m.reflectee is Todo).forEach((m) &#123; var anno = m.reflectee as Todo; if (decl is MethodMirror) &#123; print('Todo($&#123;anno.who&#125;, $&#123;anno.what&#125;)'); ((decl as MethodMirror).owner as LibraryMirror).invoke(s, []); &#125; ; &#125;); &#125;); &#125;);&#125; 代码 34-媒体信息 参考 metadata © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 33 类型信息 typedef","date":"2019-01-20T16:21:06.000Z","path":"2019/01/21/dart/dart-33-typedef/","text":"本节目标 typedef 使用 环境 Dart 2.1.0 作用typedef 用来保存函数的信息，未来可能会保存类信息。 示例代码 采用 typedef 123456789101112131415161718192021// 定义函数类型typedef int Compare(Object a, Object b);// 定义排序类class SortedCollection &#123; Compare compare; // 构造时传入函数 SortedCollection(this.compare);&#125;// 定义排序函数int sort(Object a, Object b) =&gt; 0;// 程序入口main() &#123; // 实例化传入 SortedCollection coll = new SortedCollection(sort); // 类型检查 assert(coll.compare is Function); assert(coll.compare is Compare);&#125; 未采用 typedef 123456789101112131415161718192021class SortedCollection &#123; // 函数对象 Function compare; // 定义函数 SortedCollection(int f(Object a, Object b)) &#123; compare = f; &#125;&#125;// 生命函数int sort(Object a, Object b) =&gt; 0;main() &#123; // 实例化 SortedCollection coll = new SortedCollection(sort); // 我们只知道 compare 是一个 Function 类型， // 但是不知道具体是何种 Function 类型？ assert(coll.compare is Function);&#125; 区别就是 typedef 编辑器会提示函数信息 代码 33-类型信息 参考 typedefs © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 32 线程隔离 isolate","date":"2019-01-19T16:52:55.000Z","path":"2019/01/20/dart/dart-32-isolates/","text":"本节目标 了解线程隔离 环境 Dart 2.1.0 isolate在Dart中实现并发可以用Isolate，它是类似于线程(thread)但不共享内存的独立运行的worker，是一个独立的Dart程序执行环境。其实默认环境就是一个main isolate。 在Dart语言中，所有的Dart代码都运行在某个isolate中，代码只能使用所属isolate的类和值。不同的isolate可以通过port发送message进行交流。 示意图 ReceivePort 创建入口点 Isolate.spawn 连接进程 SendPort.send 发送消息 echo 例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import 'dart:async';import 'dart:isolate';// 第1步：定义主线程main() async &#123; // 第3步：编写回调Port var receivePort = new ReceivePort(); await Isolate.spawn(echo, receivePort.sendPort); // 第6步：保存隔离线程回调Port var sendPort = await receivePort.first; // 第7步：发送消息 var msg = await sendReceive(sendPort, \"foo\"); print('received $msg'); msg = await sendReceive(sendPort, \"bar\"); print('received $msg');&#125;// 第2步：定义隔离线程的入口点echo(SendPort sendPort) async &#123; // 第4步：编写回调Port var port = new ReceivePort(); // 第5步：告诉主线程回调入口点 sendPort.send(port.sendPort); // 第8步：循环接收消息 await for (var msg in port) &#123; // 数组 msg[0] 是数据 var data = msg[0]; // 数组 msg[1] 是发送方Port SendPort replyTo = msg[1]; // 回传发送方 数据 replyTo.send(data); // 如果数据时 bar 关闭当前回调 if (data == \"bar\") port.close(); &#125;&#125;/*主线程 发送消息函数数组 msg[0] 是数据数组 msg[1] 是发送方Port返回 隔离线程 Port*/Future sendReceive(SendPort port, msg) &#123; ReceivePort response = new ReceivePort(); port.send([msg, response.sendPort]); return response.first;&#125; 代码 32-隔离 参考 isolates © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 31 可调用类 callable","date":"2019-01-16T03:37:26.000Z","path":"2019/01/16/dart/dart-31-callable/","text":"本节目标 定义并执行可定义类 环境 Dart 2.1.0 callable123456789101112main(List&lt;String&gt; args) &#123; var phone = IOSPhone(); phone('911'); // IOSPhone()('911');&#125;class IOSPhone &#123; call(String num) &#123; print('phone number is $num'); &#125;&#125; 代码 可调用类 参考 callable-classes © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 30 - 生成器 Generators","date":"2019-01-15T09:25:58.000Z","path":"2019/01/15/dart/dart-30-generator/","text":"本节目标 同步、异步代码生成器 环境 Dart 2.1.0 同步生成器123456789101112131415main(List&lt;String&gt; args) &#123; var it = naturalsTo(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsTo(int n) sync* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; yield 会等待 moveNext 指令 异步生成器123456789101112131415161718192021222324import 'dart:async';main(List&lt;String&gt; args) &#123; // 流监听 // asynchronousNaturalsTo(5).listen((onData) &#123; // print(onData); // &#125;); // 流监听 StreamSubscription 对象 StreamSubscription subscription = asynchronousNaturalsTo(5).listen(null); subscription.onData((value) &#123; print(value); // subscription.pause(); &#125;);&#125;Stream&lt;int&gt; asynchronousNaturalsTo(int n) async* &#123; print('start'); int k = 0; while (k &lt; n) &#123; yield k++; &#125; print('end');&#125; 以流的方式一次性推送 StreamSubscription 对象进行流监听控制 递归生成器12345678910111213main(List&lt;String&gt; args) &#123; var it = naturalsDownFrom(5).iterator; while(it.moveNext()) &#123; print(it.current); &#125;&#125;Iterable&lt;int&gt; naturalsDownFrom(int n) sync* &#123; if ( n &gt; 0) &#123; yield n; yield* naturalsDownFrom(n-1); &#125;&#125; yield* 以指针的方式传递递归对象，而不是整个同步对象 代码 生成器 generators 参考 generators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 29 异步 async","date":"2018-12-05T07:51:09.000Z","path":"2018/12/05/dart/dart-29-async/","text":"本节目标 调用异步 等待、递归 异步返回值 环境 Dart 2.1.0 调用异步 回调12345678import 'package:dio/dio.dart';void main() &#123; Dio dio = new Dio(); dio.get(\"https://www.baidu.com\").then((response) &#123; print(response.data); &#125;);&#125; then 的方式异步回调 调用异步 等待1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; async 写在函数定义await 写在异步请求头 异步返回值123456789101112import 'package:dio/dio.dart';void main() async &#123; var content = await getUrl('https://www.baidu.com'); print(content);&#125;Future&lt;String&gt; getUrl(String url) async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(url); return response.data;&#125; 定义 Future&lt;T&gt; 返回对象 代码 异步 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 28 泛型","date":"2018-12-05T03:30:26.000Z","path":"2018/12/05/dart/dart-28-generic/","text":"本节目标 使用泛型 定义泛型 限制泛型 环境 Dart 2.1.0 泛型使用12345678910111213main(List&lt;String&gt; args) &#123; var l = List&lt;String&gt;(); l.add('aaa'); l.add('bbb'); l.add('ccc'); print(l); var m = Map&lt;int, String&gt;(); m[1] = 'aaaa'; m[2] = 'bbbb'; m[3] = 'cccc'; print(m);&#125; 很多的容器对象，在创建对象时都可以定义泛型类型。 泛型函数123456789main(List&lt;String&gt; args) &#123; var key = addCache('a00001', 'val.....'); print(key);&#125;K addCache&lt;K, V&gt;(K key, V val) &#123; print('$&#123;key&#125; $&#123;val&#125;'); return key;&#125; 泛型可以用在一个函数的定义 构造函数泛型123456789main(List&lt;String&gt; args) &#123; var p = Phone&lt;String&gt;('abc00000011111'); print(p.mobileNumber);&#125;class Phone&lt;T&gt; &#123; final T mobileNumber; Phone(this.mobileNumber);&#125; 这是大多数情况下使用泛型的场景，在一个类的构造函数中 泛型限制12345678910111213141516main(List&lt;String&gt; args) &#123; var ad = AndroidPhone(); var p = Phone&lt;AndroidPhone&gt;(ad); p.mobile.startup();&#125;class Phone&lt;T extends AndroidPhone &gt; &#123; final T mobile; Phone(this.mobile);&#125;class AndroidPhone &#123; void startup() &#123; print('Android Phone 开机'); &#125;&#125; 通过 extends 关键字 可以限定你可以泛型使用的类型 代码 泛型 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 27 库","date":"2018-12-05T02:00:54.000Z","path":"2018/12/05/dart/dart-27-library/","text":"本节目标 核心库 外部库 导入模块 环境 Dart 2.1.0 导入核心库1234567import 'dart:io';void main() &#123; var f = new File('README.md'); var content = f.readAsStringSync(); print(content);&#125; 导入第三方库 编写 pubspec.yaml 123name: ducafecatdependencies: dio: 1.0.9 程序调用 1234567import 'package:dio/dio.dart';void main() async &#123; Dio dio = new Dio(); Response&lt;String&gt; response = await dio.get(\"https://www.baidu.com\"); print(response.data);&#125; 导入文件1234567import './phone.dart';void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125; 前缀123456789101112import './phone.dart';import './phone1.dart' as pp;void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown(); var xm1 = pp.Phone('android'); xm1.startup(); xm1.shutdown();&#125; 筛选包内容12345678// import './phone.dart' hide AndroidPhone;import './phone.dart' show IOSPhone;void main() &#123; var xm = IOSPhone(); xm.startup(); xm.shutdown();&#125; hide 筛掉某几个包show 只使用某几个包 延迟载入1234567891011import './phone.dart' deferred as pp;void main() async &#123; var run = true; if (run) &#123; await pp.loadLibrary(); var xm = pp.Phone('android'); xm.startup(); xm.shutdown(); &#125;&#125; loadLibrary() 方式在需要的时候载入包可提高程序启动速度用在不常使用的功能用在载入时间过长的包 代码 库 参考 language-tour 包管理平台 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 26 工厂函数","date":"2018-12-04T06:33:01.000Z","path":"2018/12/04/dart/dart-26-factory/","text":"本节目标 工厂函数 工厂构造函数 环境 Dart 2.1.0 工厂函数简化类型实例化 1234567891011121314151617181920212223242526272829303132333435363738void main() &#123; var xm = phoneFactory('ios'); xm.startup(); xm.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;Phone phoneFactory(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('Android Phone 开机'); &#125;&#125;class IOSPhone extends Phone &#123; void startup() &#123; super.startup(); print('IOS Phone 开机'); &#125;&#125; 工厂构造函数12345678910111213141516171819202122232425262728293031323334353637void main() &#123; var xm = Phone('android'); xm.startup(); xm.shutdown();&#125;abstract class Phone &#123; factory Phone(String name) &#123; switch (name) &#123; case 'android': return new AndroidPhone(); break; default: return new IOSPhone(); &#125; &#125; void startup(); void shutdown();&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('Android Phone 开机'); &#125; void shutdown() &#123; print('Android 关机'); &#125;&#125;class IOSPhone implements Phone &#123; void startup() &#123; print('IOS Phone 开机'); &#125; void shutdown() &#123; print('IOS 关机'); &#125;&#125; 代码 factory 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 25 多继承类 mixin","date":"2018-12-04T03:26:18.000Z","path":"2018/12/04/dart/dart-25-mixin/","text":"本节目标 多继承类的实现方式 函数重名冲突 环境 Dart 2.1.0 类多继承123456789101112131415161718192021222324252627282930313233343536373839404142void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.call(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 采用 with ... , .... , ... 方式 mixin 入多个类功能 函数重名冲突1234567891011121314151617181920212223242526272829303132333435363738394041424344454647void main() &#123; var xm = Xiaomi(); xm.startup(); xm.shutdown(); xm.sms();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125;class AndroidSystem &#123; void call() &#123; print('android call'); &#125;&#125;class Weixin &#123; void sms() &#123; print('weixin sms'); &#125;&#125;class QQ &#123; void sms() &#123; print('qq sms'); &#125;&#125;class Xiaomi extends AndroidPhone with AndroidSystem, Weixin, QQ &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; 遇到相同功能的函数，最后载入的会覆盖之前的函数定义 代码 mixin 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 24 extends 继承","date":"2018-11-28T09:45:11.000Z","path":"2018/11/28/dart/dart-24-extends/","text":"本节目标 实现继承 继承抽象类的问题 不可多继承 父类调用 调用父类构造 重写超类函数 环境 Dart 2.0.0 实现继承1234567891011121314151617void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123;&#125; 继承抽象类的问题12345678910111213void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class Phone &#123; void startup(); void shutdown();&#125;class AndroidPhone extends Phone &#123;&#125; 抽象类中只定义抽象函数，实例化访问会报错 父类调用1234567891011121314151617181920void main() &#123; var p = AndroidPhone(); p.startup();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone extends Phone &#123; void startup() &#123; super.startup(); print('AndroidPhone 开机'); &#125;&#125; super 对象可以访问父类 调用父类构造1234567891011121314151617void main() &#123; var p = AndroidPhone(12345678); p.showNumber();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number);&#125; 可调用父类的 构造函数 重写超类函数12345678910111213141516171819202122void main() &#123; dynamic p = AndroidPhone(12345678); p.showNumber111();&#125;class Mobile &#123; int number; int signal; Mobile(this.number); void showNumber() &#123; print('010-$&#123;number&#125;'); &#125;&#125;class AndroidPhone extends Mobile &#123; AndroidPhone(int number) : super(number); @override void noSuchMethod(Invocation mirror) &#123; print('被重写 noSuchMethod'); &#125;&#125; 在重写的函数上加修饰符 @override 代码 extends 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 23 interface 接口","date":"2018-11-28T09:23:46.000Z","path":"2018/11/28/dart/dart-23-interface/","text":"本节目标 实现接口 implements 多接口 环境 Dart 2.0.0 Dart 中没有 interface 关键字实现接口12345678910111213141516171819void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;abstract class IPhone &#123; void startup(); void shutdown();&#125;class AndroidPhone implements IPhone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; 接口用途的抽象类 请用字母 I 开头 , 如 IPhone 从一个普通类履行接口1234567891011121314151617181920212223void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class AndroidPhone implements Phone &#123; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以从一个普通的类履行接口 履行多接口12345678910111213141516171819202122232425262728void main() &#123; var p = AndroidPhone(); p.startup(); p.shutdown();&#125;class Phone &#123; void startup() &#123; print('开机'); &#125; void shutdown() &#123; print('关机'); &#125;&#125;class Mobile &#123; int signal;&#125;class AndroidPhone implements Phone, Mobile &#123; int signal; void startup() &#123; print('AndroidPhone 开机'); &#125; void shutdown() &#123; print('AndroidPhone 关机'); &#125;&#125; Dart 可以履行多个接口 代码 interface 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 22 abstract 抽象","date":"2018-11-28T08:17:42.000Z","path":"2018/11/28/dart/dart-22-abstract/","text":"本节目标 抽象 类、函数 接口方式使用 继承方式使用 环境 Dart 2.0.0 abstract 类、函数、成员 普通类前加 abstract 123456abstract class Person &#123; static const String name = 'ducafecat'; void printName()&#123; print(name); &#125;&#125; 不能直接 new 实例化12var p = Person();p.printName(); Dart 2 开始 new 可以不写，提高阅读体验 继承方式使用定义 12class Teacher extends Person &#123;&#125; 实例 12var user = Teacher();user.printName(); 接口方式使用定义 1234567891011abstract class Person &#123; static const String name = ''; void printName();&#125;class Student implements Person &#123; String name = 'this is student'; void printName() &#123; print(name); &#125;&#125; 实例 12var user = Student();user.printName(); 代码 abstract 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 21 静态成员","date":"2018-11-17T08:02:07.000Z","path":"2018/11/17/dart/dart-21-static/","text":"本节目标 静态变量 静态方法 环境 Dart 2.0.0 静态变量static 定义声明 123class People &#123; static String name = 'ducafecat';&#125; 调用 静态变量可以通过外部直接访问,不需要将类实例化 1print(People.name); 函数内部访问实例化后的类也可以访问该静态变量 声明 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(name); &#125;&#125; 调用 12var p = new People();p.show(); 不能用 this因为静态变量实际上存在于类中,而不是实例本身 123456class People &#123; static String name = 'ducafecat'; void show() &#123; print(this.name); &#125;&#125; 静态方法静态方法可以通过外部直接访问 声明 123456class People &#123; static String name = 'ducafecat'; static void printName() &#123; print(name); &#125;&#125; 调用 1People.printName(); 总结 实例化后将无法通过外部直接调用 static 成员 静态成员与实例成员是分开的, 静态成员处于类的定义体中, 实例成员处于类的实例中 代码 static.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 20 get set","date":"2018-11-17T07:30:21.000Z","path":"2018/11/17/dart/dart-20-getter-setter/","text":"本节目标 定义、使用、简化 get set 环境 Dart 2.0.0 定义、使用 get setgetter 和 setter 的好处是，你可以开始使用实例变量，后来 你可以把实例变量用函数包裹起来，而调用你代码的地方不需要修改。 定义 1234567891011class People &#123; String _name; set pName(String value) &#123; _name = value; &#125; String get pName &#123; return 'people is $&#123;_name&#125;'; &#125;&#125; 使用 123var p = new People();p.pName = 'ducafecat';print(p.pName); 简化 get set1234567class People &#123; String _name; set pName(String value) =&gt; _name = value; String get pName =&gt; 'people is $&#123;_name&#125;';&#125; 代码 getset.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 19 类","date":"2018-11-17T05:52:30.000Z","path":"2018/11/17/dart/dart-19-class/","text":"本节目标 定义、使用类 构造函数 简化构造 初始化列表 命名构造函数 重定向构造函数 环境 Dart 2.0.0 定义、使用类定义 12class Point &#123;&#125; 使用 1var p = new Point(); 构造函数定义 12345678class Point &#123; num x; num y; Point(num x, num y)&#123; this.x = x; this.y = y; &#125;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 简化构造定义 12345class Point &#123; num x; num y; Point(this.x, this.y);&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y]); 初始化列表定义 123456class Point &#123; num x; num y; var origin; Point(this.x, this.y): origin = &#123;x:x, y:y&#125;;&#125; 使用 12var p = new Point(1, 2);print([p.x, p.y, p.origin]); 命名构造函数定义 12345678class Point &#123; num x; num y; Point.fromJson(Map json) &#123; x = json['x']; y = json['y']; &#125;&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 重定向构造函数定义 123456class Point &#123; num x; num y; Point(this.x, this.y); Point.fromJson(Map json) : this(json['x'], json['y']);&#125; 使用 12var p = new Point.fromJson(&#123;\"x\": 1, \"y\": 2&#125;);print([p.x, p.y]); 代码 class.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 18 异常","date":"2018-11-17T02:53:26.000Z","path":"2018/11/17/dart/dart-18-exceptions/","text":"本节目标 错误类型 抛出、捕获 环境 Dart 2.0.0 错误的两种类型Exception 类Exception class 名称 说明 DeferredLoadException 延迟加载错误 FormatException 格式错误 IntegerDivisionByZeroException 整数除零错误 IOException IO 错误 IsolateSpawnException 隔离产生错误 TimeoutException 超时错误 Error 类Error class 名称 说明 AbstractClassInstantiationError 抽象类实例化错误 ArgumentError 参数错误 AssertionError 断言错误 AsyncError 异步错误 CastError Cast 错误 ConcurrentModificationError 并发修改错误 CyclicInitializationError 周期初始错误 FallThroughError Fall Through 错误 JsonUnsupportedObjectError json 不支持错误 NoSuchMethodError 没有这个方法错误 NullThrownError Null 错误错误 OutOfMemoryError 内存溢出错误 RemoteError 远程错误 StackOverflowError 堆栈溢出错误 StateError 状态错误 UnimplementedError 未实现的错误 UnsupportedError 不支持错误 抛出错误12345678// Exception 对象// throw new FormatException('这是一个格式错误提示');// Error 对象// throw new OutOfMemoryError();// 任意对象// throw '这是一个异常'; 捕获错误12345678// try &#123;// // throw new FormatException('这是一个格式错误提示');// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// &#125; catch (e) &#123;// print(e);// &#125; 重新抛出错误12345678// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; Finally 执行12345678910// try &#123;// throw new OutOfMemoryError();// &#125; on OutOfMemoryError &#123;// print('没有内存了');// rethrow;// &#125; catch (e) &#123;// print(e);// &#125; finally &#123;// print('end');// &#125; 代码 exception.dart 参考 language-tour Exception class Error class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 17 流程控制语句","date":"2018-11-12T07:56:51.000Z","path":"2018/11/12/dart/dart-17-controlFlow/","text":"本节目标 条件判断 循环控制 环境 Dart 2.0.0 if else1234bool isPrint = true;if (isPrint) &#123; print('hello');&#125; for123for (var i = 0; i &lt; 5; i++) &#123; print(i);&#125; while12345bool isDone = false;while(!isDone) &#123; print('is not done'); isDone = true;&#125; do while12345bool isRunning = true;do &#123; print('is running'); isRunning = false;&#125; while (isRunning); switch case12345678String name = 'cat';switch (name) &#123; case 'cat': print('cat'); break; default: print('not find');&#125; break12345678num i = 1;while(true) &#123; print('$&#123;i&#125; - run'); i++; if(i == 5) &#123; break; &#125;&#125; continue123456for (var i = 0; i &lt; 5; i++) &#123; if (i &lt; 3) &#123; continue; &#125; print(i);&#125; continue 指定位置1234567891011121314151617String command = \"close\";switch(command) &#123; case \"open\": print(\"open\"); break; case \"close\": print(\"close\"); continue doClose; doClose: case \"doClose\": print(\"DO_CLOSE\"); break; default: print(\"-----\");&#125; 代码 controlFlow.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 16 操作符","date":"2018-11-12T02:41:28.000Z","path":"2018/11/12/dart/dart-16-operators/","text":"本节目标 优先级 算术操作符 相等相关的操作符 类型判定操作符 赋值操作符 逻辑操作符 位和移位操作符 条件表达式 级联操作符 环境 Dart 2.0.0 操作符表 描述 操作符 \b 后缀操作 expr++ expr– () [] . ?. 前缀操作 -expr !expr ~expr ++expr –expr 乘除 * / % ~/ 加减 + - 位移 &lt;&lt; &gt;&gt; 按位与 &amp; 按位异或 ^ 按位或 \\ 类型操作 &gt;= &gt; &lt;= &lt; as is is! 相等 == != 逻辑与 &amp;&amp; 逻辑或 \\ \\ 是为为空 ?? 三目运算 expr1 ? expr2 : expr3 级联 .. 赋值 = *= /= ~/= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= \\ = ??= 优先级顺序 上面左边 优先级高于 右边下面 123if(x == 1 &amp;&amp; y == 2)&#123; ...&#125; 算术操作符 操作符 解释 + 加号 – 减号 -expr 负号 * 乘号 / 除号 ~/ 除号，但是返回值为整数 % 取模 123print(5/2);print(5~/2);print(5 % 2); 相等相关的操作符 操作符 解释 == 相等 != 不等 &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 类型判定操作符 操作符 解释 as 类型转换 is 如果对象是指定的类型返回 True is! 如果对象是指定的类型返回 False 123456int a = 123;String b = 'ducafecat';String c = 'abc';print(a as Object);print(b is String);print(c is! String); 条件表达式 操作符 解释 condition ? expr1 : expr2 如果 condition 是 true，执行 expr1 (并返回执行的结果)； 否则执行 expr2 并返回其结果。 expr1 ?? expr2 如果 expr1 是 non-null，返回其值； 否则执行 expr2 并返回其结果。 1234567bool isFinish = true;String txtVal = isFinish ? 'yes' : 'no';bool isFinish;isFinish = isFinish ?? false;orisFinish ??= false; 位和移位操作符 操作符 解释 &amp; 逻辑与 逻辑或 ^ 逻辑异或 ~expr 取反 &lt;&lt; 左移 &gt;&gt; 右移 级联操作符 操作符 解释 .. 可以在同一个对象上 连续调用多个函数以及访问成员变量。 123456StringBuffer sb = new StringBuffer();sb..write('hello')..write('word')..write('\\n')..writeln('doucafecat'); 其他操作符 操作符 解释 () 使用方法 代表调用一个方法 [] 访问 List 访问 list 中特定位置的元素 . 访问 Member 访问元素，例如 foo.bar 代表访问 foo 的 bar 成员 ?. 条件成员访问 和 . 类似，但是左边的操作对象不能为 null，例如 foo?.bar 如果 foo 为 null 则返回 null，否则返回 bar 成员 12String a;print(a?.length); 代码 operator.dart 参考 operators © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 15 函数 Function","date":"2018-11-12T01:36:04.000Z","path":"2018/11/12/dart/dart-15-function/","text":"本节目标 函数定义 可选参数 默认值 命名参数 内部定义 环境 Dart 2.0.0 函数定义123456int add(int x) &#123; return x + 1;&#125;调用add(1); 可选参数123456789101112int add(int x, [int y, int z]) &#123; if (y == null) &#123; y = 1; &#125; if (z == null) &#123; z = 1; &#125; return x + y + z;&#125;调用int(1, 2); 可选参数 默认值123456int add(int x, [int y = 1, int z = 2]) &#123; return x + y;&#125;调用int(1, 2); 命名参数 默认值123456int add(&#123;int x = 1, int y = 1, int z = 1&#125;) &#123; return x + y + z;&#125;调用int(x: 1, y: 2); 函数内定义123456void main()&#123; int add(int x)&#123; return x + x; &#125; print(add(1));&#125; Funcation 返回函数对象1234567Function makeAdd(int x) &#123; return (int y) =&gt; x + y;&#125;调用var add = makeAdd(1);print(add(5)); 代码 function.dart 参考 Functions © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 14 symbol、enum、comments","date":"2018-10-27T03:05:15.000Z","path":"2018/10/27/dart/dart-14-symbol-enum-comments/","text":"本节目标 symbol enum comments 环境 Dart 2.0.0 符号 SymbolDart语言的标识符，在反射中用的很普及，特别是很多发布包都是混淆后的。 123456import 'dart:mirrors';Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); 枚举 Enum适合用在常量定义，类型比较很方便。 123enum Status &#123; none, running, stopped, paused &#125;Status.values.forEach((it) =&gt; print('$it - index: $&#123;it.index&#125;')); 注释 Comments单行注释1// Symbol libraryName = new Symbol('dart.core'); 多行注释12345678/* * Symbol * Symbol libraryName = new Symbol('dart.core');MirrorSystem mirrorSystem = currentMirrorSystem();LibraryMirror libMirror = mirrorSystem.findLibrary(libraryName);libMirror.declarations.forEach((s, d) =&gt; print('$s - $d')); */ 文档注释12345678/// `main` 函数////// 符号/// 枚举///void main() &#123; ...&#125; 可参考 String 类中的注释使用 代码 symbol-enum-comments.dart 参考 language-tour Symbol © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 13 Runes","date":"2018-10-27T00:51:21.000Z","path":"2018/10/27/dart/dart-13-runes/","text":"本节目标 Runes 基础知识 字符编码 ASCII、Unicode、UTF-8、UTF-16、UTF-32 环境 Dart 2.0.0 RunesRunes 对象是一个 32位 字符对象，用来表示一个字。这样设计也是考虑兼容 UTF-16 四个字节的情况。 length 和 runes.length 比较1234567String a = '👺';print(a.length);print(a.runes.length);&gt;&gt; 输出2 // 标识占 2 个 16 位字符1 // 表示占 1 个 32 位字符 runes 是一个 32 位字符对象 操作 32-bit Unicode 字符123456Runes b = new Runes('\\u&#123;1f596&#125; \\u6211');var c = String.fromCharCodes(b);或者String c = '\\u&#123;1f596&#125; \\u6211' 如果非4个数值，需要用 {…} 返回 16-bit code units 的 codeUnitAt codeUnits1234567var a = '👺';print(a.codeUnitAt(0));print(a.codeUnits);&gt;&gt; 输出55357 // 第 1 位的 10 进制数值[55357, 56442] // 显示 2 位的 10 进制数值 返回 32-bit Unicode 的 runes123456var a = '👺';print(a.runes);&gt;&gt; 输出(128122) // 显示 32 位的 10 进制数值 String 操作整理 名称 说明 codeUnitAt 某个字符的码 10进制 fromCharCodes Runes 转 String 工厂函数 runes 返回字对象 基础知识字符集ASCII ASCII 非 ASCII 中的 GB2312、GBK 汉字内码扩展规范 Unicode、UTF-8、UTF-16、UTF-32 UTF-8 UTF-16 UTF-32 代码 runes.dart 参考 language-tour Runes ASCII Unicode UTF-8 UTF-16 UTF-32 在线字符 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 12 Set","date":"2018-10-25T06:47:10.000Z","path":"2018/10/25/dart/dart-12-set/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 声明Set 是一个元素唯一的有序队列 松散12345678// var a = new Set();// a.add('java');// a.add('php');// a.add('python');// a.add('java');// a.add('sql');// a.add('swift');// a.add('dart'); 强类型12// var b = new Set&lt;String&gt;();// b.addAll(['dart', 'c#', 'j#', 'e#']); 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个 last 最后一个 length 个数 常用方法 名称 说明 addAll 添加 contains 查询单个 containsAll 查询多个 difference 集合不同 intersection 交集 union 联合 lookup 按对象查询到返回对象 remove 删除单个 removeAll 删除多个 clear 清空 firstWhere 按条件正向查询 lastWhere 按条件反向查询 removeWhere 按条件删除 retainAll 只保留几个 retainWhere 按条件只保留几个 1234567891011121314151617181920// b.addAll(['dart', 'c#', 'j#', 'e#']);// print(b.contains('dart'));// print(b.containsAll(['dart', 'swift']));// print('b =&gt; $b');// print(a.difference(b));// print(a.intersection(b));// print(b.lookup('dart'));// print(b.union(a));// b.remove('dart');// b.removeAll(['dart','c#']);// b.clear();// print(b.firstWhere((it) =&gt; it == 'c#'));// print(b.lastWhere((it) =&gt; it == 'c#'));// b.removeWhere((it) =&gt; it == 'c#');// b.retainAll(['e#']);// b.retainWhere((it) =&gt; it == 'e#');// b.retainWhere((it) &#123;// bool ret = it == 'e#';// return ret;// &#125;); 代码 set.dart 参考 language-tour Set © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 11 Map","date":"2018-10-23T07:36:12.000Z","path":"2018/10/23/dart/dart-11-map/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始key value 形式的集合 1var a = &#123;'name': 'ducafecat', 'web': 'www.ducafecat.tech'&#125;; 声明松散1234var a = new Map();a['name'] = 'ducafecat';a['web'] = 'www.ducafecat.tech';a[0] = 'abc'; 强类型123var b = new Map&lt;int, String&gt;();b[0] = 'java';b[1] = 'python'; 基本属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 keys key 集合 values values 集合 length 个数 entries 加工数据入口 123456print(a.isEmpty);print(a.isNotEmpty);print(a.keys);print(a.values);print(a.length);print(a.entries); 常用方法 名称 说明 addAll 添加 addEntries 从入口添加 containsKey 按 key 查询 containsValue 按 value 查询 clear 清空 remove 删除某个 removeWhere 按条件删除 update 更新某个 updateAll 按条件更新 addAll1b.addAll(&#123;'first': 'java', 'second': 'python'&#125;); addEntries1b.addEntries(a.entries); containsKey1print(a.containsKey('name')); containsValue1print(a.containsValue('www.ducafecat.tech')); clear1b.clear(); remove1a.remove('name'); removeWhere1a.removeWhere((key,val) =&gt; key == 'name'); update1a.update('name', (val) =&gt; 'abc'); updateAll1a.updateAll((key, val) =&gt; \"---$val---\"); 操作符 名称 说明 [] 取值 []= 赋值 12print(a['name']);a['name'] = 'abc'; 代码 map.dart 参考 language-tour Map © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 10 列表","date":"2018-10-19T02:49:35.000Z","path":"2018/10/19/dart/dart-10-list/","text":"本节目标 初始、声明 常用属性 常用方法 环境 Dart 2.0.0 初始List 是一个有序列表 12var l = [1, 2, 3];print(l); 声明自动123456List&lt;int&gt; l = new List();l..add(1)..add(2)..add(3);print(l); 定长123456List&lt;int&gt; l = new List(3);// print(l[0]);l[0] = 1;l[1] = 2;l[2] = 3;print(l); 属性 名称 说明 isEmpty 是否为空 isNotEmpty 是否不为空 first 第一个对象 last 最后一个对象 length 个数 reversed 反转 1234567var l = [1, 2, 3];print(l.first);print(l.last);print(l.length);print(l.isEmpty);print(l.isNotEmpty);print(l.reversed); 方法 名称 说明 add 添加 addAll 添加多个 insert 插入 insertAll 插入多个 indexOf 查询 indexWhere 按条件查询 remove 删除 removeAt 按位置删除 fillRange 按区间填充 getRange 按区间获取 shuffle 随机变换顺序 sort 排序 sublist 创建子 添加12345678List&lt;int&gt; l = new List();l ..add(1) ..addAll([2, 3, 4, 5]) ..insert(0, 6) ..insertAll(6, [6, 6]) ; 查询12print(l.indexOf(5));print(l.indexWhere((it) =&gt; it == 4)); 删除1234l.remove(6);print(l);l.removeAt(5);print(l); Range12l.fillRange(0, 3, 9);print(l.getRange(0, 5)); 洗牌1234l.shuffle();print(l);l.shuffle();print(l); 排序12345678910111213数字l.sort();print(l);日期List&lt;DateTime&gt; dtList = new List();dtList.addAll([ DateTime.now(), DateTime.now().add(new Duration(days: -12)), DateTime.now().add(new Duration(days: -2)) ]);print(dtList);dtList.sort((a, b) =&gt; a.compareTo(b));print(dtList); 复制子列表123print(l);var l2 = l.sublist(1,4);print(l2); 操作符 名称 说明 + 连接 [] 取值 []= 赋值 12345var l1 = [1, 2, 3];var l2 = [4, 5, 6];print(l1 + l2);l1[2] = 9;print(l1[2]); 代码 list.dart 参考 language-tour List © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 09 日期时间","date":"2018-10-18T07:02:05.000Z","path":"2018/10/18/dart/dart-09-datetime/","text":"本节目标 声明 UTC 时间 公元时间 时间戳 解析标准时间 时间运算 环境 Dart 2.0.0 声明1234var now = new DateTime.now();print(now);var d = new DateTime(2018, 10, 10, 9, 30);print(d); 创建时间 UTC UTC 协调世界时 原子时 原子钟 12var d = new DateTime.utc(2018, 10, 10, 9, 30);print(d); 解析时间 IOS 8601 ISO 8601 时区 时区列表 1234var d1 = DateTime.parse('2018-10-10 09:30:30Z');print(d1);var d2 = DateTime.parse('2018-10-10 09:30:30+0800');print(d2); 时间增减量1234var d1 = DateTime.now();print(d1);print(d1.add(new Duration(minutes: 5)));print(d1.add(new Duration(minutes: -5))); 比较时间1234567var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);print(d1.isAfter(d2));print(d1.isBefore(d2));var d1 = DateTime.now();var d2 = d1.add(new Duration(milliseconds: 30));print(d1.isAtSameMomentAs(d2)); 时间差1234var d1 = new DateTime(2018, 10, 1);var d2 = new DateTime(2018, 10, 10);var difference = d1.difference(d2);print([difference.inDays, difference.inHours]); 时间戳 公元 123var now = new DateTime.now();print(now.millisecondsSinceEpoch);print(now.microsecondsSinceEpoch); 代码 datetime.dart 参考 language-tour DateTime UTC 协调世界时 原子时 原子钟 ISO 8601 时区 时区列表 公元 © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 08 字符串","date":"2018-10-18T05:48:22.000Z","path":"2018/10/18/dart/dart-08-string/","text":"本节目标 声明方式 字符串模板 字符串连接 转义操作 其它常用运算 环境 Dart 2.0.0 单引号或者双引号12String a = 'ducafecat';String b = \"ducafecat\"; 字符串模板123var a = 123;String b = 'ducafecat : $&#123;a&#125;';print(b); 字符串连接123456789101112131415var a = 'hello' + ' ' + 'ducafecat';var a = 'hello'' ''ducafecat';var a = 'hello' ' ' 'ducafecat';var a = 'hello'' ''ducafecat';var a = '''hello wordthis is multi line''';var a = \"\"\"hello wordthis is multi line\"\"\";print(a); 转义符号12var a = 'hello word \\n this is multi line';print(a); 取消转义12var a = r'hello word \\n this is multi line';print(a); 搜索12345var a = 'web site ducafecat.tech';print(a.contains('ducafecat'));print(a.startsWith('web'));print(a.endsWith('tech'));print(a.indexOf('site')); 提取数据1234print(a.substring(0,5));var b = a.split(' ');print(b.length);print(b[0]); 大小写转换12print(a.toLowerCase());print(a.toUpperCase()); 裁剪 判断空字符串12print(' hello word '.trim());print(''.isEmpty); 替换部分字符1print('hello word word!'.replaceAll('word', 'ducafecat')); 字符串创建123456var sb = StringBuffer();sb..write('hello word!')..write('my')..write(' ')..writeAll(['web', 'site', 'https://ducafecat.tech']);print(sb.toString()); 代码 string.dart 参考 language-tour String © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 07 布尔","date":"2018-10-17T09:37:31.000Z","path":"2018/10/17/dart/dart-07-bool/","text":"本节目标 布尔 声明、比较、默认值 断言、asset、isEmpty、isNaN 逻辑操作符 &amp;&amp;、||、! 关系运算符 == != &gt; &gt;= &lt; &lt;= 环境 Dart 2.0.0 声明为了代表布尔值，Dart 有一个名字为 bool 的类型。 只有两个对象是布尔类型的：true 和 false 所创建的对象， 这两个对象也都是编译时常量。 bool 12bool a;print(a); 只有 true 对象才被认为是 true。 所有其他的值都是 flase。 1234String name = 'ducafecat';if(name) &#123; print('this is name');&#125; assert 断言123456789var a = true;assert(a);var name = '';assert(name.isEmpty);assert(name.isNotEmpty);var num = 0 / 0;assert(num.isNaN); 注意： 断言只在检查模式下运行有效，如果在生产模式 运行，则断言不会执行。 逻辑运算符&amp;&amp; 逻辑与123bool a = true;bool b = true;assert(a &amp;&amp; b); || 逻辑或123bool a = true;bool b = false;assert(a || b); ! 逻辑非123bool a = true;bool b = !a;print(b); 关系运算符== 等于1if(a == b) &#123;&#125; != 不等于1if(a != b) &#123;&#125; &gt; 大于1if(a &gt; b) &#123;&#125; &gt;= 大于或等于1if(a &gt;= b) &#123;&#125; &lt; 小于1if(a &lt; b) &#123;&#125; &lt;= 小于或等于1if(a &lt;= b) &#123;&#125; 代码 bool.dart 参考 language-tour bool © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 06 数值","date":"2018-10-16T09:08:33.000Z","path":"2018/10/16/dart/dart-06-number/","text":"本节目标 数值类型 int、double、num 数值表示法 十进制、十六进制 科学计数法 数值转换 位运算 环境 Dart 2.0.0 数值数值类型int整数值，其取值通常位于 -253 和 253 之间。 int class double64-bit (双精度) 浮点数，符合 IEEE 754 标准。 double class numint 和 double 都是 num 的子类。 num class 数值表示法 十进制、十六进制123int a = 1001;int b = 0xABC;print([a, b]); 科学计数法12num a = 21.2e3;print([a]); 数值转换123456789101112131415// string -&gt; int// string -&gt; doubleint a = int.parse('123');double b = double.parse('1.223');// int -&gt; string// double -&gt; stringString a = 123.toString();String b = 1.223.toString();print([a, b]);// double -&gt; intdouble a = 1.8;int b = a.toInt();print(b); 位运算&amp; 与运算同时 1 才行 12341 0 1 0 100 0 1 0 2--------0 0 1 0 2 123var a = 10;var b = 2;print(a &amp; b); | 或运算有一个 1 就行 12341 0 1 0 100 0 1 0 2--------1 0 1 0 10 123var a = 10;var b = 2;print(a | b); 可以用在常量组合 123456const USE_LEFT = 0x1;const USE_TOP = 0x2;const USE_LEFT_TOP = USE_LEFT | USE_TOP;var result = USE_LEFT | USE_TOP;print(result);assert(USE_LEFT_TOP == result); ~ 非运算二进制数逐位进行逻辑非运算 1234560 1 0 0 1 +9 二进制 最高位 0 整数 1 负数0 0 1 1 0 补码1 1 0 0 1 取反1 1 0 1 0 加1--------1 1 0 1 0 -10 12var a = 9;print(~a); ^ 异或不相同的才出 1 12341 0 1 0 100 0 1 0 2--------1 0 0 0 8 123var a = 10;var b = 2;print(a ^ b); 计算机中可以用来取反色 移位运算符&lt;&lt; 左移12340 0 0 1 1 二进制0 0 1 0 左移一位 20 1 0 0 左移一位 41 0 0 0 左移一位 8 向左移动一位 12var a = 1 &lt;&lt; 1;print(a); &gt;&gt; 右移12341 0 0 0 8 二进制0 1 0 0 右移一位 40 0 1 0 右移一位 20 0 0 1 右移一位 1 向右移动一位 12var a = 8 &gt;&gt; 1;print(a); 代码 number.dart 参考 language-tour int class double class num class © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 05 常量","date":"2018-10-10T06:49:26.000Z","path":"2018/10/10/dart/dart-05-constant/","text":"本节目标 常量的定义方式 final const 的区别 环境 Dart 2.0.0 定义类型声明可以省略12345final String a = 'ducafecat';final a = 'ducafecat';const String a = 'ducafecat';const a = 'ducafecat'; 初始后不能再赋值12345final a = 'ducafecat';a = 'abc';const a = 'ducafecat';a = 'abc'; 不能和 var 同时使用12final var a = 'ducafecat';const var a = 'ducafecat'; const 赋值 申明可省略12const List ls = const [11, 22, 33];const List ls = [11, 22, 33]; 区别需要确定的值123final dt = DateTime.now();const dt = const DateTime.now(); 不可变性可传递12345final List ls = [11, 22, 33];ls[1] = 44;const List ls = [11, 22, 33];ls[1] = 44; 内存中重复创建1234567final a1 = [11 , 22];final a2 = [11 , 22];print(identical(a1, a2));const a1 = [11 , 22];const a2 = [11 , 22];print(identical(a1, a2)); 代码 constant.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 04 变量的两种类型","date":"2018-10-10T02:18:25.000Z","path":"2018/10/10/dart/dart-04-variables/","text":"本节目标 了解 弱类型 强类型 常见 强类型 有哪些 如何选着何时用那种类型 环境 Dart 2.0.0 弱类型var如果没有初始值，可以变成任何类型 123456var a;a = 'ducafecat';a = 123;a = true;a = &#123;'key': 'val123'&#125;;a = ['abc']; Object动态任意类型，编译阶段检查类型 1234Object a = 'doucafecat';a = 123;a = [2222];a.p(); dynamic动态任意类型，编译阶段不检查检查类型 1234dynamic a = 'doucafecat';a = 123;a = [1111];a.p(); 比较 var 与 dynamic、Object唯一区别 var 如果有初始值，类型被锁定 1234var a = 'ducafecat';dynamic a = 'doucafecat';Object a = 'doucafecat';a = 123; 强类型申明类型声明后，类型被锁定 123String a;a = 'ducafecat';a = 123; 常见类型 名称 说明 num 数字 int 整型 double 浮点 bool 布尔 String 字符串 StringBuffer 字符串 buffer DateTime 时间日期 Duration 时间区间 List 列表 Sets 无重复队列 Maps kv 容器 enum 枚举 123456String a = 'doucafecat';int i = 123;double d = 0.12;bool b = true;DateTime dt = new DateTime.now();List l = [ a, i, d, b, dt]; 默认值一切都是 Object , 变量声明后默认都是 null 1234var a;String a;print(a);assert(a == null); assert 检查点函数，如果不符合条件直接抛出错误并终止程序进程 如何使用 在写 API 接口的时候，请用 强类型，一旦不符合约定，接收数据时能方便排查故障 你在写个小工具时，可以用 弱类型，这样代码写起来很快，类型自动适应 代码 variables.dart 参考 language-tour © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 03 MacOS 下安装 SDK","date":"2018-09-30T07:41:49.000Z","path":"2018/09/30/dart/dart-03-install-macos/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 MacOS Dart SDK 2.0.0 下载 SDKSDK 列表 archive 下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-macos-x64-release.zip 解压到磁盘 磁盘位置 ~/Documents/sdk/dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量12345678# 打开配置文件vim ~/.bash_profile# 尾部加入配置export PATH=~/Documents/sdk/dart-sdk/bin:$PATH# 重载配置文件source ~/.bash_profile 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"macos_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 02 Windows 下安装 SDK","date":"2018-09-30T06:41:49.000Z","path":"2018/09/30/dart/dart-02-install-windows/","text":"本节目标 配置 Dart 开发环境 解决墙内问题 环境 Windows 10 Dart SDK 2.0.0 下载 SDKSDK 列表 archive 源下载 URL1https://storage.googleapis.com/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 墙内请替换域名 storage.flutter-io.cn 替换后 URL1https://storage.flutter-io.cn/dart-archive/channels/stable/release/2.0.0/sdk/dartsdk-windows-x64-release.zip 解压到磁盘 磁盘位置 C:\\sdk\\dart-sdk 配置 VSCode IDE下载链接安装 Dart 插件编写 HelloWord 新建目录 dart-learn 编写文件 hello.dart 123void main() &#123; print('hello word!');&#125; 调试运行配置文件 launch.json 1234567891011121314&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Dart\", \"program\": \"$&#123;file&#125;\", \"request\": \"launch\", \"type\": \"dart\" &#125; ]&#125; 配置命令行模式设置环境变量 环境变量 PATH 新增 C:\\sdk\\dart-sdk\\bin 测试 新开命令行窗口 12dart --versionDart VM version: 2.0.0 (Fri Aug 3 10:53:23 2018 +0200) on \"windows_x64\" 参考 Dart SDK Archive Using-Flutter-in-China © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]},{"title":"Dart语言学习 - 01 前言","date":"2018-09-30T02:00:48.000Z","path":"2018/09/30/dart/dart-01-introduce/","text":"本节目标 为什么学习 Dart 课程计划 如果获取课程资料、代码、视频 2018 Google 开发者大会大会官网 首页简介 bilibili 视频 介绍视频 Flutter官网 Flutter Dart官网 homepage 多平台开发 Platforms 课程计划12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879## 前言## 安装&amp;配置 - Windows## 安装&amp;配置 - MacOS## 变量 - 两种方式## 变量 - 常量## 类型 - 数字## 类型 - Bool## 类型 - 字符串## 类型 - 日期## 类型 - List## 类型 - Map## 类型 - Set## 类型 - Runes## 类型 - Symbol## 类型 - Enum## 注释 - Comments## 函数## 操作符## 流程控制## 异常## 类 - Class## 类 - getter、setter## 类 - 静态变量、方法## 类 - Abstract 抽象类、方法## 类 - Interface 接口## 类 - extends 继承## 类 - mixin 混合## 类 - 工厂构造函数## 类库 - Libraries## 泛型 - Generics## 异步 - Asynchrony## 生成器 - Generators## 可调用 - Callable## 隔离 - Isolate## 类型定义 - Typedef## 注解 - Metadata## 代码规范 - 代码风格## 代码规范 - 文档注释## 代码规范 - 最佳实践## 代码规范 - 设计指南 课程资料主站 https://ducafecat.tech资料 视频 youtube 优酷 文档 \b代码 参考 Dart 官网 Flutter 官网 2018 Google 开发者大会 bilibili © 猫哥 https://ducafecat.tech","tags":[{"name":"dart","slug":"dart","permalink":"https://ducafecat.tech/tags/dart/"}]}]